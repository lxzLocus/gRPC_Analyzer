%_Input Prompt_%: 
 ＃＃ Instruction ＃＃
You are tasked with identifying and fixing potential gRPC-related issues in the source code. You will be provided with a list of file paths and some specific files where potential issues may exist. If additional files need to be referenced, indicate them with a "%_Reply Required_%" tag at the top of your response, followed by the file paths you wish to access.

### What you should do:
- Analyze the "### proto file ###" to ensure all message and service definitions are correctly implemented in the source code.
- Examine the files listed in "### Suspected Files ###" for potential issues, but note that no diffs will be provided.
- Correct any type mismatches, field names, or methods based on the proto file.
- Identify potential errors **beyond** the given suspected files if necessary.
- Ensure that all necessary files affected by the bug are modified, beyond just those listed in "### Suspected Files ###".
- Output only the fully corrected source code **for all affected files**, not just the initially provided files.

---

## Context ##

### Proto file ###
{
  "proto_files": [
    {
      "path": "src/client/java/daos-java/src/main/resources/DaosObjectAttribute.proto",
      "content": "syntax = \"proto3\";\npackage objattr;\noption java_package = \"io.daos.obj.attr\";\noption java_outer_classname = \"DaosObjAttrClasses\";\noption java_multiple_files = true;\n\nenum DaosObjSchema {\n  DAOS_OS_SINGLE = 0;   /**< Single stripe object */\n  DAOS_OS_STRIPED = 1;\t/**< Fix striped object */\n  DAOS_OS_DYN_STRIPED = 2;\t/**< Dynamically striped object */\n  DAOS_OS_DYN_CHUNKED = 3;\t/**< Dynamically chunked object */\n}\n\nenum DaosObjResil {\n  DAOS_RES_EC = 0;  /**< Erasure code */\n  DAOS_RES_REPL = 1;  /**< Replication */\n}\n\nmessage DaosRpAttr {\n  uint32 r_proto = 1;\n  uint32 r_num = 2;\n}\n\nmessage DaosEcAttr {\n  uint32 e_k = 1;\n  uint32 e_p = 2;\n  uint32 e_len = 3;\n}\n\nmessage DaosOclassAttr {\n  DaosObjSchema ca_schema = 1;\n  DaosObjResil ca_resil = 2;\n  uint32 ca_resil_degree = 3;\n  uint32 ca_grp_nr = 4;\n  oneof u {\n    DaosRpAttr rp = 5;\n    DaosEcAttr ec = 6;\n  }\n}\n\nmessage DaosObjectAttribute {\n  uint32 oa_rank = 1;\n  DaosOclassAttr oa_oa = 2;\n}\n"
    },
    {
      "path": "src/client/java/daos-java/src/main/resources/DunsAttribute.proto",
      "content": "syntax = \"proto3\";\npackage uns;\noption java_package = \"io.daos.dfs.uns\";\noption java_outer_classname = \"DunsClasses\";\noption java_multiple_files = true;\n\nenum Layout {\n  UNKNOWN = 0;\n  POSIX = 1;\n  HDF5 = 2;\n}\n\nmessage DunsAttribute {\n  string poolId = 1;\n  string contId = 2;\n  Layout layout_type = 3;\n  string object_type = 4;\n  uint64  chunk_size = 5;\n  string rel_path = 6;\n  bool   on_lustre  = 7;\n  bool no_prefix = 9;\n  uint32 flags = 10;\n}\n\n"
    },
    {
      "path": "src/control/vendor/github.com/Jille/raft-grpc-transport/proto/transport.proto",
      "content": "syntax = \"proto3\";\n\noption go_package = \"github.com/Jille/raft-grpc-transport/proto\";\nimport \"google/protobuf/timestamp.proto\";\n\nservice RaftTransport {\n  // AppendEntriesPipeline opens an AppendEntries message stream.\n  rpc AppendEntriesPipeline(stream AppendEntriesRequest) returns (stream AppendEntriesResponse) {}\n\n  // AppendEntries performs a single append entries request / response.\n  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse) {}\n  // RequestVote is the command used by a candidate to ask a Raft peer for a vote in an election.\n  rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse) {}\n  // TimeoutNow is used to start a leadership transfer to the target node.\n  rpc TimeoutNow(TimeoutNowRequest) returns (TimeoutNowResponse) {}\n  // InstallSnapshot is the command sent to a Raft peer to bootstrap its log (and state machine) from a snapshot on another peer.\n  rpc InstallSnapshot(stream InstallSnapshotRequest) returns (InstallSnapshotResponse) {}\n}\n\nmessage RPCHeader {\n\tint64 protocol_version = 1;\n}\n\nmessage Log {\n\tenum LogType {\n\t\tLOG_COMMAND = 0;\n\t\tLOG_NOOP = 1;\n\t\tLOG_ADD_PEER_DEPRECATED = 2;\n\t\tLOG_REMOVE_PEER_DEPRECATED = 3;\n\t\tLOG_BARRIER = 4;\n\t\tLOG_CONFIGURATION = 5;\n\t}\n\tuint64 index = 1;\n\tuint64 term = 2;\n\tLogType type = 3;\n\tbytes data = 4;\n\tbytes extensions = 5;\n\tgoogle.protobuf.Timestamp appended_at = 6;\n}\n\nmessage AppendEntriesRequest {\n\tRPCHeader rpc_header = 1;\n\tuint64 term = 2;\n\tbytes leader = 3;\n\tuint64 prev_log_entry = 4;\n\tuint64 prev_log_term = 5;\n\trepeated Log entries = 6;\n\tuint64 leader_commit_index = 7;\n}\n\nmessage AppendEntriesResponse {\n\tRPCHeader rpc_header = 1;\n\tuint64 term = 2;\n\tuint64 last_log = 3;\n\tbool success = 4;\n\tbool no_retry_backoff = 5;\n}\n\nmessage RequestVoteRequest {\n\tRPCHeader rpc_header = 1;\n\tuint64 term = 2;\n\tbytes candidate = 3;\n\tuint64 last_log_index = 4;\n\tuint64 last_log_term = 5;\n\tbool leadership_transfer = 6;\n}\n\nmessage RequestVoteResponse {\n\tRPCHeader rpc_header = 1;\n\tuint64 term = 2;\n\tbytes peers = 3;\n\tbool granted = 4;\n}\n\nmessage TimeoutNowRequest {\n\tRPCHeader rpc_header = 1;\n}\n\nmessage TimeoutNowResponse {\n\tRPCHeader rpc_header = 1;\n}\n\n// The first InstallSnapshotRequest on the stream contains all the metadata.\n// All further messages contain only data.\nmessage InstallSnapshotRequest {\n\tRPCHeader rpc_header = 1;\n\tint64 snapshot_version = 11;\n\tuint64 term = 2;\n\tbytes leader = 3;\n\tuint64 last_log_index = 4;\n\tuint64 last_log_term = 5;\n\tbytes peers = 6;\n\tbytes configuration = 7;\n\tuint64 configuration_index = 8;\n\tint64 size = 9;\n\n\tbytes data = 10;\n}\n\nmessage InstallSnapshotResponse {\n\tRPCHeader rpc_header = 1;\n\tuint64 term = 2;\n\tbool success = 3;\n}\n"
    },
    {
      "path": "src/control/vendor/google.golang.org/protobuf/types/gofeaturespb/go_features.proto",
      "content": "// Protocol Buffers - Google's data interchange format\n// Copyright 2023 Google Inc.  All rights reserved.\n//\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file or at\n// https://developers.google.com/open-source/licenses/bsd\n\nsyntax = \"proto2\";\n\npackage google.protobuf;\n\nimport \"google/protobuf/descriptor.proto\";\n\noption go_package = \"google.golang.org/protobuf/types/gofeaturespb\";\n\nextend google.protobuf.FeatureSet {\n  optional GoFeatures go = 1002;\n}\n\nmessage GoFeatures {\n  // Whether or not to generate the deprecated UnmarshalJSON method for enums.\n  optional bool legacy_unmarshal_json_enum = 1 [\n    retention = RETENTION_RUNTIME,\n    targets = TARGET_TYPE_ENUM,\n    edition_defaults = { edition: EDITION_PROTO2, value: \"true\" },\n    edition_defaults = { edition: EDITION_PROTO3, value: \"false\" }\n  ];\n}\n"
    },
    {
      "path": "src/proto/ctl/common.proto",
      "content": "// (C) Copyright 2019-2021 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\nsyntax = \"proto3\";\npackage ctl;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/ctl\";\n\nmessage EmptyReq {}\n\nmessage FilePath {\n\tstring path = 1;\n}\n\nenum ResponseStatus {\n\tCTL_SUCCESS = 0;\n\tCTL_IN_PROGRESS = 1;\t// Not yet completed\n\tCTL_WAITING = 2;\t// Blocked\n\tCTL_ERR_CONF = -1;\t// Config file parsing error\n\tCTL_ERR_NVME = -2;\t// NVMe subsystem error\n\tCTL_ERR_SCM = -3;\t// SCM subsystem error\n\tCTL_ERR_APP = -4;\t// Other application error\n\tCTL_ERR_UNKNOWN = -5;\t// Unknown error\n\tCTL_NO_IMPL = -6;\t// No implementation\n}\n\nmessage ResponseState {\n\tResponseStatus status = 1;\n\tstring error = 2;\n\tstring info = 3;\n}\n\n"
    },
    {
      "path": "src/proto/ctl/ctl.proto",
      "content": "//\n// (C) Copyright 2019-2023 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\nsyntax = \"proto3\";\npackage ctl;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/ctl\";\n\nimport \"ctl/storage.proto\";\nimport \"ctl/network.proto\";\nimport \"ctl/firmware.proto\";\nimport \"ctl/smd.proto\";\nimport \"ctl/ranks.proto\";\nimport \"ctl/server.proto\";\nimport \"ctl/support.proto\";\n\n// Service definitions for communications between gRPC management server and\n// client regarding tasks related to DAOS system and server hardware.\n//\n// All Control service RPCs will terminate at gRPC server and do not interact\n// with the Management Service.\nservice CtlSvc {\n\t// Retrieve details of nonvolatile storage on server, including health info\n\trpc StorageScan(StorageScanReq) returns(StorageScanResp) {};\n\t// Format nonvolatile storage devices for use with DAOS\n\trpc StorageFormat(StorageFormatReq) returns(StorageFormatResp) {};\n\t// Rebind SSD from kernel and bind instead to user-space for use with DAOS\n\trpc StorageNvmeRebind(NvmeRebindReq) returns(NvmeRebindResp) {};\n\t// Add newly inserted SSD to DAOS engine config\n\trpc StorageNvmeAddDevice(NvmeAddDeviceReq) returns(NvmeAddDeviceResp) {};\n\t// Perform a fabric scan to determine the available provider, device, NUMA node combinations\n\trpc NetworkScan (NetworkScanReq) returns (NetworkScanResp) {};\n\t// Retrieve firmware details from storage devices on server\n\trpc FirmwareQuery(FirmwareQueryReq) returns (FirmwareQueryResp) {};\n\t// Update firmware on storage devices on server\n\trpc FirmwareUpdate(FirmwareUpdateReq) returns (FirmwareUpdateResp) {};\n\t// Query the per-server metadata\n\trpc SmdQuery(SmdQueryReq) returns (SmdQueryResp) {}\n\t// Manage devices (per-server) identified in SMD table\n\trpc SmdManage(SmdManageReq) returns (SmdManageResp) {}\n\t// Set log level for DAOS I/O Engines on a host.\n\trpc SetEngineLogMasks(SetLogMasksReq) returns (SetLogMasksResp) {}\n\t// Prepare DAOS I/O Engines on a host for controlled shutdown. (gRPC fanout)\n\trpc PrepShutdownRanks(RanksReq) returns (RanksResp) {}\n\t// Stop DAOS I/O Engines on a host. (gRPC fanout)\n\trpc StopRanks(RanksReq) returns (RanksResp) {}\n\t// ResetFormat DAOS I/O Engines on a host. (gRPC fanout)\n\trpc ResetFormatRanks(RanksReq) returns (RanksResp) {}\n\t// Start DAOS I/O Engines on a host. (gRPC fanout)\n\trpc StartRanks(RanksReq) returns (RanksResp) {}\n\t// Perform a Log collection on Servers for support/debug purpose\n\trpc CollectLog (CollectLogReq) returns (CollectLogResp) {};\n}\n"
    },
    {
      "path": "src/proto/ctl/firmware.proto",
      "content": "//\n// (C) Copyright 2020-2021 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\nsyntax = \"proto3\";\npackage ctl;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/ctl\";\n\nimport \"ctl/storage_scm.proto\";\nimport \"ctl/smd.proto\";\n\nmessage FirmwareQueryReq {\n\tbool queryScm = 1; // Should we query SCM devices?\n\tbool queryNvme = 2; // Should we query NVMe devices?\n\trepeated string deviceIDs = 3; // Filter by specific devices\n\tstring modelID = 4; // Filter by model ID\n\tstring firmwareRev = 5; // Filter by current firmware revision\n}\n\nmessage ScmFirmwareQueryResp {\n\tScmModule module = 1; // The module of this firmware\n\tstring activeVersion = 2; // Active FW version\n\tstring stagedVersion = 3; // Staged FW version\n\tuint32 imageMaxSizeBytes = 4; // Maximum size of FW image accepted\n\tuint32 updateStatus = 5; // Status of FW update\n\tstring error = 6; // Error string, if any\n}\n\nmessage NvmeFirmwareQueryResp {\n\tNvmeController device = 1; // Controller information includes FW rev\n}\n\nmessage FirmwareQueryResp {\n\trepeated ScmFirmwareQueryResp scmResults = 1;\n\trepeated NvmeFirmwareQueryResp nvmeResults = 2;\n}\n\nmessage FirmwareUpdateReq {\n\tstring firmwarePath = 1; // Path to firmware file\n\tenum DeviceType {\n\t\tSCM = 0;\n\t\tNVMe = 1;\n\t}\n\tDeviceType type = 2; // Type of device this firmware applies to\n\trepeated string deviceIDs = 3; // Devices this update applies to\n\tstring modelID = 4; // Model ID this update applies to\n\tstring firmwareRev = 5; // Starting FW rev this update applies to\n}\n\nmessage ScmFirmwareUpdateResp {\n\tScmModule module = 1; // SCM device\n\tstring error = 2; // empty if successful\n}\n\nmessage NvmeFirmwareUpdateResp {\n\tstring pciAddr = 1; // PCI address of the NVMe device\n\tstring error = 2; // empty if successful\n}\n\nmessage FirmwareUpdateResp {\n\trepeated ScmFirmwareUpdateResp scmResults = 1; // results for SCM update\n\trepeated NvmeFirmwareUpdateResp nvmeResults = 2; // results for NVMe update\n}\n"
    },
    {
      "path": "src/proto/ctl/network.proto",
      "content": "//\n// (C) Copyright 2019-2021 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\nsyntax = \"proto3\";\npackage ctl;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/ctl\";\n\nmessage NetworkScanReq {\n  string provider = 1;\n  string excludeinterfaces = 2;\n}\n\nmessage NetworkScanResp {\n  repeated FabricInterface interfaces = 1;\n  int32 numacount = 2;\n  int32 corespernuma = 3; // physical cores per numa node\n}\n\nmessage FabricInterface {\n  string provider = 1;\n  string device = 2;\n  uint32 numanode = 3;\n  uint32 priority = 4;\n  uint32 netdevclass = 5;\n}\n"
    },
    {
      "path": "src/proto/ctl/ranks.proto",
      "content": "//\n// (C) Copyright 2020-2021 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\nsyntax = \"proto3\";\npackage ctl;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/ctl\";\n\nimport \"shared/ranks.proto\";\n\n// Generic request indicating which ranks to operate on.\n// Used in gRPC fanout to operate on hosts with multiple ranks.\nmessage RanksReq {\n\tbool force = 3; // force operation\n\tstring ranks = 4; // rankset to operate over\n}\n\n// Generic response containing DER result from multiple ranks.\n// Used in gRPC fanout to operate on hosts with multiple ranks.\nmessage RanksResp {\n\trepeated shared.RankResult results = 1;\n}\n\n"
    },
    {
      "path": "src/proto/ctl/server.proto",
      "content": "//\n// (C) Copyright 2021-2023 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\nsyntax = \"proto3\";\npackage ctl;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/ctl\";\n\n// Control Service Protobuf Definitions related to interactions between\n// DAOS control server and DAOS I/O Engine.\n\n// SetLogMasksReq provides parameters to set system-wide log masks.\nmessage SetLogMasksReq {\n\tstring sys = 1; // DAOS system name\n\tstring masks = 2; // set log masks for a set of facilities to a given level\n\tstring streams = 3; // enable specific set of debug streams to log\n\tstring subsystems = 4; // enable logging of specific subsystems\n\tbool reset_masks = 5; // reset log-masks to engine log_mask value in config\n\tbool reset_streams = 6; // reset debug-streams to DD_MASK env value in config\n\tbool reset_subsystems = 7; // reset enabled-subsystems to DD_SUBSYS env value in config\n}\n\n// SetEngineLogMasksResp returns results of attempts to set engine log masks.\nmessage SetLogMasksResp {\n\tint32 status = 1; // DAOS error code returned from dRPC\n\trepeated string errors = 2; // per-instance error strings\n}\n"
    },
    {
      "path": "src/proto/ctl/smd.proto",
      "content": "//\n// (C) Copyright 2019-2023 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\nsyntax = \"proto3\";\npackage ctl;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/ctl\";\n\n// Control Service Protobuf Definitions related to interactions between\n// DAOS control server and DAOS Blob I/O (BIO) module and Per-Server Metadata\n// (SMD).\n\nmessage BioHealthReq {\n\tstring dev_uuid = 1;\n\tuint64 meta_size = 2;\t// Size of the metadata (i.e. vos file index) blob\n\tuint64 rdb_size = 3;\t// Size of the RDB blob\n}\n\n// BioHealthResp mirrors nvme_health_stats structure.\nmessage BioHealthResp {\n\treserved 1, 2;\n\tuint64 timestamp = 3;\n\t// Device health details\n\tuint32 warn_temp_time = 5;\n\tuint32 crit_temp_time = 6;\n\tuint64 ctrl_busy_time = 7;\n\tuint64 power_cycles = 8;\n\tuint64 power_on_hours = 9;\n\tuint64 unsafe_shutdowns = 10;\n\tuint64 media_errs = 11;\n\tuint64 err_log_entries = 12;\n\t// I/O error counters\n\tuint32 bio_read_errs = 13;\n\tuint32 bio_write_errs = 14;\n\tuint32 bio_unmap_errs = 15;\n\tuint32 checksum_errs = 16;\n\tuint32 temperature = 17; // in Kelvin\n\t// Critical warnings\n\tbool temp_warn = 18;\n\tbool avail_spare_warn = 19;\n\tbool dev_reliability_warn = 20;\n\tbool read_only_warn = 21;\n\tbool volatile_mem_warn = 22; // volatile memory backup\n\tint32 status = 23; // DAOS err code\n\tstring dev_uuid = 24; // UUID of blobstore\n\t// Usage stats\n\tuint64 total_bytes = 25; // size of blobstore\n\tuint64 avail_bytes = 26; // free space in blobstore\n\t// Intel vendor SMART attributes\n\tuint32 program_fail_cnt_norm = 27; // percent remaining\n\tuint64 program_fail_cnt_raw = 28; // current value\n\tuint32 erase_fail_cnt_norm = 29;\n\tuint64 erase_fail_cnt_raw = 30;\n\tuint32 wear_leveling_cnt_norm = 31;\n\tuint32 wear_leveling_cnt_min = 32;\n\tuint32 wear_leveling_cnt_max = 33;\n\tuint32 wear_leveling_cnt_avg = 34;\n\tuint64 endtoend_err_cnt_raw = 35;\n\tuint64 crc_err_cnt_raw = 36;\n\tuint64 media_wear_raw = 37;\n\tuint64 host_reads_raw = 38;\n\tuint64 workload_timer_raw = 39;\n\tuint32 thermal_throttle_status = 40;\n\tuint64 thermal_throttle_event_cnt = 41;\n\tuint64 retry_buffer_overflow_cnt = 42;\n\tuint64 pll_lock_loss_cnt = 43;\n\tuint64 nand_bytes_written = 44;\n\tuint64 host_bytes_written = 45;\n\t// Engine configs properties\n\tuint64 cluster_size = 46;\t\t// blobstore cluster size in bytes\n\tuint64 meta_wal_size = 47;\t\t// metadata WAL blob size\n\tuint64 rdb_wal_size = 48;\t\t// RDB WAL blob size\n}\n\nenum NvmeDevState {\n\tUNKNOWN   = 0; // Device state is unknown, zero value\n\tNORMAL    = 1; // Device is in a normal operational state\n\tNEW       = 2; // Device is new and is not yet in-use\n\tEVICTED   = 3; // Device is faulty and has been evicted\n\tUNPLUGGED = 4; // Device has been physically removed\n}\n\nenum LedState {\n\tNA = 0;\t\t\t// Equivalent to SPDK_VMD_LED_STATE_UNKNOWN\t(VMD not enabled)\n\tQUICK_BLINK = 1;\t// Equivalent to SPDK_VMD_LED_STATE_IDENTIFY\t(4Hz blink)\n\tON = 2;\t\t\t// Equivalent to SPDK_VMD_LED_STATE_FAULT\t(solid on)\n\tSLOW_BLINK = 3;\t\t// Equivalent to SPDK_VMD_LED_STATE_REBUILD\t(1Hz blink)\n\tOFF = 4;\t\t// Equivalent to SPDK_VMD_LED_STATE_OFF\n}\n\n// NvmeController represents an NVMe Controller (SSD).\nmessage NvmeController {\n\t// Namespace represents a namespace created on an NvmeController.\n\tmessage Namespace {\n\t\tuint32 id = 1;\t\t\t// namespace id\n\t\tuint64 size = 2;\t\t// device capacity in bytes\n\t\tstring ctrlr_pci_addr = 3;\t// parent controller PCI address\n\t}\n\n\tstring model = 1;\t\t\t// model name\n\tstring serial = 2;\t\t\t// serial number\n\tstring pci_addr = 3;\t\t\t// pci address\n\tstring fw_rev = 4;\t\t\t// firmware revision\n\tint32 socket_id = 5;\t\t\t// NUMA socket ID\n\tBioHealthResp health_stats = 6;\t\t// controller's health stats\n\trepeated Namespace namespaces = 7;\t// controller's namespaces\n\trepeated SmdDevice smd_devices = 8;     // controller's blobstores\n\tNvmeDevState dev_state = 9;\t\t// NVMe device operational state\n\tLedState led_state = 10;\t\t// NVMe device LED state\n\tstring pci_dev_type = 11;\t\t// PCI device type, vmd or pci\n\tstring vendor_id = 12;\t\t\t// controller's vendor ID\n}\n\n// SmdDevice represents a DAOS BIO device, identified by a UUID written into a label stored on a\n// SPDK blobstore created on a NVMe namespace. Multiple SmdDevices may exist per NVMe controller.\nmessage SmdDevice {\n\treserved 3,4,5;\n\tstring uuid = 1;\t\t// UUID of blobstore\n\trepeated int32 tgt_ids = 2;\t// VOS target IDs\n\tuint64 total_bytes = 6;\t\t// blobstore clusters total bytes\n\tuint64 avail_bytes = 7;\t\t// Available RAW storage for data\n\tuint64 cluster_size = 8;\t// blobstore cluster size in bytes\n\tuint32 rank = 9;\t\t// DAOS I/O Engine using controller\n\tuint32 role_bits = 10;\t\t// Device active roles (bitmask)\n\tuint64 meta_size = 11;\t\t// Size of the metadata (i.e. vos file index) blob\n\tuint64 meta_wal_size = 12;\t// Size of the metadata WAL blob\n\tuint64 rdb_size = 13;\t\t// Size of the RDB blob\n\tuint64 rdb_wal_size = 14;\t// Size of the RDB WAL blob\n\tuint64 usable_bytes = 15;\t// Effective storage available for data\n\tNvmeController ctrlr = 16;\t// Backing NVMe controller of SMD device\n\tuint32 ctrlr_namespace_id = 17;\t// NVMe namespace id hosting SMD blobstore\n}\n\nmessage SmdDevReq {}\n\nmessage SmdDevResp {\n\tint32 status = 1;\n\trepeated SmdDevice devices = 2;\n}\n\nmessage SmdPoolReq {}\n\nmessage SmdPoolResp {\n\tmessage Pool {\n\t\tstring uuid = 1; // UUID of VOS pool\n\t\trepeated int32 tgt_ids = 2; // VOS target IDs\n\t\trepeated uint64 blobs = 3; // SPDK blobs\n\t}\n\tint32 status = 1;\n\trepeated Pool pools = 2;\n}\n\nmessage SmdQueryReq {\n\tbool omit_devices = 1;\t\t// Indicate query should omit devices\n\tbool omit_pools = 2;\t\t// Indicate query should omit pools\n\tbool include_bio_health = 3;\t// Indicate query should include BIO health for devices\n\tstring uuid = 4;\t\t// Constrain query to this UUID (pool or device)\n\tuint32 rank = 5;\t\t// Restrict response to only include info about this rank\n}\n\nmessage SmdQueryResp {\n\tmessage Pool {\n\t\tstring uuid = 1; // UUID of VOS pool\n\t\trepeated int32 tgt_ids = 2; // VOS target IDs\n\t\trepeated uint64 blobs = 3; // SPDK blobs\n\t}\n\tmessage RankResp {\n\t\tuint32 rank = 1; // rank to which this response corresponds\n\t\trepeated SmdDevice devices = 2; // List of devices on the rank\n\t\trepeated Pool pools = 3; // List of pools on the rank\n\t}\n\tint32 status = 1; // DAOS error code\n\trepeated RankResp ranks = 2; // List of per-rank responses\n}\n\nenum LedAction {\n\tGET = 0;\n\tSET = 1;\n\tRESET = 2;\n}\n\nmessage LedManageReq {\n\tstring ids = 1;\t\t\t// List of Device-UUIDs and/or PCI-addresses\n\tLedAction led_action = 3;\t// LED action to perform\n\tLedState led_state = 4;\t\t// LED state to set (used if action is SET)\n\tuint32 led_duration_mins = 5;\t// LED action duration (how long to blink LED in minutes)\n}\n\nmessage DevReplaceReq {\n\tstring old_dev_uuid = 1;\t// UUID of old (hot-removed) blobstore/device\n\tstring new_dev_uuid = 2;\t// UUID of new (hot-plugged) blobstore/device\n\tbool no_reint = 3;\t\t// Skip device reintegration if set\n}\n\nmessage SetFaultyReq {\n\tstring uuid = 1;\t// Device-UUID (as recorded in SMD)\n}\n\nmessage DevManageResp {\n\tint32 status = 1;\t// DAOS error code\n\tSmdDevice device = 2;\t// Details of device that has been managed\n}\n\nmessage SmdManageReq {\n\toneof op{\n\t\tLedManageReq led = 1;\t\t// Request to manage LED state\n\t\tDevReplaceReq replace = 2;\t// Request to replace SMD device\n\t\tSetFaultyReq faulty = 3;\t// Request to set SMD device faulty\n\t}\n}\n\nmessage SmdManageResp {\n\tmessage Result {\n\t\tint32 status = 1;\t\t// DAOS error code\n\t\tSmdDevice device = 2;\n\t}\n\tmessage RankResp {\n\t\tuint32 rank = 1;\t\t// Rank to which this response corresponds\n\t\trepeated Result results = 2;\t// List of device results on the rank\n\t}\n\trepeated RankResp ranks = 1;\t\t// List of per-rank responses\n}\n"
    },
    {
      "path": "src/proto/ctl/storage.proto",
      "content": "//\n// (C) Copyright 2019-2022 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\nsyntax = \"proto3\";\npackage ctl;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/ctl\";\n\nimport \"ctl/storage_nvme.proto\";\nimport \"ctl/storage_scm.proto\";\nimport \"ctl/common.proto\";\n\n// Management Service Protobuf Definitions related to interactions between\n// DAOS control server and locally attached storage.\n\nmessage StorageScanReq {\n\tScanNvmeReq nvme = 1;\n\tScanScmReq scm = 2;\n}\n\nmessage MemInfo {\n\tuint64 hugepages_total = 1;\n\tuint64 hugepages_free = 2;\n\tuint64 hugepages_reserved = 3;\n\tuint64 hugepages_surplus = 4;\n\tuint32 hugepage_size_kb = 5;\n\tuint64 mem_total_kb = 6;\n\tuint64 mem_free_kb = 7;\n\tuint64 mem_available_kb = 8;\n}\n\nmessage StorageScanResp {\n\tScanNvmeResp nvme = 1;\n\tScanScmResp scm = 2;\n\tMemInfo mem_info = 3;\n}\n\nmessage StorageFormatReq {\n\tFormatNvmeReq nvme = 1;\n\tFormatScmReq scm = 2;\n\tbool reformat = 3;\n}\n\nmessage StorageFormatResp {\n\trepeated NvmeControllerResult crets = 1;\t// One per controller format attempt\n\trepeated ScmMountResult mrets = 2;\t\t// One per scm format and mount attempt\n}\n\nmessage NvmeRebindReq {\n\tstring pci_addr = 1;\t// an NVMe controller PCI address\n}\n\nmessage NvmeRebindResp {\n\tResponseState state = 1;\n}\n\nmessage NvmeAddDeviceReq {\n\tstring pci_addr = 1;\t\t// PCI address of NVMe controller to add\n\tuint32 engine_index = 2;\t// Index of DAOS engine to add device to\n\tint32 storage_tier_index = 3;\t// Index of storage tier to add device to\n}\n\nmessage NvmeAddDeviceResp {\n\tResponseState state = 1;\n}\n"
    },
    {
      "path": "src/proto/ctl/storage_nvme.proto",
      "content": "//\n// (C) Copyright 2019-2023 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\nsyntax = \"proto3\";\npackage ctl;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/ctl\";\n\nimport \"ctl/common.proto\";\nimport \"ctl/smd.proto\";\n\n// NVMe Storage Protobuf Definitions related to interactions between\n// DAOS control server and locally attached storage.\n\n// NvmeControllerResult represents state of operation performed on controller.\nmessage NvmeControllerResult {\n\tstring pci_addr = 1;\t\t// PCI address of NVMe controller\n\tResponseState state = 2;\t// state of current operation\n\tuint32 role_bits = 3;\t\t// Device active roles (bitmask)\n}\n\nmessage ScanNvmeReq {\n\tbool Health = 1;\t// Retrieve NVMe device health statistics\n\tbool Meta = 2;\t\t// Retrieve metadata relating to NVMe device\n\tbool Basic = 3;\t\t// Strip NVMe device details to only basic\n\tuint64 MetaSize = 4;\t// Size of the metadata blob\n\tuint64 RdbSize = 5;\t// Size of the RDB blob\n}\n\nmessage ScanNvmeResp {\n\trepeated NvmeController ctrlrs = 1;\n\tResponseState state = 2;\n}\n\nmessage FormatNvmeReq {}\n\n// FormatNvmeResp isn't required because controller results are returned instead\n\n"
    },
    {
      "path": "src/proto/ctl/storage_scm.proto",
      "content": "//\n// (C) Copyright 2019-2024 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\nsyntax = \"proto3\";\npackage ctl;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/ctl\";\n\nimport \"ctl/common.proto\";\n\n// SCM Storage Protobuf Definitions related to interactions between\n// DAOS control server and locally attached storage devices.\n\n// ScmModule represent Storage Class Memory modules installed.\nmessage ScmModule {\n\tuint32 channelid = 1;\t\t// The channel id where module is installed.\n\tuint32 channelposition = 2;\t// The channel position where module is installed.\n\tuint32 controllerid = 3;\t// The memory controller id attached to module.\n\tuint32 socketid = 4;\t\t// The socket id attached to module.\n\tuint32 physicalid = 5;\t\t// The physical id of the module.\n\tuint64 capacity = 6;\t\t// The capacity of the module.\n\tstring uid = 7;\t\t\t// The uid of the module.\n\tstring partNumber = 8;\t\t// The part number of the module.\n\tstring firmwareRevision = 9;\t// Module's active firmware revision\n\tstring healthState      = 10;   // Module's health state.\n}\n\n// ScmNamespace represents SCM namespace as pmem device files created on a ScmRegion.\nmessage ScmNamespace {\n\t// Mount represents a mounted pmem block device.\n\tmessage Mount {\n\t\tstring path = 1;\n\t\tuint64 total_bytes = 2;\n\t\tuint64 avail_bytes = 3;\t\t\t// Available RAW storage for data\n\t\trepeated string device_list = 4;\n\t\tstring class = 5;\n\t\tuint32 rank = 6;\t\t\t// DAOS I/O Engine using SCM devices\n\t\tuint64 usable_bytes = 7;\t\t// Effective storage available for data\n\t}\n\tstring uuid = 1;\n\tstring blockdev = 2;\n\tstring dev = 3;\t\t\t// ndctl specific device identifier\n\tuint32 numa_node = 4;\n\tuint64 size = 5;\t\t// pmem block device capacity in bytes\n\tMount mount = 6;\t\t// mount OS info\n}\n\n// ScmModuleResult represents operation state for specific SCM/PM module.\n//\n// TODO: replace identifier with serial when returned in scan\nmessage ScmModuleResult {\n\tuint32 physicalid = 1;\t\t// SCM module identifier\n\tResponseState state = 2;\t// state of current operation\n}\n\n// ScmMountResult represents operation state for specific SCM mount point.\nmessage ScmMountResult {\n\tstring mntpoint = 1;\t\t// Path where device or tmpfs is mounted\n\tResponseState state = 2;\t// state of current operation\n\tuint32 instanceidx = 3;\t\t// Index of I/O Engine instance\n}\n\nmessage PrepareScmReq {\n\tbool reset = 1;\t\t\t// Reset SCM devices to memory mode\n}\n\nmessage PrepareScmResp {\n\trepeated ScmNamespace namespaces = 1;\t// Existing namespace devices (new and old)\n\tResponseState state = 2;\n\tbool rebootrequired = 3;\n}\n\nmessage ScanScmReq {\n\tbool usage = 1;\t\t\t// Populate usage statistics in scan\n}\n\nmessage ScanScmResp {\n\trepeated ScmModule modules = 1;\n\trepeated ScmNamespace namespaces = 2;\n\tResponseState state = 3;\n}\n\nmessage FormatScmReq {}\n// TODO: format should return existing / new mounts\n\n// FormatScmResp isn't required because SCM mount results are returned instead\n"
    },
    {
      "path": "src/proto/ctl/support.proto",
      "content": "//\n// (C) Copyright 2022-2023 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\nsyntax = \"proto3\";\npackage ctl;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/ctl\";\n\n// Management Service Protobuf Definitions related to collect-log for support purpose.\n\nmessage CollectLogReq {\n  string TargetFolder = 1;\n  string ExtraLogsDir = 2;\n  string AdminNode = 3;\n  bool JsonOutput = 4;\n  int32 LogFunction = 5;\n  string LogCmd = 6;\n  string LogStartDate = 7;\n  string LogEndDate = 8;\n  string LogStartTime = 9;\n  string LogEndTime = 10;\n  bool StopOnError = 11;\n}\n\nmessage CollectLogResp {\n  int32 status = 1; // DAOS error code\n}\n"
    },
    {
      "path": "src/proto/drpc.proto",
      "content": "//\n// (C) Copyright 2018-2022 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\nsyntax = \"proto3\";\npackage drpc;\n\noption go_package = \"github.com/daos-stack/daos/src/control/drpc\";\n\n// Call describes a function call to be executed over the dRPC channel.\nmessage Call {\n\tint32 module = 1; // ID of the module to process the call.\n\tint32 method = 2; // ID of the method to be executed.\n\tint64 sequence = 3; // Sequence number for matching a response to this call.\n\tbytes body = 4; // Input payload to be used by the method.\n}\n\n// Status represents the valid values for a response status.\nenum Status {\n\tSUCCESS = 0; // The method executed and provided a response payload, if needed. Otherwise, the method simply succeeded.\n\tSUBMITTED = 1; // The method has been queued for asynchronous execution.\n\tFAILURE = 2; // The method has failed and did not provide a response payload.\n\tUNKNOWN_MODULE = 3; // The requested module does not exist.\n\tUNKNOWN_METHOD = 4; // The requested method does not exist.\n\tFAILED_UNMARSHAL_CALL = 5; // Could not unmarshal the incoming call.\n\tFAILED_UNMARSHAL_PAYLOAD = 6; // Could not unmarshal the method-specific payload of the incoming call.\n\tFAILED_MARSHAL = 7; // Generated a response payload, but couldn't marshal it into the response.\n}\n\n// Response describes the result of a dRPC call.\nmessage Response {\n\tint64 sequence = 1; // Sequence number of the Call that triggered this response.\n\tStatus status = 2; // High-level status of the RPC. If SUCCESS, method-specific status may be included in the body.\n\tbytes body = 3; // Output payload produced by the method.\n}\n"
    },
    {
      "path": "src/proto/mgmt/acl.proto",
      "content": "//\n// (C) Copyright 2019-2023 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\nsyntax = \"proto3\";\npackage mgmt;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/mgmt\";\n\n// Access Control List related protobuf structures\n\n// Access control list and ownership information\nmessage AccessControlList {\n\trepeated string entries = 1; // List of ACEs in short string format\n\tstring owner_user = 2; // Name of user that owns the resource\n\tstring owner_group = 3; // Name of group that owns the resource\n}\n\n// Response to ACL-related requests includes the command status and current ACL\nmessage ACLResp {\n\tint32 status = 1; // DAOS error code\n\tAccessControlList acl = 2;\n}\n\n// Request to fetch an ACL\nmessage GetACLReq {\n\tstring sys = 1; // DAOS system identifier\n\tstring id = 2; // Target UUID or label\n\trepeated uint32 svc_ranks = 3; // List of pool service ranks\n}\n\n// Request to modify an ACL\n// Results depend on the specific modification command.\nmessage ModifyACLReq {\n\tstring sys = 1; // DAOS system identifier\n\tstring id = 2; // Target UUID or label\n\trepeated string entries = 3; // List of ACEs to overwrite ACL with\n\trepeated uint32 svc_ranks = 4; // List of pool service ranks\n}\n\n// Delete a principal's entry from the ACL\nmessage DeleteACLReq {\n\tstring sys = 1; // DAOS system identifier\n\tstring id = 2; // Target UUID or label\n\tstring principal = 3; // Principal whose entry is to be deleted\n\trepeated uint32 svc_ranks = 4; // List of pool service ranks\n}\n"
    },
    {
      "path": "src/proto/mgmt/cont.proto",
      "content": "//\n// (C) Copyright 2020-2021 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\nsyntax = \"proto3\";\npackage mgmt;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/mgmt\";\n\n// Management Service Protobuf Definitions related to interactions between\n// DAOS control server and DAOS containers.\n\n// ContSetOwnerReq supplies new pool parameters.\nmessage ContSetOwnerReq {\n\tstring sys = 1; // DAOS system identifier\n\tstring contUUID = 2; // UUID of the container\n\tstring poolUUID = 3; // UUID of the pool that the container is in\n\tstring owneruser = 4; // formatted user e.g. \"bob@\"\n\tstring ownergroup = 5; // formatted group e.g. \"builders@\"\n\trepeated uint32 svc_ranks = 6; // List of pool service ranks\n}\n\n// ContSetOwnerResp returns created pool uuid and ranks.\nmessage ContSetOwnerResp {\n\tint32 status = 1; // DAOS error code\n}\n"
    },
    {
      "path": "src/proto/mgmt/mgmt.proto",
      "content": "//\n// (C) Copyright 2019-2022 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\nsyntax = \"proto3\";\npackage mgmt;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/mgmt\";\n\nimport \"shared/event.proto\";\nimport \"mgmt/pool.proto\";\nimport \"mgmt/cont.proto\";\nimport \"mgmt/svc.proto\";\nimport \"mgmt/acl.proto\"; // ACL-related requests\nimport \"mgmt/system.proto\";\n\n// Management Service is replicated on a small number of servers in the system,\n// these requests will be processed on a host that is a member of the management\n// service.\n//\n// MgmtSvc RPCs will be forwarded over dRPC to be handled in data plane or\n// forwarded over gRPC to be handled by the management service.\nservice MgmtSvc {\n\t// Join the server described by JoinReq to the system.\n\trpc Join(JoinReq) returns (JoinResp) {}\n\t// ClusterEvent notify MS of a RAS event in the cluster.\n\trpc ClusterEvent(shared.ClusterEventReq) returns (shared.ClusterEventResp) {}\n\t// LeaderQuery provides a mechanism for clients to discover\n\t// the system's current Management Service leader\n\trpc LeaderQuery(LeaderQueryReq) returns (LeaderQueryResp) {}\n\t// Create a DAOS pool allocated across a number of ranks\n\trpc PoolCreate(PoolCreateReq) returns (PoolCreateResp) {}\n\t// Destroy a DAOS pool allocated across a number of ranks.\n\trpc PoolDestroy(PoolDestroyReq) returns (PoolDestroyResp) {}\n\t// Evict a DAOS pool's connections.\n\trpc PoolEvict(PoolEvictReq) returns (PoolEvictResp) {}\n\t// Exclude a pool target.\n\trpc PoolExclude(PoolExcludeReq) returns (PoolExcludeResp) {}\n\t// Drain a pool target.\n\trpc PoolDrain(PoolDrainReq) returns (PoolDrainResp) {}\n\t// Extend a pool.\n\trpc PoolExtend(PoolExtendReq) returns (PoolExtendResp) {}\n\t// Reintegrate a pool target.\n\trpc PoolReintegrate(PoolReintegrateReq) returns (PoolReintegrateResp) {}\n\t// PoolQuery queries a DAOS pool.\n\trpc PoolQuery(PoolQueryReq) returns (PoolQueryResp) {}\n\t// PoolQueryTarget queries a DAOS storage target.\n\trpc PoolQueryTarget(PoolQueryTargetReq) returns (PoolQueryTargetResp) {}\n\t// Set a DAOS pool property.\n\trpc PoolSetProp(PoolSetPropReq) returns (PoolSetPropResp) {}\n\t// Get a DAOS pool property list.\n\trpc PoolGetProp(PoolGetPropReq) returns (PoolGetPropResp) {}\n\t// Fetch the Access Control List for a DAOS pool.\n\trpc PoolGetACL(GetACLReq) returns (ACLResp) {}\n\t// Overwrite the Access Control List for a DAOS pool with a new one.\n\trpc PoolOverwriteACL(ModifyACLReq) returns (ACLResp) {}\n\t// Update existing the Access Control List for a DAOS pool with new entries.\n\trpc PoolUpdateACL(ModifyACLReq) returns (ACLResp) {}\n\t// Delete an entry from a DAOS pool's Access Control List.\n\trpc PoolDeleteACL(DeleteACLReq) returns (ACLResp) {}\n\t// Get the information required by libdaos to attach to the system.\n\trpc GetAttachInfo(GetAttachInfoReq) returns (GetAttachInfoResp) {}\n\t// List all pools in a DAOS system: basic info: UUIDs, service ranks.\n\trpc ListPools(ListPoolsReq) returns (ListPoolsResp) {}\n\t// List all containers in a pool\n\trpc ListContainers(ListContReq) returns (ListContResp) {}\n\t// Change the owner of a DAOS container\n\trpc ContSetOwner(ContSetOwnerReq) returns (ContSetOwnerResp) {}\n\t// Query DAOS system status\n\trpc SystemQuery(SystemQueryReq) returns(SystemQueryResp) {}\n\t// Stop DAOS system (shutdown data-plane instances)\n\trpc SystemStop(SystemStopReq) returns(SystemStopResp) {}\n\t// Start DAOS system (restart data-plane instances)\n\trpc SystemStart(SystemStartReq) returns(SystemStartResp) {}\n\t// Exclude DAOS ranks\n\trpc SystemExclude(SystemExcludeReq) returns(SystemExcludeResp) {}\n\t// Erase DAOS system database prior to reformat\n\trpc SystemErase(SystemEraseReq) returns(SystemEraseResp) {}\n\t// Clean up leaked resources for a given node\n\trpc SystemCleanup(SystemCleanupReq) returns(SystemCleanupResp){}\n\t// PoolUpgrade queries a DAOS pool.\n\trpc PoolUpgrade(PoolUpgradeReq) returns (PoolUpgradeResp) {}\n\t// Set a system attribute or attributes.\n\trpc SystemSetAttr(SystemSetAttrReq) returns (DaosResp) {}\n\t// Get a system attribute or attributes.\n\trpc SystemGetAttr(SystemGetAttrReq) returns (SystemGetAttrResp) {}\n\t// Set a system property or properties.\n\trpc SystemSetProp(SystemSetPropReq) returns (DaosResp) {}\n\t// Get a system property or properties.\n\trpc SystemGetProp(SystemGetPropReq) returns (SystemGetPropResp) {}\n}\n"
    },
    {
      "path": "src/proto/mgmt/pool.proto",
      "content": "//\n// (C) Copyright 2019-2023 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\nsyntax = \"proto3\";\npackage mgmt;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/mgmt\";\n\n// Management Service Protobuf Definitions related to interactions between\n// DAOS control server and DAOS pools.\n\n// PoolCreateReq supplies new pool parameters.\nmessage PoolCreateReq {\n\tstring uuid = 1; // UUID for new pool, generated on the client\n\tstring sys = 2; // DAOS system identifier\n\tstring user = 3; // formatted user e.g. \"bob@\"\n\tstring usergroup = 4; // formatted group e.g. \"builders@\"\n\trepeated string acl = 5; // Access Control Entries in short string format\n\trepeated PoolProperty properties = 6; // Pool properties to be set\n\n\t// The minimal fault domain tree format consists of a set of tuples\n\t// representing members of the tree in a breadth-first traversal order.\n\t// Each domain above rank consists of: (level, id, num children)\n\t// Each rank consists of: (rank number)\n\trepeated uint32 faultDomains = 7; // Fault domain tree, minimal format\n\tuint32 numsvcreps = 8; // desired number of pool service replicas\n\tuint64 totalbytes = 9; // Total pool size in bytes (auto config)\n\trepeated double tierratio = 10; // Ratio of storage tiers expressed as % of totalbytes (auto config)\n\tuint32 numranks = 11; // Number of target ranks to use (auto config)\n\trepeated uint32 ranks = 12; // target ranks (manual config)\n\trepeated uint64 tierbytes = 13; // Size in bytes of storage tiers (manual config)\n\tuint64 meta_blob_size     = 14; // Size in bytes of metadata blob on SSD (manual config)\n}\n\n// PoolCreateResp returns created pool uuid and ranks.\nmessage PoolCreateResp {\n\tint32 status = 1; // DAOS error code\n\tuint32 leader = 2; // Current service leader\n\trepeated uint32 svc_reps = 3; // pool service replica ranks\n\trepeated uint32 tgt_ranks = 4; // pool target ranks\n\trepeated uint64 tier_bytes = 5; // storage tiers allocated to pool\n\tuint64 meta_blob_size     = 6; // Size in bytes of metadata blob on SSD (manual config)\n}\n\n// PoolDestroyReq supplies pool identifier and force flag.\nmessage PoolDestroyReq {\n\tstring sys = 1; // DAOS system identifier\n\tstring id = 2; // uuid or label of pool to destroy\n\tbool force = 3; // destroy regardless of active connections\n\trepeated uint32 svc_ranks = 4; // List of pool service ranks\n\tbool recursive = 5; // destroy regardless of any child containers\n}\n\n// PoolDestroyResp returns resultant state of destroy operation.\nmessage PoolDestroyResp {\n\tint32 status = 1; // DAOS error code\n}\n\n// PoolEvictReq supplies pool identifier.\nmessage PoolEvictReq {\n\tstring sys = 1; // DAOS system identifier\n\tstring id = 2; // uuid or label of pool to evict\n\trepeated uint32 svc_ranks = 3; // List of pool service ranks\n\trepeated string handles = 4; // Optional list of handles to evict (Mutually exclusive with destroy/force_destroy)\n\tbool destroy = 5; // If true, evict is first step of a pool destroy operation\n\tbool force_destroy = 6; // If true and destroy=true, forcibly closes open pool handles\n\tstring machine = 7; // Optional machine name to evict handles for (Mutually exclusive with handles)\n}\n\n// PoolEvictResp returns resultant state of evict operation.\nmessage PoolEvictResp {\n\tint32 status = 1; // DAOS error code\n\tint32 count = 2; // Count of handles evicted\n}\n\n// PoolExcludeReq supplies pool identifier, rank, and target_idxs.\nmessage PoolExcludeReq {\n\tstring sys = 1; // DAOS system identifier\n\tstring id = 2; // uuid or label of pool to exclude some targets\n\tuint32 rank = 3; // target to move to the down state\n\trepeated uint32 targetidx = 4; // target ranks\n\trepeated uint32 svc_ranks = 5; // List of pool service ranks\n}\n\n// PoolExcludeResp returns resultant state of Exclude operation.\nmessage PoolExcludeResp {\n\tint32 status = 1; // DAOS error code\n}\n\n// PoolDrainReq supplies pool identifier, rank, and target_idxs.\nmessage PoolDrainReq {\n\tstring sys = 1; // DAOS system identifier\n\tstring id = 2; // uuid or label of pool to drain some targets\n\tuint32 rank = 3; // rank to move to the down state\n\trepeated uint32 targetidx = 4; // rank targets\n\trepeated uint32 svc_ranks = 5; // List of pool service ranks\n}\n\n// PoolDrainResp returns resultant state of Drain operation.\nmessage PoolDrainResp {\n\tint32 status = 1; // DAOS error code\n}\n\n// PoolExtendReq supplies pool identifier and rank list.\nmessage PoolExtendReq {\n\tstring sys = 1; // DAOS system identifier\n\tstring id = 2; // uuid or label of pool to add target up to\n\trepeated uint32 ranks = 3; // ranks\n\trepeated uint32 svc_ranks = 4; // List of pool service ranks\n\trepeated uint64 tierbytes = 5; // Size in bytes of storage tiers\n\trepeated uint32 faultDomains = 6; // fault domain tree, minimal format\n}\n\n// PoolExtendResp returns resultant state of Extend operation.\nmessage PoolExtendResp {\n\tint32 status = 1; // DAOS error code\n\trepeated uint64 tier_bytes = 2; // storage tiers allocated to pool\n}\n\n// PoolReintegrateReq supplies pool identifier, rank, and target_idxs.\nmessage PoolReintegrateReq {\n\tstring sys = 1; // DAOS system identifier\n\tstring id = 2; // uuid or label of pool to add target up to\n\tuint32 rank = 3; // target to move to the up state\n\trepeated uint32 targetidx = 4; // target ranks\n\trepeated uint32 svc_ranks = 5; // List of pool service ranks\n\trepeated uint64 tierbytes = 6; // Size in bytes of storage tiers\n}\n\n// PoolReintegrateResp returns resultant state of Reintegrate operation.\nmessage PoolReintegrateResp {\n\tint32 status = 1; // DAOS error code\n}\n\n// ListPoolsReq represents a request to list pools on a given DAOS system.\nmessage ListPoolsReq {\n\tstring sys = 1; // DAOS system identifier\n}\n\n// ListPoolsResp returns the list of pools in the system.\nmessage ListPoolsResp {\n\tmessage Pool {\n\t\tstring uuid = 1; // uuid of pool\n\t\tstring label = 2; // pool label\n\t\trepeated uint32 svc_reps = 3; // pool service replica ranks\n\t\tstring state = 4; // pool state\n\t\tstring rebuild_state = 5; // pool rebuild state\n\t}\n\tint32 status = 1; // DAOS error code\n\trepeated Pool pools = 2; // pools list\n\tuint64 data_version = 3; // Version of the system database.\n}\n\n// ListContainers\n// Initial implementation differs from C API\n// (numContainers not provided in request - get whole list)\nmessage ListContReq {\n\tstring sys = 1; // DAOS system identifier\n\tstring id = 2; // uuid or label of pool\n\trepeated uint32 svc_ranks = 3; // List of pool service ranks\n}\n\nmessage ListContResp {\n\tmessage Cont {\n\t\tstring uuid = 1; // uuid of container\n\t}\n\tint32 status = 1; // DAOS error code\n\trepeated Cont containers = 2; // containers\n}\n\n// PoolQueryReq represents a pool query request.\nmessage PoolQueryReq {\n\tstring sys = 1; // DAOS system identifier\n\tstring id = 2;\n\trepeated uint32 svc_ranks = 3; // List of pool service ranks\n\tbool include_enabled_ranks = 4; // True if the list of enabled ranks shall be returned\n\tbool include_disabled_ranks = 5; // True if the list of disabled ranks shall be returned\n}\n\nenum StorageMediaType {\n\tSCM = 0;\n\tNVME = 1;\n}\n\n// StorageUsageStats represents usage statistics for a storage subsystem.\nmessage StorageUsageStats {\n\tuint64 total = 1;\n\tuint64 free = 2;\n\tuint64 min = 3;\n\tuint64 max = 4;\n\tuint64 mean = 5;\n\tStorageMediaType media_type = 6;\n}\n\n// PoolRebuildStatus represents a pool's rebuild status.\nmessage PoolRebuildStatus {\n\tint32 status = 1; // DAOS error code\n\tenum State {\n\t\tIDLE = 0;\n\t\tDONE = 1;\n\t\tBUSY = 2;\n\t}\n\tState state = 2;\n\tuint64 objects = 3;\n\tuint64 records = 4;\n}\n\nenum PoolServiceState {\n\tCreating = 0;   // pool service is being created\n\tReady = 1;      // pool service is ready to be used\n\tDestroying = 2; // pool service is being destroyed\n\tDegraded = 3 ;  // pool service is degraded\n\tUnknown = 4 ;   // pool service is Unknown state\n}\n\n// PoolQueryResp represents a pool query response.\nmessage PoolQueryResp {\n\treserved 9;\n\treserved \"total_nodes\";\n\tint32 status = 1; // DAOS error code\n\tstring uuid = 2; // pool uuid\n\tstring label = 3; // pool label\n\tuint32 total_targets = 4; // total targets in pool\n\tuint32 active_targets = 5; // active targets in pool\n\tuint32 disabled_targets = 6; // number of disabled targets in pool\n\tPoolRebuildStatus rebuild = 7; // pool rebuild status\n\trepeated StorageUsageStats tier_stats = 8; // storage tiers usage stats\n\tuint32 version = 10; // latest pool map version\n\tuint32 leader = 11; // current raft leader\n\tstring enabled_ranks = 12; // optional set of ranks enabled\n\tstring disabled_ranks = 13; // optional set of ranks disabled\n\tuint32 total_engines = 14; // total engines in pool\n\tuint32 pool_layout_ver = 15; // current pool global version\n\tuint32 upgrade_layout_ver = 16; // latest pool global version to upgrade\n\tPoolServiceState state = 17; // pool state\n}\n\nmessage PoolProperty {\n\tuint32 number = 1; // pool property number\n\toneof value {\n\t\tstring strval = 2; // pool property string value\n\t\tuint64 numval = 3; // pool property numeric value\n\t}\n}\n\n// PoolSetPropReq represents a request to set pool properties.\nmessage PoolSetPropReq {\n\tstring sys = 1; // DAOS system identifier\n\tstring id = 2; // uuid or label of pool to modify\n\trepeated PoolProperty properties = 3;\n\trepeated uint32 svc_ranks = 4; // List of pool service ranks\n}\n\n// PoolSetPropResp represents the result of setting pool properties.\nmessage PoolSetPropResp {\n\tint32 status = 1; // DAOS error code\n}\n\n// PoolGetPropReq represents a request to get pool properties.\nmessage PoolGetPropReq {\n\tstring sys = 1; // DAOS system identifier\n\tstring id = 2; // uuid or label of pool to query\n\trepeated PoolProperty properties = 3;\n\trepeated uint32 svc_ranks = 4; // List of pool service ranks\n}\n\n// PoolGetPropResp represents the result of getting pool properties.\nmessage PoolGetPropResp {\n\tint32 status = 1; // DAOS error code\n\trepeated PoolProperty properties = 2;\n}\n\n// PoolUpgradeReq upgrades the disk format of an existing pool to the\n// latest version.\nmessage PoolUpgradeReq {\n\tstring sys = 1; // DAOS system identifier\n\tstring id = 2;\n\trepeated uint32 svc_ranks = 3; // List of pool service ranks\n}\n\n// PoolUpgradeResp returns resultant state of upgrade operation.\nmessage PoolUpgradeResp {\n\tint32 status = 1; // DAOS error code\n}\n\n// PoolQueryTargetReq represents a pool query target(s) request.\nmessage PoolQueryTargetReq {\n\tstring sys = 1; // DAOS system identifier\n\tstring id = 2;\t// Pool label or UUID\n\tuint32 rank = 3; // Engine rank with targets to query\n\trepeated uint32 targets = 4; // indices of targets to be queried\n\trepeated uint32 svc_ranks = 5; // List of pool service ranks\n}\n\n// StorageTargetUsage represent's a target's capacity and usage\nmessage StorageTargetUsage {\n\tuint64 total = 1; // total space in bytes\n\tuint64 free = 2; // free space in bytes\n\tStorageMediaType  media_type = 3; // see daos_media_type_t (e.g., SCM, NVME)\n}\n\n// PoolQueryTargetInfo represents pool target query info for a single target.\n// The RPC response type (PoolQueryTargetResponse) contains a sequence of these.\nmessage PoolQueryTargetInfo {\n\tenum TargetType { // See enum daos_target_type_t\n\t\tUNKNOWN = 0;\n\t\tHDD = 1; // Rotating disk\n\t\tSSD = 2; // Flash-based\n\t\tPM = 3; // Persistent memory\n\t\tVM = 4; // Volatile memory\n\t}\n\tTargetType type = 1; // Target type jsee enum daos_target_type_t\n\n\tenum TargetState { // See enum daos_target_state_t\n\t\tSTATE_UNKNOWN = 0;\n\t\tDOWN_OUT = 1; // Not available\n\t\tDOWN = 2; // Not available, may need rebuild\n\t\tUP = 3; // Up\n\t\tUP_IN = 4; // Up and running\n\t\tNEW = 5; // Intermediate state for pool map change\n\t\tDRAIN = 6; // Being drained\n\t}\n\tTargetState state = 2; // target state see enum daos_target_state_t\n\t// TODO: target performance data\n\trepeated StorageTargetUsage space = 3; // this target's usage per storage tier\n}\n\n// PoolQueryTargetResp represents a pool target query response\nmessage PoolQueryTargetResp {\n\tint32 status = 1; // DAOS error code\n\trepeated PoolQueryTargetInfo infos = 2; // Per-target information\n}\n"
    },
    {
      "path": "src/proto/mgmt/svc.proto",
      "content": "//\n// (C) Copyright 2018-2023 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\nsyntax = \"proto3\";\npackage mgmt;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/mgmt\";\n\n// Management Service Protobuf Definitions related to interactions between\n// DAOS control server and DAOS IO Engines.\n\n// Generic response just containing DER from I/O Engine.\nmessage DaosResp {\n\tint32 status = 1;\t// DAOS error code.\n}\n\nmessage GroupUpdateReq {\n\tmessage Engine {\n\t\tuint32 rank = 1;\n\t\tstring uri = 2; // primary URI is the only one group update is concerned with\n\t\tuint64 incarnation = 3;\n\t}\n\tuint32 map_version = 1;\n\trepeated Engine engines = 2;\n}\n\nmessage GroupUpdateResp {\n\tint32 status = 1;\n}\n\nmessage JoinReq {\n\tstring sys = 1;\t\t\t// DAOS system name.\n\tstring uuid = 2;\t\t// Server UUID.\n\tuint32 rank = 3;\t\t// Server rank desired, if not MAX_UINT32.\n\tstring uri = 4;\t\t\t// Server CaRT primary provider URI (i.e., for context 0).\n\tuint32 nctxs = 5;\t\t// Server CaRT context count.\n\tstring addr = 6;\t\t// Server management address.\n\tstring srvFaultDomain = 7; \t// Fault domain for this instance's server\n\tuint32 idx = 8;\t\t\t// Instance index on server node.\n\tuint64 incarnation = 9; \t// rank incarnation\n\trepeated string secondary_uris = 10; // URIs for any secondary providers\n\trepeated uint32 secondary_nctxs = 11; // CaRT context count for each secondary provider\n}\n\nmessage JoinResp {\n\tint32 status = 1;\t// DAOS error code\n\tuint32 rank = 2;\t// Server rank assigned.\n\tenum State {\n\t\tIN = 0;\t\t// Server in the system.\n\t\tOUT = 1;\t// Server excluded from the system.\n\t}\n\tState state = 3;\t// Server state in the system map.\n\tstring faultDomain = 4; // Fault domain for the instance\n\tbool localJoin = 5;\t// Join processed locally.\n\tuint32 map_version = 6; // Join processed in this version of the system map.\n}\n\nmessage LeaderQueryReq {\n\tstring sys = 1;\t\t// System name.\n\tstring hosts = 2;\t// hostset to query\n}\n\nmessage LeaderQueryResp {\n\tstring current_leader = 1;\n\trepeated string replicas = 2;\n\trepeated string DownReplicas = 3;\n}\n\nmessage GetAttachInfoReq {\n\tstring sys = 1;\t\t// System name. For daos_agent only.\n\tbool all_ranks = 2;\t// Return Rank URIs for all ranks.\n\tstring interface = 3;\t// Preferred fabric interface.\n\tstring domain = 4;\t// Preferred fabric domain.\n}\n\nmessage ClientNetHint {\n\tstring provider = 1;\t\t// CaRT provider\n\tstring interface = 2;\t\t// CaRT D_INTERFACE\n\tstring domain = 3;\t\t// CaRT D_DOMAIN for given D_INTERFACE\n\tuint32 crt_ctx_share_addr = 4;\t// CaRT CRT_CTX_SHARE_ADDR\n\tuint32 crt_timeout = 5;\t\t// CaRT CRT_TIMEOUT\n\tuint32 net_dev_class = 6;\t// ARP protocol hardware identifier of the\n\t\t\t\t\t// I/O Engine network interface\n\tint32 srv_srx_set = 7;\t\t// Server SRX setting (-1, 0, 1; -1 == unset)\n\trepeated string env_vars = 8;\t// Client-side environment variables to set\n\tuint32 provider_idx = 9;\t// Provider index - anything > 0 is a secondary provider\n}\n\nmessage GetAttachInfoResp {\n\tint32 status = 1;\t\t// DAOS error code\n\tmessage RankUri {\n\t\tuint32 rank = 1;\n\t\tstring uri = 2;\n\t\tuint32 provider_idx = 3;\n\t\tuint32 num_ctxs = 4;\n\t}\n\trepeated RankUri rank_uris = 2;\t// Rank URIs for the primary provider\n\t\t\t\t\t// These CaRT settings are shared with the\n\t\t\t\t\t// libdaos client to aid in CaRT initialization.\n\trepeated uint32 ms_ranks = 3;\t// Ranks local to MS replicas\n\tClientNetHint client_net_hint = 4; // Primary provider hint\n\tuint64 data_version = 5; // Version of the system database.\n\tstring sys = 6;\t\t\t// Name of the DAOS system\n\trepeated RankUri secondary_rank_uris = 7; // Rank URIs for additional providers\n\trepeated ClientNetHint secondary_client_net_hints = 8; // Hints for additional providers\n}\n\nmessage PrepShutdownReq {\n\tuint32 rank = 1;\t// DAOS I/O Engine unique identifier.\n}\n\n// PrepShutdownResp is identical to DaosResp.\n\nmessage PingRankReq {\n\tuint32 rank = 1;\t// DAOS I/O Engine unique identifier.\n}\n\n// PingRankResp is identical to DaosResp.\n\nmessage SetRankReq {\n\tuint32 rank = 1;\t// DAOS I/O Engine unique identifier.\n\tuint32 map_version = 2;\t// System map version in which the rank joined the system.\n}\n\n// SetRankResp is identical to DaosResp.\n\nmessage PoolMonitorReq {\n\tstring sys = 1; // DAOS system identifier\n\tstring poolUUID = 2;\t// Pool UUID associated with the Pool Handle\n\tstring poolHandleUUID = 3; // Pool Handle UUID for the connection\n\tstring jobid = 4;\t// Job ID to associate instance with.\n}\n"
    },
    {
      "path": "src/proto/mgmt/system.proto",
      "content": "//\n// (C) Copyright 2019-2022 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\nsyntax = \"proto3\";\npackage mgmt;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/mgmt\";\n\nimport \"shared/ranks.proto\";\n\n// Management Service Protobuf Definitions related to interactions between\n// DAOS control server and DAOS system.\n\n// SystemMember refers to a data-plane instance that is a member of DAOS\n// system running on host with the control-plane listening at \"Addr\".\nmessage SystemMember {\n\tstring addr = 1;\n\tstring uuid = 2;\n\tuint32 rank = 3;\n\tuint64 incarnation = 4;\n\tstring state = 5;\n\tstring fabric_uri = 6;\n\tuint32 fabric_contexts = 7;\n\t// ancillary info e.g. error msg or reason for state change\n\tstring info = 8;\n\tstring fault_domain = 9;\n\tstring last_update = 10;\n\trepeated string secondary_fabric_uris = 11;\n}\n\n// SystemStopReq supplies system shutdown parameters.\nmessage SystemStopReq {\n\tstring sys = 1; // DAOS system name\n\tbool prep = 2; // indicates that the prep stage should be performed\n\tbool kill = 3; // indicates that the kill stage should be performed\n\tbool force = 4;\n\tstring ranks = 5; // rankset to query\n\tstring hosts = 6; // hostset to query\n}\n\n// SystemStopResp returns status of shutdown attempt and results\n// of attempts to stop system members.\nmessage SystemStopResp {\n\trepeated shared.RankResult results = 1;\n\tstring absentranks = 2; // rankset missing from membership\n\tstring absenthosts = 3; // hostset missing from membership\n}\n\n// SystemStartReq supplies system restart parameters.\nmessage SystemStartReq {\n\tstring sys = 1; // DAOS system name\n\tstring ranks = 2; // rankset to query\n\tstring hosts = 3; // hostset to query\n}\n\n// SystemStartResp returns status of restart attempt and results\n// of attempts to start system members.\nmessage SystemStartResp {\n\trepeated shared.RankResult results = 1;\n\tstring absentranks = 2; // rankset missing from membership\n\tstring absenthosts = 3; // hostset missing from membership\n}\n\n// SystemExcludeReq supplies system exclude parameters.\nmessage SystemExcludeReq {\n\tstring sys = 1; // DAOS system name\n\tstring ranks = 2; // rankset to exclude\n\tstring hosts = 3; // hostset to exclude\n\tbool clear = 4; // Clear excluded state\n}\n\n// SystemExcludeResp returns status of exclude request.\nmessage SystemExcludeResp {\n\trepeated shared.RankResult results = 1;\n}\n\n// SystemQueryReq supplies system query parameters.\nmessage SystemQueryReq {\n\tstring sys = 1; // DAOS system name\n\tstring ranks = 2; // rankset to query\n\tstring hosts = 3; // hostset to query\n\tuint32 state_mask = 4; // bitmask defining desired member states\n}\n\n// SystemQueryResp returns active system members.\nmessage SystemQueryResp {\n\trepeated SystemMember members = 1;\n\tstring absentranks = 2; // rankset missing from membership\n\tstring absenthosts = 3; // hostset missing from membership\n\tuint64 data_version = 4; // Version of the system database.\n\trepeated string providers = 5; // Providers supported by system in configured order\n}\n\n// SystemEraseReq supplies system erase parameters.\nmessage SystemEraseReq {\n\tstring sys = 1;\n}\n\nmessage SystemEraseResp {\n\trepeated shared.RankResult results = 1;\n}\n\n// SystemCleanupReq supplies the machinename.\nmessage SystemCleanupReq {\n\tstring sys = 1; // DAOS system identifier\n\tstring machine = 2; // Name of the machine to cleanup resources for.\n}\n\n// SystemCleanupResp returns resultant state of cleanup operation.\nmessage SystemCleanupResp {\n\tmessage CleanupResult {\n\t\tint32 status = 1; // Status of the evict on the specific pool\n\t\tstring msg = 2; // Error message if status indicates an error\n\t\tstring pool_id = 3; // uuid of pool\n\t\tuint32 count = 4; // number of pool handles cleaned up\n\n\t}\n\trepeated CleanupResult results = 1; // Results and Status for individual pools that are cleanedup.\n}\n\n// SystemSetAttrReq contains a request to set one or more system properties.\nmessage SystemSetAttrReq {\n\tstring sys = 1;\n\tmap<string, string> attributes = 2;\n}\n\n// SystemGetAttrReq contains a request to get one or more attributes by key. If\n// no keys are supplied, all attributes are returned in the response.\nmessage SystemGetAttrReq {\n\tstring sys = 1;\n\trepeated string keys = 2;\n}\n\n// SystemGetAttrResp contains a list of attribute key/value pairs.\nmessage SystemGetAttrResp {\n\tmap<string, string> attributes = 1;\n}\n\n// SystemSetPropReq contains a request to set one or more system properties.\nmessage SystemSetPropReq {\n\tstring sys = 1;\n\tmap<string, string> properties = 2;\n}\n\n// SystemGetPropReq contains a request to get one or more properties by key. If\n// no keys are supplied, all properties are returned in the response.\nmessage SystemGetPropReq {\n\tstring sys = 1;\n\trepeated string keys = 2;\n}\n\n// SystemGetPropResp contains a list of property key/value pairs.\nmessage SystemGetPropResp {\n\tmap<string, string> properties = 1;\n}\n\n"
    },
    {
      "path": "src/proto/security/auth.proto",
      "content": "//\n// (C) Copyright 2018-2021 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\nsyntax = \"proto3\";\npackage auth;\n\noption go_package = \"github.com/daos-stack/daos/src/control/security/auth;auth\";\n\n// Types of authentication token\nenum Flavor {\n\tAUTH_NONE = 0;\n\tAUTH_SYS = 1;\n}\n\nmessage Token {\n\tFlavor flavor = 1; // flavor of this authentication token\n\tbytes data = 2; // packed structure of the specified flavor\n}\n\n// Token structure for AUTH_SYS flavor cred\nmessage Sys {\n\tuint64 stamp = 1; // timestamp\n\tstring machinename = 2; // machine name\n\tstring user = 3; // user name\n\tstring group = 4; // primary group name\n\trepeated string groups = 5; // secondary group names\n\tstring secctx = 6; // Additional field for MAC label\n}\n\n// Token and verifier are expected to have the same flavor type.\nmessage Credential {\n\tToken token = 1; // authentication token\n\tToken verifier = 2; // to verify integrity of the token\n\tstring origin = 3; // the agent that created this credential\n}\n\n// GetCredResp represents the result of a request to fetch authentication\n// credentials.\nmessage GetCredResp {\n\tint32 status = 1; // Status of the request\n\tCredential cred = 2; // Caller's authentication credential\n}\n\n// ValidateCredReq represents a request to verify a set of authentication\n// credentials.\nmessage ValidateCredReq {\n\tCredential cred = 1; // Credential to be validated\n}\n\n// ValidateCredResp represents the result of a request to validate\n// authentication credentials.\nmessage ValidateCredResp {\n\tint32 status = 1; // Status of the request\n\tToken token = 2; // Validated authentication token from the credential\n}\n"
    },
    {
      "path": "src/proto/shared/event.proto",
      "content": "//\n// (C) Copyright 2020-2021 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\n// This file defines RAS event related protobuf messages communicated over dRPC\n// and gRPC.\n\nsyntax = \"proto3\";\npackage shared;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/shared\";\n\n// RASEvent describes a RAS event in the DAOS system.\nmessage RASEvent {\n\tuint32 id = 1;\t\t// Unique event identifier, 64-char.\n\tstring msg = 2;\t\t// Human readable message describing event.\n\tstring timestamp = 3;\t// Fully qualified timestamp (us) incl timezone.\n\tuint32 type = 4;\t// Event type.\n\tuint32 severity = 5;\t// Event severity.\n\tstring hostname = 6;\t// (optional) Hostname of node involved in event.\n\tuint32 rank = 7;\t// (optional) DAOS rank involved in event.\n\tuint64 incarnation = 8; // (optional) Incarnation of DAOS rank involved in event.\n\tstring hw_id = 9;\t// (optional) Hardware component involved in event.\n\tuint64 proc_id = 10;\t// (optional) Process involved in event.\n\tuint64 thread_id = 11;\t// (optional) Thread involved in event.\n\tstring job_id = 12;\t// (optional) Job involved in event.\n\tstring pool_uuid = 13;\t// (optional) Pool UUID involved in event.\n\tstring cont_uuid = 14;\t// (optional) Container UUID involved in event.\n\tstring obj_id = 15;\t// (optional) Object involved in event.\n\tstring ctl_op = 16;\t// (optional) Recommended automatic action.\n\t// EngineStateEventInfo defines extended fields for state change events.\n\tmessage EngineStateEventInfo {\n\t\tuint32 instance = 1;\t// Control-plane harness instance index.\n\t\tbool errored = 2;\t// Rank in error state.\n\t\tstring error = 3;\t// Message associated with error.\n\t}\n\t// PoolSvcEventInfo defines extended fields for pool service change events.\n\tmessage PoolSvcEventInfo {\n\t\trepeated uint32 svc_reps = 1;\t// Pool service replica ranks.\n\t\tuint64 version = 2;\t\t// Raft leadership term.\n\t}\n\toneof extended_info {\t// Data specific to a given event ID.\n\t\tstring str_info = 17;\t// Opaque data blob.\n\t\tEngineStateEventInfo engine_state_info = 18;\n\t\tPoolSvcEventInfo pool_svc_info = 19;\n\t}\n}\n\n// ClusterEventReq communicates occurrence of a RAS event in the DAOS system.\nmessage ClusterEventReq {\n\tuint64 sequence = 1;\t// Sequence identifier for RAS events.\n\tRASEvent event = 2;\t// RAS event.\n}\n\n// ClusterEventResp acknowledges receipt of an event notification.\nmessage ClusterEventResp {\n\tuint64 sequence = 1;\t// Sequence identifier for RAS events.\n\tint32 status = 2;\t// DAOS error code.\n}\n"
    },
    {
      "path": "src/proto/shared/ranks.proto",
      "content": "//\n// (C) Copyright 2020-2021 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\nsyntax = \"proto3\";\npackage shared;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/shared\";\n\nmessage RankResult {\n\tuint32 rank = 1;\n\tstring action = 2;\n\tbool errored = 3;\n\tstring msg = 4;\n\tstring state = 5;\n\tstring addr = 6;\n}\n"
    },
    {
      "path": "src/proto/srv/srv.proto",
      "content": "//\n// (C) Copyright 2019-2022 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\n// This file defines the messages used by DRPC_MODULE_SRV.\n\nsyntax = \"proto3\";\npackage srv;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/srv\";\n\nmessage NotifyReadyReq {\n\tstring uri = 1; // Primary CaRT URI\n\tuint32 nctxs = 2; // Number of primary CaRT contexts\n\tstring drpcListenerSock = 3; // Path to I/O Engine's dRPC listener socket\n\tuint32 instanceIdx = 4; // I/O Engine instance index\n\tuint32 ntgts = 5; // number of VOS targets allocated in I/O Engine\n\tuint64 incarnation = 6; // HLC incarnation number\n\trepeated string secondaryUris = 7; // secondary CaRT URIs\n\trepeated uint32 secondaryNctxs = 8; // number of CaRT contexts for each secondary provider\n}\n\n// NotifyReadyResp is nil.\n\nmessage GetPoolSvcReq {\n\tstring uuid = 1; // Pool UUID\n}\n\nmessage GetPoolSvcResp {\n\tint32 status = 1; // DAOS error code\n\trepeated uint32 svcreps = 2; // Pool service replica ranks\n}\n\nmessage PoolFindByLabelReq {\n\tstring label = 1; // Pool label\n}\n\nmessage PoolFindByLabelResp {\n\tint32 status = 1; // DAOS error code\n\tstring uuid = 2; // Pool UUID\n\trepeated uint32 svcreps = 3; // Pool service replica ranks\n}\n"
    },
    {
      "path": "src/proto/test/drpc_test.proto",
      "content": "//\n// (C) Copyright 2018-2022 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\nsyntax = \"proto3\";\npackage hello;\n\noption go_package = \"github.com/daos-stack/daos/src/control/cmd/drpc_test/hello\";\n\nenum Module\n{\n\tHELLO = 0;\n}\n\nenum Function\n{\n\tGREETING = 0;\n}\n\nmessage Hello {\n\tstring name = 1;\n}\n\nmessage HelloResponse {\n\tstring greeting = 1;\n}\n"
    }
  ]
}

### Proto file changes###
--- /app/dataset/modified_proto_reps/daos/pullrequest/DAOS-14214_control-_Fix_potential_missed_call_to_drpc_failure_handlers/premerge_12944/src/proto/ctl/smd.proto
+++ /app/dataset/modified_proto_reps/daos/pullrequest/DAOS-14214_control-_Fix_potential_missed_call_to_drpc_failure_handlers/merge_12944/src/proto/ctl/smd.proto
@@ -76,7 +76,7 @@
 }
 
 enum NvmeDevState {
-	UNKNOWN   = 0; // Device state is unknown, zer6o value
+	UNKNOWN   = 0; // Device state is unknown, zero value
 	NORMAL    = 1; // Device is in a normal operational state
 	NEW       = 2; // Device is new and is not yet in-use
 	EVICTED   = 3; // Device is faulty and has been evicted


### Changed files ###
{
  "changed_files": [
    {
      "path": "src/bio/smd.pb-c.c",
      "content": Omitted as it is not in context
    },
    {
      "path": "src/control/common/proto/ctl/smd.pb.go",
      "content": Omitted as it is not in context
    },
    {
      "path": "src/control/server/ctl_smd_rpc.go",
      "content": "//\n// (C) Copyright 2020-2023 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\npackage server\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"sort\"\n\t\"strings\"\n\t\"time\"\n\n\tuuid \"github.com/google/uuid\"\n\t\"github.com/pkg/errors\"\n\t\"google.golang.org/protobuf/proto\"\n\n\t\"github.com/daos-stack/daos/src/control/common\"\n\t\"github.com/daos-stack/daos/src/control/common/proto/convert\"\n\tctlpb \"github.com/daos-stack/daos/src/control/common/proto/ctl\"\n\t\"github.com/daos-stack/daos/src/control/drpc\"\n\t\"github.com/daos-stack/daos/src/control/lib/daos\"\n\t\"github.com/daos-stack/daos/src/control/lib/hardware\"\n\t\"github.com/daos-stack/daos/src/control/lib/ranklist\"\n\t\"github.com/daos-stack/daos/src/control/logging\"\n)\n\n// Set as variables so can be overwritten during unit testing.\nvar (\n\tbaseDevReplaceBackoff      = 250 * time.Millisecond\n\tmaxDevReplaceBackoffFactor = 7 // 8s\n\tmaxDevReplaceRetries       = 20\n)\n\nfunc queryRank(reqRank uint32, engineRank ranklist.Rank) bool {\n\trr := ranklist.Rank(reqRank)\n\tif rr.Equals(ranklist.NilRank) {\n\t\treturn true\n\t}\n\treturn rr.Equals(engineRank)\n}\n\nfunc (svc *ControlService) querySmdDevices(ctx context.Context, req *ctlpb.SmdQueryReq, resp *ctlpb.SmdQueryResp) error {\n\tfor _, ei := range svc.harness.Instances() {\n\t\tif !ei.IsReady() {\n\t\t\tsvc.log.Debugf(\"skipping not-ready instance %d\", ei.Index())\n\t\t\tcontinue\n\t\t}\n\n\t\tengineRank, err := ei.GetRank()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif !queryRank(req.GetRank(), engineRank) {\n\t\t\tcontinue\n\t\t}\n\n\t\trResp := new(ctlpb.SmdQueryResp_RankResp)\n\t\trResp.Rank = engineRank.Uint32()\n\n\t\tlistDevsResp, err := ei.ListSmdDevices(ctx, new(ctlpb.SmdDevReq))\n\t\tif err != nil {\n\t\t\treturn errors.Wrapf(err, \"rank %d\", engineRank)\n\t\t}\n\n\t\tif len(listDevsResp.Devices) == 0 {\n\t\t\trResp.Devices = nil\n\t\t\tresp.Ranks = append(resp.Ranks, rResp)\n\t\t\tcontinue\n\t\t}\n\n\t\t// For each SmdDevice returned in list devs response, append a SmdDeviceWithHealth.\n\t\tfor _, sd := range listDevsResp.Devices {\n\t\t\trResp.Devices = append(rResp.Devices, &ctlpb.SmdQueryResp_SmdDeviceWithHealth{\n\t\t\t\tDetails: sd,\n\t\t\t})\n\t\t}\n\t\tresp.Ranks = append(resp.Ranks, rResp)\n\n\t\tif req.Uuid != \"\" {\n\t\t\tfound := false\n\t\t\tfor _, dev := range rResp.Devices {\n\t\t\t\tif dev.Details.Uuid == req.Uuid {\n\t\t\t\t\trResp.Devices = []*ctlpb.SmdQueryResp_SmdDeviceWithHealth{dev}\n\t\t\t\t\tfound = true\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tif !found {\n\t\t\t\trResp.Devices = nil\n\t\t\t}\n\t\t}\n\n\t\tfor _, dev := range rResp.Devices {\n\t\t\tstate := dev.Details.DevState\n\n\t\t\t// skip health query if the device is not in a normal or faulty state\n\t\t\tif req.IncludeBioHealth {\n\t\t\t\tif state != ctlpb.NvmeDevState_NEW {\n\t\t\t\t\thealth, err := ei.GetBioHealth(ctx, &ctlpb.BioHealthReq{\n\t\t\t\t\t\tDevUuid: dev.Details.Uuid,\n\t\t\t\t\t})\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\treturn errors.Wrapf(err, \"device %q, state %q\",\n\t\t\t\t\t\t\tdev, state)\n\t\t\t\t\t}\n\t\t\t\t\tdev.Health = health\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tsvc.log.Debugf(\"skip fetching health stats on device %q in NEW state\",\n\t\t\t\t\tdev, state)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn nil\n}\n\nfunc (svc *ControlService) querySmdPools(ctx context.Context, req *ctlpb.SmdQueryReq, resp *ctlpb.SmdQueryResp) error {\n\tfor _, ei := range svc.harness.Instances() {\n\t\tif !ei.IsReady() {\n\t\t\tsvc.log.Debugf(\"skipping not-ready instance\")\n\t\t\tcontinue\n\t\t}\n\n\t\tengineRank, err := ei.GetRank()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif !queryRank(req.GetRank(), engineRank) {\n\t\t\tcontinue\n\t\t}\n\n\t\trResp := new(ctlpb.SmdQueryResp_RankResp)\n\t\trResp.Rank = engineRank.Uint32()\n\n\t\tdresp, err := ei.CallDrpc(ctx, drpc.MethodSmdPools, new(ctlpb.SmdPoolReq))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\trankDevResp := new(ctlpb.SmdPoolResp)\n\t\tif err = proto.Unmarshal(dresp.Body, rankDevResp); err != nil {\n\t\t\treturn errors.Wrap(err, \"unmarshal SmdListPools response\")\n\t\t}\n\n\t\tif rankDevResp.Status != 0 {\n\t\t\treturn errors.Wrapf(daos.Status(rankDevResp.Status),\n\t\t\t\t\"rank %d ListPools failed\", engineRank)\n\t\t}\n\n\t\tif err := convert.Types(rankDevResp.Pools, &rResp.Pools); err != nil {\n\t\t\treturn errors.Wrap(err, \"failed to convert pool list\")\n\t\t}\n\t\tresp.Ranks = append(resp.Ranks, rResp)\n\n\t\tif req.Uuid != \"\" {\n\t\t\tfound := false\n\t\t\tfor _, pool := range rResp.Pools {\n\t\t\t\tif pool.Uuid == req.Uuid {\n\t\t\t\t\trResp.Pools = []*ctlpb.SmdQueryResp_Pool{pool}\n\t\t\t\t\tfound = true\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tif !found {\n\t\t\t\trResp.Pools = nil\n\t\t\t}\n\t\t}\n\t}\n\n\treturn nil\n}\n\n// SmdQuery implements the method defined for the Management Service.\n//\n// Query SMD info for pools or devices.\nfunc (svc *ControlService) SmdQuery(ctx context.Context, req *ctlpb.SmdQueryReq) (*ctlpb.SmdQueryResp, error) {\n\tif !svc.harness.isStarted() {\n\t\treturn nil, FaultHarnessNotStarted\n\t}\n\tif len(svc.harness.readyRanks()) == 0 {\n\t\treturn nil, FaultDataPlaneNotStarted\n\t}\n\n\tif req.Uuid != \"\" && (!req.OmitDevices && !req.OmitPools) {\n\t\treturn nil, errors.New(\"UUID is ambiguous when querying both pools and devices\")\n\t}\n\n\tresp := new(ctlpb.SmdQueryResp)\n\tif !req.OmitDevices {\n\t\tif err := svc.querySmdDevices(ctx, req, resp); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\tif !req.OmitPools {\n\t\tif err := svc.querySmdPools(ctx, req, resp); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\treturn resp, nil\n}\n\ntype idMap map[string]bool\n\nfunc (im idMap) Keys() (keys []string) {\n\tfor k := range im {\n\t\tkeys = append(keys, k)\n\t}\n\treturn\n}\n\n// Split IDs in comma separated string and assign each token to relevant return list.\nfunc extractReqIDs(log logging.Logger, ids string, addrs idMap, uuids idMap) error {\n\ttokens := strings.Split(ids, \",\")\n\n\tfor _, token := range tokens {\n\t\tif addr, e := hardware.NewPCIAddress(token); e == nil && addr.IsVMDBackingAddress() {\n\t\t\taddrs[addr.String()] = true\n\t\t\tcontinue\n\t\t}\n\n\t\tif uuid, e := uuid.Parse(token); e == nil {\n\t\t\tuuids[uuid.String()] = true\n\t\t\tcontinue\n\t\t}\n\n\t\treturn errors.Errorf(\"req id entry %q is neither a valid vmd backing device pci \"+\n\t\t\t\"address or uuid\", token)\n\t}\n\n\treturn nil\n}\n\n// Union type containing either traddr or uuid.\ntype devID struct {\n\ttrAddr string\n\tuuid   string\n}\n\nfunc (id *devID) String() string {\n\tif id.trAddr != \"\" {\n\t\treturn id.trAddr\n\t}\n\treturn id.uuid\n}\n\ntype devIDMap map[string]devID\n\nfunc (dim devIDMap) getFirst() *devID {\n\tif len(dim) == 0 {\n\t\treturn nil\n\t}\n\n\tvar keys []string\n\tfor key := range dim {\n\t\tkeys = append(keys, key)\n\t}\n\tsort.Strings(keys)\n\n\td := dim[keys[0]]\n\treturn &d\n}\n\ntype engineDevMap map[Engine]devIDMap\n\nfunc (edm engineDevMap) add(e Engine, id devID) {\n\tif _, exists := edm[e]; !exists {\n\t\tedm[e] = make(devIDMap)\n\t}\n\tif _, exists := edm[e][id.String()]; !exists {\n\t\tedm[e][id.String()] = id\n\t}\n}\n\n// Map requested device IDs provided in comma-separated string to the engine that controls the given\n// device. Device can be identified either by UUID or transport (PCI) address.\nfunc (svc *ControlService) mapIDsToEngine(ctx context.Context, ids string, useTrAddr bool) (engineDevMap, error) {\n\ttrAddrs := make(idMap)\n\tdevUUIDs := make(idMap)\n\tmatchAll := false\n\n\tif ids == \"\" {\n\t\t// Selecting all is not supported unless using transport addresses.\n\t\tif !useTrAddr {\n\t\t\treturn nil, errors.New(\"empty id string\")\n\t\t}\n\t\tmatchAll = true\n\t} else {\n\t\t// Extract transport addresses and device UUIDs from IDs string.\n\t\tif err := extractReqIDs(svc.log, ids, trAddrs, devUUIDs); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\treq := &ctlpb.SmdQueryReq{Rank: uint32(ranklist.NilRank)}\n\tresp := new(ctlpb.SmdQueryResp)\n\tif err := svc.querySmdDevices(ctx, req, resp); err != nil {\n\t\treturn nil, err\n\t}\n\n\tedm := make(engineDevMap)\n\n\tfor _, rr := range resp.Ranks {\n\t\tengines, err := svc.harness.FilterInstancesByRankSet(fmt.Sprintf(\"%d\", rr.Rank))\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tif len(engines) == 0 {\n\t\t\treturn nil, errors.Errorf(\"failed to retrieve instance for rank %d\",\n\t\t\t\trr.Rank)\n\t\t}\n\t\tengine := engines[0]\n\t\tfor _, dev := range rr.Devices {\n\t\t\tif dev == nil {\n\t\t\t\treturn nil, errors.New(\"nil device in smd query resp\")\n\t\t\t}\n\t\t\tdds := dev.Details\n\t\t\tif dds == nil {\n\t\t\t\treturn nil, errors.New(\"device with nil details in smd query resp\")\n\t\t\t}\n\t\t\tif dds.TrAddr == \"\" {\n\t\t\t\tsvc.log.Errorf(\"No transport address associated with device %s\",\n\t\t\t\t\tdds.Uuid)\n\t\t\t}\n\n\t\t\tmatchUUID := dds.Uuid != \"\" && devUUIDs[dds.Uuid]\n\n\t\t\t// Where possible specify the TrAddr over UUID as there may be multiple\n\t\t\t// UUIDs mapping to the same TrAddr.\n\t\t\tif useTrAddr && dds.TrAddr != \"\" {\n\t\t\t\tif matchAll || matchUUID || trAddrs[dds.TrAddr] {\n\t\t\t\t\t// If UUID matches, add by TrAddr rather than UUID which\n\t\t\t\t\t// should avoid duplicate UUID entries for the same TrAddr.\n\t\t\t\t\tedm.add(engine, devID{trAddr: dds.TrAddr})\n\t\t\t\t\tdelete(trAddrs, dds.TrAddr)\n\t\t\t\t\tdelete(devUUIDs, dds.Uuid)\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif matchUUID {\n\t\t\t\t// Only add UUID entry if TrAddr is not available for a device.\n\t\t\t\tedm.add(engine, devID{uuid: dds.Uuid})\n\t\t\t\tdelete(devUUIDs, dds.Uuid)\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check all input IDs have been matched.\n\tmissingKeys := append(devUUIDs.Keys(), trAddrs.Keys()...)\n\tif len(missingKeys) > 0 {\n\t\treturn nil, errors.Errorf(\"ids requested but not found: %v\", missingKeys)\n\t}\n\n\treturn edm, nil\n}\n\nfunc sendManageReq(c context.Context, e Engine, m drpc.Method, b proto.Message) (*ctlpb.SmdManageResp_Result, error) {\n\tif !e.IsReady() {\n\t\treturn &ctlpb.SmdManageResp_Result{\n\t\t\tStatus: daos.Unreachable.Int32(),\n\t\t}, nil\n\t}\n\n\tdResp, err := e.CallDrpc(c, m, b)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"call drpc\")\n\t}\n\n\tmResp := new(ctlpb.DevManageResp)\n\tif err = proto.Unmarshal(dResp.Body, mResp); err != nil {\n\t\treturn nil, errors.Wrapf(err, \"unmarshal %T response\", mResp)\n\t}\n\n\treturn &ctlpb.SmdManageResp_Result{\n\t\tStatus: mResp.Status, Device: mResp.Device,\n\t}, nil\n}\n\nfunc addManageRespIDOnFail(log logging.Logger, res *ctlpb.SmdManageResp_Result, dev *devID) {\n\tif res == nil || dev == nil || res.Status == 0 {\n\t\treturn\n\t}\n\n\tlog.Errorf(\"drpc returned status %q on dev %+v\", daos.Status(res.Status), dev)\n\tif res.Device == nil {\n\t\t// Populate id so failure can be mapped to a device.\n\t\tres.Device = &ctlpb.SmdDevice{\n\t\t\tTrAddr: dev.trAddr, Uuid: dev.uuid,\n\t\t}\n\t}\n}\n\n// Retry dev-replace requests as state propagation may take some time after set-faulty call has\n// been made to manually trigger a faulty device state.\nfunc replaceDevRetryBusy(ctx context.Context, log logging.Logger, e Engine, req proto.Message) (res *ctlpb.SmdManageResp_Result, err error) {\n\tfor try := uint(0); try < uint(maxDevReplaceRetries); try++ {\n\t\tres, err = sendManageReq(ctx, e, drpc.MethodReplaceStorage, req)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\tif daos.Status(res.Status) != daos.Busy {\n\t\t\tbreak\n\t\t}\n\n\t\tbackoff := common.ExpBackoff(baseDevReplaceBackoff, uint64(try),\n\t\t\tuint64(maxDevReplaceBackoffFactor))\n\t\tlog.Debugf(\"retrying dev-replace drpc request after %s\", backoff)\n\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\terr = ctx.Err()\n\t\t\treturn\n\t\tcase <-time.After(backoff):\n\t\t}\n\t}\n\n\treturn\n}\n\n// SmdManage implements the method defined for the Management Service.\n//\n// Manage SMD devices.\nfunc (svc *ControlService) SmdManage(ctx context.Context, req *ctlpb.SmdManageReq) (*ctlpb.SmdManageResp, error) {\n\tif !svc.harness.isStarted() {\n\t\treturn nil, FaultHarnessNotStarted\n\t}\n\tif len(svc.harness.readyRanks()) == 0 {\n\t\treturn nil, FaultDataPlaneNotStarted\n\t}\n\n\t// Flag indicates whether Device-UUID can be replaced with its parent NVMe controller address.\n\tvar useTrAddrInReq bool\n\tvar ids string\n\n\tswitch req.Op.(type) {\n\tcase *ctlpb.SmdManageReq_Replace:\n\t\tids = req.GetReplace().OldDevUuid\n\tcase *ctlpb.SmdManageReq_Faulty:\n\t\tids = req.GetFaulty().Uuid\n\tcase *ctlpb.SmdManageReq_Led:\n\t\tuseTrAddrInReq = true\n\t\tids = req.GetLed().Ids\n\tdefault:\n\t\treturn nil, errors.Errorf(\"Unrecognized operation in SmdManageReq: %+v\", req.Op)\n\t}\n\n\t// Evaluate which engine(s) to send requests to.\n\tengineDevMap, err := svc.mapIDsToEngine(ctx, ids, useTrAddrInReq)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"mapping device identifiers to engine\")\n\t}\n\n\trankResps := []*ctlpb.SmdManageResp_RankResp{}\n\n\tfor engine, devs := range engineDevMap {\n\t\tdevResults := []*ctlpb.SmdManageResp_Result{}\n\n\t\trank, err := engine.GetRank()\n\t\tif err != nil {\n\t\t\treturn nil, errors.Wrap(err, \"retrieving engine rank\")\n\t\t}\n\n\t\tmsg := fmt.Sprintf(\"CtlSvc.SmdManage dispatch, rank %d: %%s req:%%+v\\n\", rank)\n\n\t\t// Extract request from oneof field and execute dRPC.\n\t\tswitch req.Op.(type) {\n\t\tcase *ctlpb.SmdManageReq_Replace:\n\t\t\tif len(devs) != 1 {\n\t\t\t\treturn nil, errors.New(\"replace request expects only one device ID\")\n\t\t\t}\n\t\t\tdReq := req.GetReplace()\n\t\t\tsvc.log.Debugf(msg, \"dev-replace\", dReq)\n\t\t\tdevRes, err := replaceDevRetryBusy(ctx, svc.log, engine, dReq)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, errors.Wrap(err, msg)\n\t\t\t}\n\t\t\taddManageRespIDOnFail(svc.log, devRes, devs.getFirst())\n\t\t\tdevResults = append(devResults, devRes)\n\t\tcase *ctlpb.SmdManageReq_Faulty:\n\t\t\tif len(devs) != 1 {\n\t\t\t\treturn nil, errors.New(\"set-faulty request expects only one device ID\")\n\t\t\t}\n\t\t\tdReq := req.GetFaulty()\n\t\t\tsvc.log.Debugf(msg, \"set-faulty\", dReq)\n\t\t\tdevRes, err := sendManageReq(ctx, engine, drpc.MethodSetFaultyState, dReq)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, errors.Wrap(err, msg)\n\t\t\t}\n\t\t\taddManageRespIDOnFail(svc.log, devRes, devs.getFirst())\n\t\t\tdevResults = append(devResults, devRes)\n\t\tcase *ctlpb.SmdManageReq_Led:\n\t\t\tif len(devs) == 0 {\n\t\t\t\t// Operate on all devices by default.\n\t\t\t\treturn nil, errors.New(\"led-manage request expects one or more IDs\")\n\t\t\t}\n\t\t\t// Multiple addresses are supported in LED request.\n\t\t\tfor _, dev := range devs {\n\t\t\t\tdReq := req.GetLed()\n\t\t\t\t// ID should by now have been resolved to a transport (PCI) address.\n\t\t\t\tif dev.trAddr == \"\" {\n\t\t\t\t\treturn nil, errors.Errorf(\"device uuid %s not resolved to a PCI address\",\n\t\t\t\t\t\tdev.uuid)\n\t\t\t\t}\n\t\t\t\tdReq.Ids = dev.trAddr\n\t\t\t\tsvc.log.Debugf(msg, \"led-manage\", dReq)\n\t\t\t\tdevRes, err := sendManageReq(ctx, engine, drpc.MethodLedManage, dReq)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, errors.Wrap(err, msg)\n\t\t\t\t}\n\t\t\t\taddManageRespIDOnFail(svc.log, devRes, &dev)\n\t\t\t\tdevResults = append(devResults, devRes)\n\t\t\t}\n\t\tdefault:\n\t\t\treturn nil, errors.New(\"unexpected smd manage request type\")\n\t\t}\n\n\t\trankResps = append(rankResps, &ctlpb.SmdManageResp_RankResp{\n\t\t\tRank: rank.Uint32(), Results: devResults,\n\t\t})\n\t}\n\n\tsort.Slice(rankResps, func(i, j int) bool {\n\t\treturn rankResps[i].Rank < rankResps[j].Rank\n\t})\n\n\tresp := &ctlpb.SmdManageResp{Ranks: rankResps}\n\n\treturn resp, nil\n}\n"
    },
    {
      "path": "src/control/server/harness.go",
      "content": "//\n// (C) Copyright 2019-2023 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\npackage server\n\nimport (\n\t\"context\"\n\t\"os\"\n\t\"sync\"\n\n\t\"github.com/pkg/errors\"\n\t\"google.golang.org/protobuf/proto\"\n\n\tcommonpb \"github.com/daos-stack/daos/src/control/common/proto\"\n\tctlpb \"github.com/daos-stack/daos/src/control/common/proto/ctl\"\n\tsrvpb \"github.com/daos-stack/daos/src/control/common/proto/srv\"\n\t\"github.com/daos-stack/daos/src/control/drpc\"\n\t\"github.com/daos-stack/daos/src/control/lib/atm\"\n\t\"github.com/daos-stack/daos/src/control/lib/ranklist\"\n\t\"github.com/daos-stack/daos/src/control/logging\"\n\t\"github.com/daos-stack/daos/src/control/server/config\"\n\t\"github.com/daos-stack/daos/src/control/server/storage\"\n\t\"github.com/daos-stack/daos/src/control/system\"\n)\n\n// Engine defines an interface to be implemented by engine instances.\n//\n// NB: This interface is way too big right now; need to refactor in order\n// to limit scope.\ntype Engine interface {\n\t// These are definitely wrong... They indicate that too much internal\n\t// information is being leaked outside of the implementation.\n\tnewCret(string, error) *ctlpb.NvmeControllerResult\n\ttryDrpc(context.Context, drpc.Method) *system.MemberResult\n\trequestStart(context.Context)\n\tupdateInUseBdevs(context.Context, []storage.NvmeController, uint64, uint64) ([]storage.NvmeController, error)\n\tisAwaitingFormat() bool\n\n\t// These methods should probably be replaced by callbacks.\n\tNotifyDrpcReady(*srvpb.NotifyReadyReq)\n\tNotifyStorageReady()\n\tBioErrorNotify(*srvpb.BioErrorReq)\n\n\t// These methods should probably be refactored out into functions that\n\t// accept the engine instance as a parameter.\n\tGetBioHealth(context.Context, *ctlpb.BioHealthReq) (*ctlpb.BioHealthResp, error)\n\tScanBdevTiers() ([]storage.BdevTierScanResult, error)\n\tListSmdDevices(context.Context, *ctlpb.SmdDevReq) (*ctlpb.SmdDevResp, error)\n\tStorageFormatSCM(context.Context, bool) *ctlpb.ScmMountResult\n\tStorageFormatNVMe() commonpb.NvmeControllerResults\n\n\t// This is a more reasonable surface that will be easier to maintain and test.\n\tCallDrpc(context.Context, drpc.Method, proto.Message) (*drpc.Response, error)\n\tGetRank() (ranklist.Rank, error)\n\tGetTargetCount() int\n\tIndex() uint32\n\tIsStarted() bool\n\tIsReady() bool\n\tLocalState() system.MemberState\n\tRemoveSuperblock() error\n\tRun(context.Context, bool)\n\tSetupRank(context.Context, ranklist.Rank, uint32) error\n\tStop(os.Signal) error\n\tOnInstanceExit(...onInstanceExitFn)\n\tOnReady(...onReadyFn)\n\tGetStorage() *storage.Provider\n}\n\n// EngineHarness is responsible for managing Engine instances.\ntype EngineHarness struct {\n\tsync.RWMutex\n\tlog           logging.Logger\n\tinstances     []Engine\n\tstarted       atm.Bool\n\tfaultDomain   *system.FaultDomain\n\tonDrpcFailure []func(context.Context, error)\n}\n\n// NewEngineHarness returns an initialized *EngineHarness.\nfunc NewEngineHarness(log logging.Logger) *EngineHarness {\n\treturn &EngineHarness{\n\t\tlog:       log,\n\t\tinstances: make([]Engine, 0),\n\t}\n}\n\n// WithFaultDomain adds a fault domain to the EngineHarness.\nfunc (h *EngineHarness) WithFaultDomain(fd *system.FaultDomain) *EngineHarness {\n\th.faultDomain = fd\n\treturn h\n}\n\n// isStarted indicates whether the EngineHarness is in a running state.\nfunc (h *EngineHarness) isStarted() bool {\n\treturn h.started.Load()\n}\n\n// Instances safely returns harness' EngineInstances.\nfunc (h *EngineHarness) Instances() []Engine {\n\th.RLock()\n\tdefer h.RUnlock()\n\treturn h.instances\n}\n\n// FilterInstancesByRankSet returns harness' EngineInstances that match any\n// of a list of ranks derived from provided rank set string.\nfunc (h *EngineHarness) FilterInstancesByRankSet(ranks string) ([]Engine, error) {\n\th.RLock()\n\tdefer h.RUnlock()\n\n\trankList, err := ranklist.ParseRanks(ranks)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tout := make([]Engine, 0)\n\n\tfor _, i := range h.instances {\n\t\tr, err := i.GetRank()\n\t\tif err != nil {\n\t\t\tcontinue // no rank to check against\n\t\t}\n\t\tif r.InList(rankList) {\n\t\t\tout = append(out, i)\n\t\t}\n\t}\n\n\treturn out, nil\n}\n\n// AddInstance adds a new Engine instance to be managed.\nfunc (h *EngineHarness) AddInstance(ei Engine) error {\n\tif h.isStarted() {\n\t\treturn errors.New(\"can't add instance to already-started harness\")\n\t}\n\n\th.Lock()\n\tdefer h.Unlock()\n\tif indexSetter, ok := ei.(interface{ setIndex(uint32) }); ok {\n\t\tindexSetter.setIndex(uint32(len(h.instances)))\n\t}\n\n\th.instances = append(h.instances, ei)\n\treturn nil\n}\n\n// OnDrpcFailure registers callbacks to be invoked on dRPC call failure.\nfunc (h *EngineHarness) OnDrpcFailure(fns ...func(ctx context.Context, err error)) {\n\th.Lock()\n\tdefer h.Unlock()\n\n\th.onDrpcFailure = append(h.onDrpcFailure, fns...)\n}\n\n// CallDrpc calls the supplied dRPC method on a managed I/O Engine instance.\nfunc (h *EngineHarness) CallDrpc(ctx context.Context, method drpc.Method, body proto.Message) (resp *drpc.Response, err error) {\n\tdefer func() {\n\t\tif err == nil {\n\t\t\treturn\n\t\t}\n\t\t// If the context was canceled, don't trigger callbacks.\n\t\tif errors.Cause(err) == context.Canceled {\n\t\t\treturn\n\t\t}\n\t\t// Don't trigger callbacks for these errors which can happen when\n\t\t// things are still starting up.\n\t\tif err == FaultHarnessNotStarted || err == errEngineNotReady {\n\t\t\treturn\n\t\t}\n\n\t\th.log.Debugf(\"invoking dRPC failure handlers for %s\", err)\n\t\th.RLock()\n\t\tdefer h.RUnlock()\n\t\tfor _, fn := range h.onDrpcFailure {\n\t\t\tfn(ctx, err)\n\t\t}\n\t}()\n\n\tif !h.isStarted() {\n\t\treturn nil, FaultHarnessNotStarted\n\t}\n\n\t// Iterate through the managed instances, looking for\n\t// the first one that is available to service the request.\n\t// If the request fails, that error will be returned.\n\tfor _, i := range h.Instances() {\n\t\tresp, err = i.CallDrpc(ctx, method, body)\n\n\t\tswitch errors.Cause(err) {\n\t\tcase errEngineNotReady, errDRPCNotReady, FaultDataPlaneNotStarted:\n\t\t\tcontinue\n\t\tdefault:\n\t\t\treturn\n\t\t}\n\t}\n\n\treturn\n}\n\ntype dbLeader interface {\n\tIsLeader() bool\n\tShutdownRaft() error\n\tResignLeadership(error) error\n}\n\n// Start starts harness by setting up and starting dRPC before initiating\n// configured instances' processing loops.\n//\n// Run until harness is shutdown.\nfunc (h *EngineHarness) Start(ctx context.Context, db dbLeader, cfg *config.Server) error {\n\tif h.isStarted() {\n\t\treturn errors.New(\"can't start: harness already started\")\n\t}\n\n\tif cfg == nil {\n\t\treturn errors.New(\"nil cfg supplied to Start()\")\n\t}\n\n\t// Now we want to block any RPCs that might try to mess with storage\n\t// (format, firmware update, etc) before attempting to start I/O Engines\n\t// which are using the storage.\n\th.started.SetTrue()\n\tdefer h.started.SetFalse()\n\n\tfor _, ei := range h.Instances() {\n\t\tei.Run(ctx, cfg.RecreateSuperblocks)\n\t}\n\n\th.OnDrpcFailure(func(_ context.Context, errIn error) {\n\t\tif !db.IsLeader() {\n\t\t\treturn\n\t\t}\n\n\t\tswitch errors.Cause(errIn) {\n\t\tcase errDRPCNotReady, FaultDataPlaneNotStarted:\n\t\t\tbreak\n\t\tdefault:\n\t\t\t// Don't shutdown on other failures which are\n\t\t\t// not related to dRPC communications.\n\t\t\treturn\n\t\t}\n\n\t\t// If we cannot service a dRPC request on this node,\n\t\t// we should resign as leader in order to force a new\n\t\t// leader election.\n\t\tif err := db.ResignLeadership(errIn); err != nil {\n\t\t\th.log.Errorf(\"failed to resign leadership after dRPC failure: %s\", err)\n\t\t}\n\t})\n\n\t<-ctx.Done()\n\th.log.Debug(\"shutting down harness\")\n\n\treturn ctx.Err()\n}\n\n// readyRanks returns rank assignment of configured harness instances that are\n// in a ready state. Rank assignments can be nil.\nfunc (h *EngineHarness) readyRanks() []ranklist.Rank {\n\th.RLock()\n\tdefer h.RUnlock()\n\n\tranks := make([]ranklist.Rank, 0)\n\tfor idx, ei := range h.instances {\n\t\tif ei.IsReady() {\n\t\t\trank, err := ei.GetRank()\n\t\t\tif err != nil {\n\t\t\t\th.log.Errorf(\"instance %d: no rank (%s)\", idx, err)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tranks = append(ranks, rank)\n\t\t}\n\t}\n\n\treturn ranks\n}\n"
    },
    {
      "path": "src/control/server/harness_test.go",
      "content": "//\n// (C) Copyright 2019-2023 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\npackage server\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"strconv\"\n\t\"sync\"\n\t\"sync/atomic\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/google/go-cmp/cmp\"\n\t\"github.com/pkg/errors\"\n\t\"google.golang.org/protobuf/proto\"\n\n\t\"github.com/daos-stack/daos/src/control/common/test\"\n\t. \"github.com/daos-stack/daos/src/control/common/test\"\n\t\"github.com/daos-stack/daos/src/control/drpc\"\n\t\"github.com/daos-stack/daos/src/control/lib/atm\"\n\t\"github.com/daos-stack/daos/src/control/lib/control\"\n\t\"github.com/daos-stack/daos/src/control/lib/ranklist\"\n\t\"github.com/daos-stack/daos/src/control/logging\"\n\tsysprov \"github.com/daos-stack/daos/src/control/provider/system\"\n\t\"github.com/daos-stack/daos/src/control/security\"\n\t\"github.com/daos-stack/daos/src/control/server/config\"\n\t\"github.com/daos-stack/daos/src/control/server/engine\"\n\t\"github.com/daos-stack/daos/src/control/server/storage\"\n\t\"github.com/daos-stack/daos/src/control/server/storage/bdev\"\n\t\"github.com/daos-stack/daos/src/control/server/storage/scm\"\n\t\"github.com/daos-stack/daos/src/control/system\"\n\t\"github.com/daos-stack/daos/src/control/system/raft\"\n)\n\nconst (\n\ttestShortTimeout   = 50 * time.Millisecond\n\ttestLongTimeout    = 1 * time.Minute\n\tdelayedFailTimeout = 20 * testShortTimeout\n\tmaxEngines         = 2\n)\n\nfunc TestServer_Harness_Start(t *testing.T) {\n\tfor name, tc := range map[string]struct {\n\t\ttrc              *engine.TestRunnerConfig\n\t\tisAP             bool                     // is first instance an AP/MS replica/bootstrap\n\t\trankInSuperblock bool                     // rank already set in superblock when starting\n\t\tinstanceUuids    map[int]string           // UUIDs for each instance.Index()\n\t\tdontNotifyReady  bool                     // skip sending notify ready on dRPC channel\n\t\twaitTimeout      time.Duration            // time after which test context is cancelled\n\t\texpStartErr      error                    // error from harness.Start()\n\t\texpStartCount    uint32                   // number of instance.runner.Start() calls\n\t\texpDrpcCalls     map[uint32][]drpc.Method // method ids called for each instance.Index()\n\t\texpGrpcCalls     map[uint32][]string      // string repr of call for each instance.Index()\n\t\texpRanks         map[uint32]ranklist.Rank // ranks to have been set during Start()\n\t\texpMembers       system.Members           // members to have been registered during Start()\n\t\texpIoErrs        map[uint32]error         // errors expected from instances\n\t}{\n\t\t\"normal startup/shutdown\": {\n\t\t\ttrc: &engine.TestRunnerConfig{\n\t\t\t\tRunnerExitInfoCb: func(ctx context.Context) *engine.RunnerExitInfo {\n\t\t\t\t\tselect {\n\t\t\t\t\tcase <-ctx.Done():\n\t\t\t\t\tcase <-time.After(testLongTimeout):\n\t\t\t\t\t}\n\t\t\t\t\treturn &engine.RunnerExitInfo{\n\t\t\t\t\t\tError: errors.New(\"ending\"),\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\tinstanceUuids: map[int]string{\n\t\t\t\t0: MockUUID(0),\n\t\t\t\t1: MockUUID(1),\n\t\t\t},\n\t\t\texpStartCount: maxEngines,\n\t\t\texpDrpcCalls: map[uint32][]drpc.Method{\n\t\t\t\t0: {\n\t\t\t\t\tdrpc.MethodSetRank,\n\t\t\t\t\tdrpc.MethodSetUp,\n\t\t\t\t},\n\t\t\t\t1: {\n\t\t\t\t\tdrpc.MethodSetRank,\n\t\t\t\t\tdrpc.MethodSetUp,\n\t\t\t\t},\n\t\t\t},\n\t\t\texpGrpcCalls: map[uint32][]string{\n\t\t\t\t0: {fmt.Sprintf(\"Join %d\", ranklist.NilRank)},\n\t\t\t\t1: {fmt.Sprintf(\"Join %d\", ranklist.NilRank)},\n\t\t\t},\n\t\t\texpRanks: map[uint32]ranklist.Rank{\n\t\t\t\t0: ranklist.Rank(0),\n\t\t\t\t1: ranklist.Rank(1),\n\t\t\t},\n\t\t},\n\t\t\"startup/shutdown with preset ranks\": {\n\t\t\ttrc: &engine.TestRunnerConfig{\n\t\t\t\tRunnerExitInfoCb: func(ctx context.Context) *engine.RunnerExitInfo {\n\t\t\t\t\tselect {\n\t\t\t\t\tcase <-ctx.Done():\n\t\t\t\t\tcase <-time.After(testLongTimeout):\n\t\t\t\t\t}\n\t\t\t\t\treturn &engine.RunnerExitInfo{\n\t\t\t\t\t\tError: errors.New(\"ending\"),\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\trankInSuperblock: true,\n\t\t\texpStartCount:    maxEngines,\n\t\t\texpDrpcCalls: map[uint32][]drpc.Method{\n\t\t\t\t0: {\n\t\t\t\t\tdrpc.MethodSetRank,\n\t\t\t\t\tdrpc.MethodSetUp,\n\t\t\t\t},\n\t\t\t\t1: {\n\t\t\t\t\tdrpc.MethodSetRank,\n\t\t\t\t\tdrpc.MethodSetUp,\n\t\t\t\t},\n\t\t\t},\n\t\t\texpGrpcCalls: map[uint32][]string{\n\t\t\t\t0: {\"Join 1\"}, // rank == instance.Index() + 1\n\t\t\t\t1: {\"Join 2\"},\n\t\t\t},\n\t\t\texpRanks: map[uint32]ranklist.Rank{\n\t\t\t\t0: ranklist.Rank(1),\n\t\t\t\t1: ranklist.Rank(2),\n\t\t\t},\n\t\t},\n\t\t\"fails to start\": {\n\t\t\ttrc:           &engine.TestRunnerConfig{StartErr: errors.New(\"no\")},\n\t\t\twaitTimeout:   10 * testShortTimeout,\n\t\t\texpStartErr:   context.DeadlineExceeded,\n\t\t\texpStartCount: 2, // both start but don't proceed so context times out\n\t\t},\n\t\t\"delayed failure occurs before notify ready\": {\n\t\t\tdontNotifyReady: true,\n\t\t\twaitTimeout:     30 * testShortTimeout,\n\t\t\texpStartErr:     context.DeadlineExceeded,\n\t\t\ttrc: &engine.TestRunnerConfig{\n\t\t\t\tRunnerExitInfoCb: func(ctx context.Context) *engine.RunnerExitInfo {\n\t\t\t\t\tselect {\n\t\t\t\t\tcase <-ctx.Done():\n\t\t\t\t\tcase <-time.After(delayedFailTimeout):\n\t\t\t\t\t}\n\t\t\t\t\treturn &engine.RunnerExitInfo{\n\t\t\t\t\t\tError: errors.New(\"oops\"),\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\texpStartCount: maxEngines,\n\t\t\texpRanks: map[uint32]ranklist.Rank{\n\t\t\t\t0: ranklist.NilRank,\n\t\t\t\t1: ranklist.NilRank,\n\t\t\t},\n\t\t\texpIoErrs: map[uint32]error{\n\t\t\t\t0: errors.New(\"oops\"),\n\t\t\t\t1: errors.New(\"oops\"),\n\t\t\t},\n\t\t},\n\t\t\"delayed failure occurs after ready\": {\n\t\t\twaitTimeout: 100 * testShortTimeout,\n\t\t\texpStartErr: context.DeadlineExceeded,\n\t\t\ttrc: &engine.TestRunnerConfig{\n\t\t\t\tRunnerExitInfoCb: func(ctx context.Context) *engine.RunnerExitInfo {\n\t\t\t\t\tselect {\n\t\t\t\t\tcase <-ctx.Done():\n\t\t\t\t\tcase <-time.After(delayedFailTimeout):\n\t\t\t\t\t}\n\t\t\t\t\treturn &engine.RunnerExitInfo{\n\t\t\t\t\t\tError: errors.New(\"oops\"),\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\tinstanceUuids: map[int]string{\n\t\t\t\t0: MockUUID(0),\n\t\t\t\t1: MockUUID(1),\n\t\t\t},\n\t\t\texpStartCount: maxEngines,\n\t\t\texpDrpcCalls: map[uint32][]drpc.Method{\n\t\t\t\t0: {\n\t\t\t\t\tdrpc.MethodSetRank,\n\t\t\t\t\tdrpc.MethodSetUp,\n\t\t\t\t},\n\t\t\t\t1: {\n\t\t\t\t\tdrpc.MethodSetRank,\n\t\t\t\t\tdrpc.MethodSetUp,\n\t\t\t\t},\n\t\t\t},\n\t\t\texpGrpcCalls: map[uint32][]string{\n\t\t\t\t0: {fmt.Sprintf(\"Join %d\", ranklist.NilRank)},\n\t\t\t\t1: {fmt.Sprintf(\"Join %d\", ranklist.NilRank)},\n\t\t\t},\n\t\t\texpRanks: map[uint32]ranklist.Rank{\n\t\t\t\t0: ranklist.Rank(0),\n\t\t\t\t1: ranklist.Rank(1),\n\t\t\t},\n\t\t\texpIoErrs: map[uint32]error{\n\t\t\t\t0: errors.New(\"oops\"),\n\t\t\t\t1: errors.New(\"oops\"),\n\t\t\t},\n\t\t},\n\t} {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\tlog, buf := logging.NewTestLogger(t.Name())\n\t\t\tdefer ShowBufferOnFailure(t, buf)\n\n\t\t\ttestDir, cleanup := CreateTestDir(t)\n\t\t\tdefer cleanup()\n\n\t\t\tengineCfgs := make([]*engine.Config, maxEngines)\n\t\t\tfor i := 0; i < maxEngines; i++ {\n\t\t\t\tengineCfgs[i] = engine.MockConfig().\n\t\t\t\t\tWithStorage(\n\t\t\t\t\t\tstorage.NewTierConfig().\n\t\t\t\t\t\t\tWithStorageClass(\"ram\").\n\t\t\t\t\t\t\tWithScmRamdiskSize(1).\n\t\t\t\t\t\t\tWithScmMountPoint(filepath.Join(testDir, strconv.Itoa(i))),\n\t\t\t\t\t)\n\t\t\t}\n\t\t\tconfig := config.DefaultServer().\n\t\t\t\tWithEngines(engineCfgs...).\n\t\t\t\tWithSocketDir(testDir).\n\t\t\t\tWithTransportConfig(&security.TransportConfig{AllowInsecure: true})\n\n\t\t\tjoinMu := sync.Mutex{}\n\t\t\tjoinRequests := make(map[uint32][]string)\n\t\t\tvar instanceStarts uint32\n\t\t\tharness := NewEngineHarness(log)\n\t\t\tfor i, engineCfg := range config.Engines {\n\t\t\t\tif err := os.MkdirAll(engineCfg.Storage.Tiers[0].Scm.MountPoint, 0777); err != nil {\n\t\t\t\t\tt.Fatal(err)\n\t\t\t\t}\n\n\t\t\t\tif tc.trc == nil {\n\t\t\t\t\ttc.trc = &engine.TestRunnerConfig{}\n\t\t\t\t}\n\t\t\t\tif tc.trc.StartCb == nil {\n\t\t\t\t\ttc.trc.StartCb = func() {\n\t\t\t\t\t\t_ = atomic.AddUint32(&instanceStarts, 1)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\trunner := engine.NewTestRunner(tc.trc, engineCfg)\n\n\t\t\t\tmsc := &sysprov.MockSysConfig{IsMountedBool: true}\n\t\t\t\tsysp := sysprov.NewMockSysProvider(log, msc)\n\t\t\t\tprovider := storage.MockProvider(\n\t\t\t\t\tlog, 0, &engineCfg.Storage,\n\t\t\t\t\tsysp,\n\t\t\t\t\tscm.NewMockProvider(log, nil, msc),\n\t\t\t\t\tbdev.NewMockProvider(log, &bdev.MockBackendConfig{}),\n\t\t\t\t\tnil,\n\t\t\t\t)\n\n\t\t\t\tidx := uint32(i)\n\t\t\t\tjoinFn := func(_ context.Context, req *control.SystemJoinReq) (*control.SystemJoinResp, error) {\n\t\t\t\t\t// appease the race detector\n\t\t\t\t\tjoinMu.Lock()\n\t\t\t\t\tdefer joinMu.Unlock()\n\t\t\t\t\tjoinRequests[idx] = []string{fmt.Sprintf(\"Join %d\", req.Rank)}\n\t\t\t\t\treturn &control.SystemJoinResp{\n\t\t\t\t\t\tRank: ranklist.Rank(idx),\n\t\t\t\t\t}, nil\n\t\t\t\t}\n\n\t\t\t\tei := NewEngineInstance(log, provider, joinFn, runner)\n\t\t\t\tvar isAP bool\n\t\t\t\tif tc.isAP && i == 0 { // first instance will be AP & bootstrap MS\n\t\t\t\t\tisAP = true\n\t\t\t\t}\n\t\t\t\tvar uuid string\n\t\t\t\tif UUID, exists := tc.instanceUuids[i]; exists {\n\t\t\t\t\tuuid = UUID\n\t\t\t\t}\n\t\t\t\tvar rank *ranklist.Rank\n\t\t\t\tvar isValid bool\n\t\t\t\tif tc.rankInSuperblock {\n\t\t\t\t\trank = ranklist.NewRankPtr(uint32(i + 1))\n\t\t\t\t\tisValid = true\n\t\t\t\t} else if isAP { // bootstrap will assume rank 0\n\t\t\t\t\trank = new(ranklist.Rank)\n\t\t\t\t}\n\t\t\t\tei.setSuperblock(&Superblock{\n\t\t\t\t\tUUID: uuid, Rank: rank, ValidRank: isValid,\n\t\t\t\t})\n\n\t\t\t\tif err := harness.AddInstance(ei); err != nil {\n\t\t\t\t\tt.Fatal(err)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tinstances := harness.Instances()\n\n\t\t\t// set mock dRPC client to record call details\n\t\t\tfor _, e := range instances {\n\t\t\t\tei := e.(*EngineInstance)\n\t\t\t\tei.setDrpcClient(newMockDrpcClient(&mockDrpcClientConfig{\n\t\t\t\t\tSendMsgResponse: &drpc.Response{},\n\t\t\t\t}))\n\t\t\t}\n\n\t\t\tctx, cancel := context.WithCancel(test.Context(t))\n\t\t\tif tc.waitTimeout != 0 {\n\t\t\t\tctx, cancel = context.WithTimeout(ctx, tc.waitTimeout)\n\t\t\t}\n\t\t\tdefer cancel()\n\n\t\t\t// start harness async and signal completion\n\t\t\tvar gotErr error\n\t\t\tsysdb := raft.MockDatabase(t, log)\n\t\t\tmembership := system.MockMembership(t, log, sysdb, mockTCPResolver)\n\t\t\tdone := make(chan struct{})\n\t\t\tgo func(ctxIn context.Context) {\n\t\t\t\tgotErr = harness.Start(ctxIn, sysdb, config)\n\t\t\t\tclose(done)\n\t\t\t}(ctx)\n\n\t\t\twaitDrpcReady := make(chan struct{})\n\t\t\tt.Log(\"waiting for dRPC to be ready\")\n\t\t\tgo func(ctxIn context.Context) {\n\t\t\t\tfor {\n\t\t\t\t\tready := true\n\t\t\t\t\tfor _, ei := range instances {\n\t\t\t\t\t\tif ei.(*EngineInstance).waitDrpc.IsFalse() {\n\t\t\t\t\t\t\tready = false\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ready {\n\t\t\t\t\t\tclose(waitDrpcReady)\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tselect {\n\t\t\t\t\tcase <-time.After(testShortTimeout):\n\t\t\t\t\tcase <-ctxIn.Done():\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}(ctx)\n\n\t\t\tselect {\n\t\t\tcase <-waitDrpcReady:\n\t\t\t\tt.Log(\"dRPC is ready\")\n\t\t\tcase <-ctx.Done():\n\t\t\t\tif tc.expStartErr != nil {\n\t\t\t\t\t<-done\n\t\t\t\t\tCmpErr(t, tc.expStartErr, gotErr)\n\t\t\t\t\tif atomic.LoadUint32(&instanceStarts) != tc.expStartCount {\n\t\t\t\t\t\tt.Fatalf(\"expected %d starts, got %d\",\n\t\t\t\t\t\t\ttc.expStartCount, instanceStarts)\n\t\t\t\t\t}\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\t// deadline exceeded as expected but desired state not reached\n\t\t\t\tt.Fatalf(\"instances did not get to waiting for dRPC state: %s\", ctx.Err())\n\t\t\t}\n\t\t\tt.Log(\"instances ready and waiting for dRPC ready notification\")\n\n\t\t\t// simulate receiving notify ready whilst instances\n\t\t\t// running in harness (unless dontNotifyReady flag is set)\n\t\t\tfor _, ei := range instances {\n\t\t\t\tif tc.dontNotifyReady {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\treq := getTestNotifyReadyReq(t, \"/tmp/instance_test.sock\", 0)\n\t\t\t\tgo func(ctxIn context.Context, i *EngineInstance) {\n\t\t\t\t\tselect {\n\t\t\t\t\tcase i.drpcReady <- req:\n\t\t\t\t\tcase <-ctxIn.Done():\n\t\t\t\t\t}\n\t\t\t\t}(ctx, ei.(*EngineInstance))\n\t\t\t\tt.Logf(\"sent drpc ready to instance %d\", ei.Index())\n\t\t\t}\n\n\t\t\twaitReady := make(chan struct{})\n\t\t\tt.Log(\"waitng for ready\")\n\t\t\tgo func(ctxIn context.Context) {\n\t\t\t\tfor {\n\t\t\t\t\tif len(harness.readyRanks()) == len(instances) {\n\t\t\t\t\t\tclose(waitReady)\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tselect {\n\t\t\t\t\tcase <-time.After(testShortTimeout):\n\t\t\t\t\tcase <-ctxIn.Done():\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}(ctx)\n\n\t\t\tselect {\n\t\t\tcase <-waitReady:\n\t\t\t\tt.Log(\"instances setup and ready\")\n\t\t\tcase <-ctx.Done():\n\t\t\t\tt.Logf(\"instances did not get to ready state (%s)\", ctx.Err())\n\t\t\t}\n\n\t\t\tif atomic.LoadUint32(&instanceStarts) != tc.expStartCount {\n\t\t\t\tt.Fatalf(\"expected %d starts, got %d\", tc.expStartCount, instanceStarts)\n\t\t\t}\n\n\t\t\tif tc.waitTimeout == 0 { // if custom timeout, don't cancel\n\t\t\t\tcancel() // all ranks have been started, run finished\n\t\t\t}\n\t\t\t<-done\n\t\t\tif gotErr != context.Canceled || tc.expStartErr != nil {\n\t\t\t\tCmpErr(t, tc.expStartErr, gotErr)\n\t\t\t\tif tc.expStartErr != nil {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tjoinMu.Lock()\n\t\t\tdefer joinMu.Unlock()\n\t\t\t// verify expected RPCs were made, ranks allocated and\n\t\t\t// members added to membership\n\t\t\tfor _, e := range instances {\n\t\t\t\tei := e.(*EngineInstance)\n\t\t\t\tdc, err := ei.getDrpcClient()\n\t\t\t\tif err != nil {\n\t\t\t\t\tt.Fatal(err)\n\t\t\t\t}\n\t\t\t\tgotDrpcCalls := dc.(*mockDrpcClient).CalledMethods()\n\t\t\t\tAssertEqual(t, tc.expDrpcCalls[ei.Index()], gotDrpcCalls,\n\t\t\t\t\tfmt.Sprintf(\"%s: unexpected dRPCs for instance %d\", name, ei.Index()))\n\n\t\t\t\tif diff := cmp.Diff(tc.expGrpcCalls[ei.Index()], joinRequests[ei.Index()]); diff != \"\" {\n\t\t\t\t\tt.Fatalf(\"unexpected gRPCs for instance %d (-want, +got):\\n%s\\n\",\n\t\t\t\t\t\tei.Index(), diff)\n\t\t\t\t}\n\t\t\t\trank, _ := ei.GetRank()\n\t\t\t\tif diff := cmp.Diff(tc.expRanks[ei.Index()], rank); diff != \"\" {\n\t\t\t\t\tt.Fatalf(\"unexpected rank for instance %d (-want, +got):\\n%s\\n\",\n\t\t\t\t\t\tei.Index(), diff)\n\t\t\t\t}\n\t\t\t\tCmpErr(t, tc.expIoErrs[ei.Index()], ei._lastErr)\n\t\t\t}\n\t\t\tmembers, err := membership.Members(nil)\n\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\t\t\tAssertEqual(t, len(tc.expMembers), len(members), \"unexpected number in membership\")\n\t\t\tfor i, member := range members {\n\t\t\t\tif diff := cmp.Diff(fmt.Sprintf(\"%v\", member),\n\t\t\t\t\tfmt.Sprintf(\"%v\", tc.expMembers[i])); diff != \"\" {\n\n\t\t\t\t\tt.Fatalf(\"unexpected system membership (-want, +got):\\n%s\\n\", diff)\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestServer_Harness_WithFaultDomain(t *testing.T) {\n\tharness := &EngineHarness{}\n\tfd, err := system.NewFaultDomainFromString(\"/one/two\")\n\tif err != nil {\n\t\tt.Fatalf(\"couldn't create fault domain: %s\", err)\n\t}\n\n\tupdatedHarness := harness.WithFaultDomain(fd)\n\n\t// Updated to include the fault domain\n\tif diff := cmp.Diff(harness.faultDomain, fd); diff != \"\" {\n\t\tt.Fatalf(\"unexpected results (-want, +got):\\n%s\\n\", diff)\n\t}\n\t// updatedHarness is the same as harness\n\tAssertEqual(t, updatedHarness, harness, \"not the same structure\")\n}\n\ntype mockdb struct {\n\tisLeader    bool\n\tshutdown    bool\n\tshutdownErr error\n}\n\nfunc (db *mockdb) IsLeader() bool {\n\treturn db.isLeader\n}\n\nfunc (db *mockdb) ShutdownRaft() error {\n\tdb.shutdown = true\n\treturn db.shutdownErr\n}\n\nfunc (db *mockdb) ResignLeadership(error) error {\n\tdb.isLeader = false\n\treturn nil\n}\n\nfunc TestServer_Harness_CallDrpc(t *testing.T) {\n\tfor name, tc := range map[string]struct {\n\t\tmics           []*MockInstanceConfig\n\t\tmethod         drpc.Method\n\t\tbody           proto.Message\n\t\tnotStarted     bool\n\t\tnotLeader      bool\n\t\tresignCause    error\n\t\texpShutdown    bool\n\t\texpNotLeader   bool\n\t\texpFailHandler bool\n\t\texpErr         error\n\t}{\n\t\t\"success\": {\n\t\t\tmics: []*MockInstanceConfig{\n\t\t\t\t{\n\t\t\t\t\tReady: atm.NewBool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t\"one not ready, one ready\": {\n\t\t\tmics: []*MockInstanceConfig{\n\t\t\t\t{\n\t\t\t\t\tReady:       atm.NewBool(true),\n\t\t\t\t\tCallDrpcErr: errDRPCNotReady,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tReady: atm.NewBool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t\"one not ready, one fails\": {\n\t\t\tmics: []*MockInstanceConfig{\n\t\t\t\t{\n\t\t\t\t\tReady:       atm.NewBool(true),\n\t\t\t\t\tCallDrpcErr: errDRPCNotReady,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tReady:       atm.NewBool(true),\n\t\t\t\t\tCallDrpcErr: errors.New(\"whoops\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\texpErr:         errors.New(\"whoops\"),\n\t\t\texpFailHandler: true,\n\t\t},\n\t\t\"instance not ready\": {\n\t\t\tmics: []*MockInstanceConfig{\n\t\t\t\t{\n\t\t\t\t\tStarted:     atm.NewBool(true),\n\t\t\t\t\tCallDrpcErr: errEngineNotReady,\n\t\t\t\t},\n\t\t\t},\n\t\t\texpErr: errEngineNotReady,\n\t\t},\n\t\t\"harness not started\": {\n\t\t\tmics:       []*MockInstanceConfig{},\n\t\t\tnotStarted: true,\n\t\t\texpErr:     FaultHarnessNotStarted,\n\t\t},\n\t\t\"first fails (other)\": {\n\t\t\tmics: []*MockInstanceConfig{\n\t\t\t\t{\n\t\t\t\t\tReady:       atm.NewBool(true),\n\t\t\t\t\tCallDrpcErr: errors.New(\"whoops\"),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tReady: atm.NewBool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t\texpErr:         errors.New(\"whoops\"),\n\t\t\texpFailHandler: true,\n\t\t},\n\t\t\"none available\": {\n\t\t\tmics: []*MockInstanceConfig{\n\t\t\t\t{\n\t\t\t\t\tReady:       atm.NewBool(true),\n\t\t\t\t\tCallDrpcErr: errDRPCNotReady,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tReady:       atm.NewBool(true),\n\t\t\t\t\tCallDrpcErr: FaultDataPlaneNotStarted,\n\t\t\t\t},\n\t\t\t},\n\t\t\texpNotLeader:   true,\n\t\t\texpErr:         FaultDataPlaneNotStarted,\n\t\t\texpFailHandler: true,\n\t\t},\n\t\t\"context canceled\": {\n\t\t\tmics: []*MockInstanceConfig{\n\t\t\t\t{\n\t\t\t\t\tReady:       atm.NewBool(true),\n\t\t\t\t\tCallDrpcErr: context.Canceled,\n\t\t\t\t},\n\t\t\t},\n\t\t\texpErr: context.Canceled,\n\t\t},\n\t} {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\tlog, buf := logging.NewTestLogger(name)\n\t\t\tdefer test.ShowBufferOnFailure(t, buf)\n\n\t\t\th := NewEngineHarness(log)\n\t\t\tfor _, mic := range tc.mics {\n\t\t\t\tif err := h.AddInstance(NewMockInstance(mic)); err != nil {\n\t\t\t\t\tt.Fatal(err)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar drpcFailureInvoked atm.Bool\n\t\t\th.OnDrpcFailure(func(_ context.Context, err error) {\n\t\t\t\tdrpcFailureInvoked.SetTrue()\n\t\t\t})\n\n\t\t\tctx, cancel := context.WithCancel(test.Context(t))\n\t\t\tdb := &mockdb{\n\t\t\t\tisLeader: !tc.notLeader,\n\t\t\t}\n\n\t\t\tstartErr := make(chan error)\n\t\t\tgo func() {\n\t\t\t\tif err := h.Start(ctx, db, config.DefaultServer()); err != nil {\n\t\t\t\t\tstartErr <- err\n\t\t\t\t}\n\t\t\t\tclose(startErr)\n\t\t\t}()\n\t\t\tfor {\n\t\t\t\tif h.isStarted() {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tdefer func() {\n\t\t\t\tif err := <-startErr; err != nil {\n\t\t\t\t\tif err != context.Canceled {\n\t\t\t\t\t\tt.Fatal(err)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}()\n\t\t\tdefer cancel()\n\n\t\t\tif tc.notStarted {\n\t\t\t\th.started.SetFalse()\n\t\t\t}\n\n\t\t\t_, gotErr := h.CallDrpc(ctx, tc.method, tc.body)\n\t\t\ttest.CmpErr(t, tc.expErr, gotErr)\n\t\t\ttest.AssertEqual(t, db.shutdown, tc.expShutdown, \"unexpected shutdown state\")\n\t\t\ttest.AssertEqual(t, db.isLeader, !tc.expNotLeader, \"unexpected leader state\")\n\t\t\ttest.AssertEqual(t, drpcFailureInvoked.Load(), tc.expFailHandler, \"unexpected fail handler invocation\")\n\t\t})\n\t}\n}\n"
    },
    {
      "path": "src/mgmt/smd.pb-c.c",
      "content": Omitted as it is not in context
    },
    {
      "path": "src/proto/ctl/smd.proto",
      "content": "//\n// (C) Copyright 2019-2023 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\nsyntax = \"proto3\";\npackage ctl;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/ctl\";\n\n// Control Service Protobuf Definitions related to interactions between\n// DAOS control server and DAOS Blob I/O (BIO) module and Per-Server Metadata\n// (SMD).\n\nmessage BioHealthReq {\n\tstring dev_uuid = 1;\n\tuint64 meta_size = 2;\t// Size of the metadata (i.e. vos file index) blob\n\tuint64 rdb_size = 3;\t// Size of the RDB blob\n}\n\n// BioHealthResp mirrors nvme_health_stats structure.\nmessage BioHealthResp {\n\treserved 1, 2;\n\tuint64 timestamp = 3;\n\t// Device health details\n\tuint32 warn_temp_time = 5;\n\tuint32 crit_temp_time = 6;\n\tuint64 ctrl_busy_time = 7;\n\tuint64 power_cycles = 8;\n\tuint64 power_on_hours = 9;\n\tuint64 unsafe_shutdowns = 10;\n\tuint64 media_errs = 11;\n\tuint64 err_log_entries = 12;\n\t// I/O error counters\n\tuint32 bio_read_errs = 13;\n\tuint32 bio_write_errs = 14;\n\tuint32 bio_unmap_errs = 15;\n\tuint32 checksum_errs = 16;\n\tuint32 temperature = 17; // in Kelvin\n\t// Critical warnings\n\tbool temp_warn = 18;\n\tbool avail_spare_warn = 19;\n\tbool dev_reliability_warn = 20;\n\tbool read_only_warn = 21;\n\tbool volatile_mem_warn = 22; // volatile memory backup\n\tint32 status = 23; // DAOS err code\n\tstring dev_uuid = 24; // UUID of blobstore\n\t// Usage stats\n\tuint64 total_bytes = 25; // size of blobstore\n\tuint64 avail_bytes = 26; // free space in blobstore\n\t// Intel vendor SMART attributes\n\tuint32 program_fail_cnt_norm = 27; // percent remaining\n\tuint64 program_fail_cnt_raw = 28; // current value\n\tuint32 erase_fail_cnt_norm = 29;\n\tuint64 erase_fail_cnt_raw = 30;\n\tuint32 wear_leveling_cnt_norm = 31;\n\tuint32 wear_leveling_cnt_min = 32;\n\tuint32 wear_leveling_cnt_max = 33;\n\tuint32 wear_leveling_cnt_avg = 34;\n\tuint64 endtoend_err_cnt_raw = 35;\n\tuint64 crc_err_cnt_raw = 36;\n\tuint64 media_wear_raw = 37;\n\tuint64 host_reads_raw = 38;\n\tuint64 workload_timer_raw = 39;\n\tuint32 thermal_throttle_status = 40;\n\tuint64 thermal_throttle_event_cnt = 41;\n\tuint64 retry_buffer_overflow_cnt = 42;\n\tuint64 pll_lock_loss_cnt = 43;\n\tuint64 nand_bytes_written = 44;\n\tuint64 host_bytes_written = 45;\n\t// Engine configs properties\n\tuint64 cluster_size = 46;\t\t// blobstore cluster size in bytes\n\tuint64 meta_wal_size = 47;\t\t// metadata WAL blob size\n\tuint64 rdb_wal_size = 48;\t\t// RDB WAL blob size\n}\n\nenum NvmeDevState {\n\tUNKNOWN   = 0; // Device state is unknown, zer6o value\n\tNORMAL    = 1; // Device is in a normal operational state\n\tNEW       = 2; // Device is new and is not yet in-use\n\tEVICTED   = 3; // Device is faulty and has been evicted\n\tUNPLUGGED = 4; // Device has been physically removed\n}\n\nenum LedState {\n\tOFF = 0;\t\t// Equivalent to SPDK_VMD_LED_STATE_OFF\n\tQUICK_BLINK = 1;\t// Equivalent to SPDK_VMD_LED_STATE_IDENTIFY\t(4Hz blink)\n\tON = 2;\t\t\t// Equivalent to SPDK_VMD_LED_STATE_FAULT\t(solid on)\n\tSLOW_BLINK = 3;\t\t// Equivalent to SPDK_VMD_LED_STATE_REBUILD\t(1Hz blink)\n\tNA = 4;\t\t\t// Equivalent to SPDK_VMD_LED_STATE_UNKNOWN\t(VMD not enabled)\n}\n\n// SmdDevice represents a DAOS BIO device, identified by a UUID written into a label stored on a\n// SPDK blobstore created on a NVMe namespace. Multiple SmdDevices may exist per NVMe controller.\nmessage SmdDevice {\n\tstring uuid = 1;\t\t// UUID of blobstore\n\trepeated int32 tgt_ids = 2;\t// VOS target IDs\n\tstring tr_addr = 3;\t\t// Transport address of blobstore\n\tNvmeDevState dev_state = 4;\t// NVMe device state\n\tLedState led_state = 5;\t\t// LED state\n\tuint64 total_bytes = 6;\t\t// blobstore clusters total bytes\n\tuint64 avail_bytes = 7;\t\t// Available RAW storage for data\n\tuint64 cluster_size = 8;\t// blobstore cluster size in bytes\n\tuint32 rank = 9;\t\t// DAOS I/O Engine using controller\n\tuint32 role_bits = 10;\t\t// Device active roles (bitmask)\n\tuint64 meta_size = 11;\t\t// Size of the metadata (i.e. vos file index) blob\n\tuint64 meta_wal_size = 12;\t// Size of the metadata WAL blob\n\tuint64 rdb_size = 13;\t\t// Size of the RDB blob\n\tuint64 rdb_wal_size = 14;\t// Size of the RDB WAL blob\n\tuint64 usable_bytes = 15;\t// Effective storage available for data\n}\n\nmessage SmdDevReq {}\n\nmessage SmdDevResp {\n\tint32 status = 1;\n\trepeated SmdDevice devices = 2;\n}\n\nmessage SmdPoolReq {}\n\nmessage SmdPoolResp {\n\tmessage Pool {\n\t\tstring uuid = 1; // UUID of VOS pool\n\t\trepeated int32 tgt_ids = 2; // VOS target IDs\n\t\trepeated uint64 blobs = 3; // SPDK blobs\n\t}\n\tint32 status = 1;\n\trepeated Pool pools = 2;\n}\n\nmessage SmdQueryReq {\n\tbool omit_devices = 1;\t\t// Indicate query should omit devices\n\tbool omit_pools = 2;\t\t// Indicate query should omit pools\n\tbool include_bio_health = 3;\t// Indicate query should include BIO health for devices\n\tstring uuid = 4;\t\t// Constrain query to this UUID (pool or device)\n\tuint32 rank = 5;\t\t// Restrict response to only include info about this rank\n}\n\nmessage SmdQueryResp {\n\tmessage SmdDeviceWithHealth {\n\t\tSmdDevice details = 1;\n\t\tBioHealthResp health = 2; // optional BIO health\n\t}\n\tmessage Pool {\n\t\tstring uuid = 1; // UUID of VOS pool\n\t\trepeated int32 tgt_ids = 2; // VOS target IDs\n\t\trepeated uint64 blobs = 3; // SPDK blobs\n\t}\n\tmessage RankResp {\n\t\tuint32 rank = 1; // rank to which this response corresponds\n\t\trepeated SmdDeviceWithHealth devices = 2; // List of devices on the rank\n\t\trepeated Pool pools = 3; // List of pools on the rank\n\t}\n\tint32 status = 1; // DAOS error code\n\trepeated RankResp ranks = 2; // List of per-rank responses\n}\n\nenum LedAction {\n\tGET = 0;\n\tSET = 1;\n\tRESET = 2;\n}\n\nmessage LedManageReq {\n\tstring ids = 1;\t\t\t// List of Device-UUIDs and/or PCI-addresses\n\tLedAction led_action = 3;\t// LED action to perform\n\tLedState led_state = 4;\t\t// LED state to set (used if action is SET)\n\tuint32 led_duration_mins = 5;\t// LED action duration (how long to blink LED in minutes)\n}\n\nmessage DevReplaceReq {\n\tstring old_dev_uuid = 1;\t// UUID of old (hot-removed) blobstore/device\n\tstring new_dev_uuid = 2;\t// UUID of new (hot-plugged) blobstore/device\n\tbool no_reint = 3;\t\t// Skip device reintegration if set\n}\n\nmessage SetFaultyReq {\n\tstring uuid = 1;\t// Device-UUID (as recorded in SMD)\n}\n\nmessage DevManageResp {\n\tint32 status = 1;\t// DAOS error code\n\tSmdDevice device = 2;\t// Details of device that has been managed\n}\n\nmessage SmdManageReq {\n\toneof op{\n\t\tLedManageReq led = 1;\t\t// Request to manage LED state\n\t\tDevReplaceReq replace = 2;\t// Request to replace SMD device\n\t\tSetFaultyReq faulty = 3;\t// Request to set SMD device faulty\n\t}\n}\n\nmessage SmdManageResp {\n\tmessage Result {\n\t\tint32 status = 1;\t\t// DAOS error code\n\t\tSmdDevice device = 2;\n\t}\n\tmessage RankResp {\n\t\tuint32 rank = 1;\t\t// Rank to which this response corresponds\n\t\trepeated Result results = 2;\t// List of device results on the rank\n\t}\n\trepeated RankResp ranks = 1;\t\t// List of per-rank responses\n}\n"
    }
  ]
}

### List of All File Paths ###
{
  ".clang-format": null,
  ".dockerignore": null,
  ".flake8": null,
  ".flake8-scons": null,
  ".rpmignore": null,
  ".yamllint.yaml": null,
  "CONTRIBUTING.md": null,
  "Doxyfile": null,
  "Jenkinsfile": null,
  "LICENSE": null,
  "NOTICE": null,
  "README.md": null,
  "SConstruct": null,
  "TAG": null,
  "VERSION": null,
  "ci": {
    "bandit.config": null,
    "bullseye_generate_report.sh": null,
    "codespell.ignores": null,
    "coverity": {
      "model_file.c": null
    },
    "coverity_success.sh": null,
    "coverity_unsuccessful.sh": null,
    "daos-doxygen-matcher.json": null,
    "daos-flake-matcher.json": null,
    "daos-flakee-matcher.json": null,
    "daos-flakew-matcher.json": null,
    "doc_only_change.sh": null,
    "docker": {
      "Dockerfile.maldet.el.8": null,
      "Dockerfile.maldet.leap.15": null
    },
    "docker_nlt.sh": null,
    "functional": {
      "job_cleanup.sh": null,
      "junit_list_unsuccessful": null,
      "launchable_analysis": null,
      "setup_nfs.sh": null,
      "test_main.sh": null,
      "test_main_node.sh": null,
      "test_main_prep_node.sh": null
    },
    "gha_helper.py": null,
    "jira_query.py": null,
    "junit.sh": null,
    "parse_ci_envs.sh": null,
    "patch_src_in_place": null,
    "provisioning": {
      "log_cleanup.sh": null,
      "log_cleanup_nodes.sh": null,
      "post_provision_config.sh": null,
      "post_provision_config_common.sh": null,
      "post_provision_config_common_functions.sh": null,
      "post_provision_config_nodes.sh": null,
      "post_provision_config_nodes_EL_7.sh": null,
      "post_provision_config_nodes_EL_8.sh": null,
      "post_provision_config_nodes_LEAP_15.sh": null,
      "post_provision_config_nodes_UBUNTU_20_04.sh": null
    },
    "python_bandit_check.sh": null,
    "rpm": {
      "build.sh": null,
      "build_success.sh": null,
      "build_unsuccessful.sh": null,
      "test_daos.sh": null,
      "test_daos_node.sh": null
    },
    "stacktrace.sh": null,
    "storage": {
      "test_main.sh": null,
      "test_main_storage_prepare_node.sh": null
    },
    "test_files_to_stash.txt": null,
    "unit": {
      "required_packages.sh": null,
      "test_main.sh": null,
      "test_main_node.sh": null,
      "test_nlt.sh": null,
      "test_nlt_node.sh": null,
      "test_nlt_post.sh": null,
      "test_post_always.sh": null,
      "test_post_always_node.sh": null
    }
  },
  "debian": {
    "changelog": null,
    "compat": null,
    "control": null,
    "copyright": null,
    "daos-admin.dirs": null,
    "daos-admin.install": null,
    "daos-client-tests-openmpi.install": null,
    "daos-client-tests.dirs": null,
    "daos-client-tests.install": null,
    "daos-client.dirs": null,
    "daos-client.install": null,
    "daos-client.preinst": null,
    "daos-server-tests.install": null,
    "daos-server.dirs": null,
    "daos-server.install": null,
    "daos-server.postinst": null,
    "daos-server.preinst": null,
    "daos.dirs": null,
    "daos.install": null,
    "libdaos-dev.dirs": null,
    "libdaos-dev.install": null,
    "libdaos0.dirs": null,
    "libdaos0.install": null,
    "rules": null,
    "source": {
      "format": null,
      "options": null
    }
  },
  "docs": {
    "QSG": {
      "build_from_scratch.md": null,
      "cloud.md": null,
      "docker.md": null,
      "setup_rhel.md": null,
      "setup_suse.md": null,
      "tour.md": null
    },
    "admin": {
      "README.md": null,
      "administration.md": null,
      "common_tasks.md": null,
      "deployment.md": null,
      "env_variables.md": null,
      "hardware.md": null,
      "media": {
        "Fig_073.png": null,
        "Fig_074.png": null,
        "Fig_075.png": null,
        "image1.png": null,
        "image2.png": null
      },
      "nondefault-agent-socket.txt": null,
      "performance_tuning.md": null,
      "pool_operations.md": null,
      "predeployment_check.md": null,
      "tiering_uns.md": null,
      "troubleshooting.md": null,
      "ucx.md": null,
      "vmd.md": null
    },
    "cloud": {
      "index.md": null
    },
    "daos_logo.png": null,
    "daos_logo_wh.png": null,
    "debugging.md": null,
    "dev": {
      "contributing.md": null,
      "development.md": null
    },
    "graph": {
      "Blobstore_State_Transitions.PNG": null,
      "Fig_002.png": null,
      "Fig_007.png": null,
      "Fig_011.png": null,
      "Fig_012.png": null,
      "Fig_016.png": null,
      "Fig_017.png": null,
      "Fig_018.png": null,
      "Fig_021.png": null,
      "Fig_039.png": null,
      "Fig_040.png": null,
      "Fig_041.png": null,
      "Fig_042.png": null,
      "Fig_043.png": null,
      "Fig_044.png": null,
      "Fig_045.png": null,
      "Fig_046.png": null,
      "Fig_047.png": null,
      "Fig_048.png": null,
      "Fig_049.png": null,
      "Fig_050.png": null,
      "Fig_051.png": null,
      "Fig_052.png": null,
      "Fig_053.png": null,
      "Fig_054.png": null,
      "Fig_055.png": null,
      "Fig_056.png": null,
      "Fig_057.png": null,
      "Fig_058.png": null,
      "Fig_059.png": null,
      "Fig_060.png": null,
      "Fig_061.png": null,
      "Fig_062.png": null,
      "Fig_064.png": null,
      "Fig_065.png": null,
      "Fig_066.png": null,
      "Fig_067.png": null,
      "Fig_070.png": null,
      "Fig_071.png": null,
      "Fig_072.png": null,
      "Fig_073.png": null,
      "Fig_074.png": null,
      "Intel_VMD.png": null,
      "NVME_Threading_Model_Final.PNG": null,
      "Untitled-1.png": null,
      "VMD_Amber_LED.png": null,
      "VMD_LED_states.png": null,
      "container_snapshots.png": null,
      "containers.png": null,
      "daos_abstractions.png": null,
      "daosshellfwupdate.svg": null,
      "daosshellnamespaces.svg": null,
      "data_integrity": {
        "array_example_1.png": null,
        "array_example_2.png": null,
        "array_with_chunks.png": null,
        "basic_checksum_flow.png": null,
        "unaligned_request.png": null
      },
      "dmg_device_states.png": null,
      "layering.png": null,
      "pool_component_state_transition_diagram.gv": null,
      "pool_component_state_transition_diagram.png": null,
      "posix.png": null,
      "producer_consumer.png": null,
      "server_format_flow.png": null,
      "services.png": null,
      "storage_format_detail.png": null,
      "system_architecture.png": null,
      "uncertainty.png": null
    },
    "index.md": null,
    "overview": {
      "architecture.md": null,
      "data_integrity.md": null,
      "fault.md": null,
      "security.md": null,
      "storage.md": null,
      "terminology.md": null,
      "transaction.md": null,
      "use_cases.md": null
    },
    "release": {
      "release_notes.md": null,
      "support_matrix.md": null,
      "upgrading.md": null
    },
    "testing": {
      "autotest.md": null,
      "datamover.md": null,
      "dbench.md": null,
      "ior.md": null
    },
    "user": {
      "blockdev.md": null,
      "container.md": null,
      "datamover.md": null,
      "filesystem.md": null,
      "hdf5.md": null,
      "interface.md": null,
      "mpi-io.md": null,
      "multi-user-dfuse.md": null,
      "python.md": null,
      "spark.md": null,
      "tensorflow.md": null,
      "workflow.md": null
    }
  },
  "ftest.sh": null,
  "mkdocs.yml": null,
  "requirements.txt": null,
  "site_scons": {
    "components": {
      "__init__.py": null
    },
    "env_modules.py": null,
    "prereq_tools": {
      "__init__.py": null,
      "base.py": null,
      "c_source": {
        "cmocka_tests.h": null,
        "unit_test.c": null,
        "unit_test.h": null
      }
    },
    "site_tools": {
      "compiler_setup.py": null,
      "daos_builder.py": null,
      "doneapi.py": null,
      "extra": {
        "__init__.py": null,
        "extra.py": null
      },
      "go_builder.py": null,
      "protoc": {
        "__init__.py": null
      },
      "stack_analyzer.py": null
    }
  },
  "src": {
    "README.md": null,
    "SConscript": null,
    "bio": {
      "README.md": null,
      "SConscript": null,
      "bio_buffer.c": null,
      "bio_bulk.c": null,
      "bio_config.c": null,
      "bio_context.c": null,
      "bio_device.c": null,
      "bio_internal.h": null,
      "bio_monitor.c": null,
      "bio_recovery.c": null,
      "bio_wal.c": null,
      "bio_wal.h": null,
      "bio_xstream.c": null,
      "smd": {
        "SConscript": null,
        "smd_device.c": null,
        "smd_internal.h": null,
        "smd_pool.c": null,
        "smd_store.c": null,
        "tests": {
          "SConscript": null,
          "smd_ut.c": null
        }
      },
      "smd.pb-c.c": null,
      "smd.pb-c.h": null
    },
    "cart": {
      "README.env": null,
      "README.md": null,
      "README.swifi": null,
      "SConscript": null,
      "crt_bulk.c": null,
      "crt_context.c": null,
      "crt_corpc.c": null,
      "crt_ctl.c": null,
      "crt_debug.c": null,
      "crt_debug.h": null,
      "crt_group.c": null,
      "crt_group.h": null,
      "crt_hg.c": null,
      "crt_hg.h": null,
      "crt_hg_proc.c": null,
      "crt_init.c": null,
      "crt_internal.h": null,
      "crt_internal_fns.h": null,
      "crt_internal_types.h": null,
      "crt_iv.c": null,
      "crt_register.c": null,
      "crt_rpc.c": null,
      "crt_rpc.h": null,
      "crt_self_test.h": null,
      "crt_self_test_client.c": null,
      "crt_self_test_service.c": null,
      "crt_swim.c": null,
      "crt_swim.h": null,
      "crt_tree.c": null,
      "crt_tree.h": null,
      "crt_tree_flat.c": null,
      "crt_tree_kary.c": null,
      "crt_tree_knomial.c": null,
      "macro_prefix.h_in": null,
      "multi-node-test.sh": null,
      "swim": {
        "SConscript": null,
        "swim.c": null,
        "swim_internal.h": null
      },
      "utils": {
        "SConscript": null,
        "crt_utils.c": null,
        "crt_utils.h": null,
        "fault-inject-cart.yaml": null,
        "memcheck-cart.supp": null
      }
    },
    "client": {
      "README.md": null,
      "SConscript": null,
      "api": {
        "README.md": null,
        "SConscript": null,
        "agent.c": null,
        "array.c": null,
        "client_internal.h": null,
        "container.c": null,
        "event.c": null,
        "init.c": null,
        "job.c": null,
        "kv.c": null,
        "mgmt.c": null,
        "object.c": null,
        "pipeline.c": null,
        "pool.c": null,
        "rpc.c": null,
        "task.c": null,
        "task_internal.h": null,
        "tests": {
          "SConscript": null,
          "agent_tests.c": null,
          "eq_tests.c": null,
          "job_tests.c": null
        },
        "tx.c": null
      },
      "array": {
        "README.md": null,
        "SConscript": null,
        "dc_array.c": null
      },
      "dfs": {
        "README.md": null,
        "SConscript": null,
        "dfs.c": null,
        "dfs_internal.c": null,
        "dfs_internal.h": null,
        "dfs_sys.c": null,
        "duns.c": null
      },
      "dfuse": {
        "SConscript": null,
        "dfuse.h": null,
        "dfuse_common.h": null,
        "dfuse_cont.c": null,
        "dfuse_core.c": null,
        "dfuse_fuseops.c": null,
        "dfuse_log.h": null,
        "dfuse_main.c": null,
        "dfuse_obj_da.c": null,
        "dfuse_obj_da.h": null,
        "dfuse_pool.c": null,
        "dfuse_thread.c": null,
        "dfuse_vector.c": null,
        "dfuse_vector.h": null,
        "il": {
          "gen_script.c": null,
          "int_posix.c": null,
          "int_read.c": null,
          "int_write.c": null,
          "intercept.h": null,
          "ioil.h": null,
          "ioil_api.h": null,
          "ioil_defines.h": null,
          "ioil_io.h": null
        },
        "ops": {
          "create.c": null,
          "fgetattr.c": null,
          "forget.c": null,
          "getxattr.c": null,
          "ioctl.c": null,
          "listxattr.c": null,
          "lookup.c": null,
          "mknod.c": null,
          "open.c": null,
          "opendir.c": null,
          "read.c": null,
          "readdir.c": null,
          "readlink.c": null,
          "removexattr.c": null,
          "rename.c": null,
          "setattr.c": null,
          "setxattr.c": null,
          "statfs.c": null,
          "symlink.c": null,
          "unlink.c": null,
          "write.c": null
        },
        "pil4dfs": {
          "hook.c": null,
          "hook.h": null,
          "hook_int.h": null,
          "int_dfs.c": null
        }
      },
      "ds3": {
        "README.md": null,
        "SConscript": null,
        "bucket.c": null,
        "ds3_internal.h": null,
        "multipart.c": null,
        "object.c": null,
        "pool.c": null,
        "user.c": null
      },
      "java": {
        "README.md": null,
        "daos-java": {
          "find_build_paths.sh": null,
          "find_java_home.sh": null,
          "pom.xml": null,
          "src": {
            "main": {
              "java": {
                "io": {
                  "daos": {
                    "BufferAllocator.java": null,
                    "Constants.java": null,
                    "DaosClient.java": null,
                    "DaosContainer.java": null,
                    "DaosEventQueue.java": null,
                    "DaosIOException.java": null,
                    "DaosObjClassHint.java": null,
                    "DaosObjectClass.java": null,
                    "DaosObjectType.java": null,
                    "DaosPool.java": null,
                    "DaosUtils.java": null,
                    "ErrorCode.java": null,
                    "ForceCloseable.java": null,
                    "Shareable.java": null,
                    "ShareableClient.java": null,
                    "ShutdownHookManager.java": null,
                    "TimedOutException.java": null,
                    "dfs": {
                      "Cleaner.java": null,
                      "DaosFile.java": null,
                      "DaosFsClient.java": null,
                      "DaosUns.java": null,
                      "DunsInfo.java": null,
                      "IODfsDesc.java": null,
                      "StatAttributes.java": null,
                      "package-info.java": null,
                      "uns": {
                        "DunsAttribute.java": null,
                        "DunsAttributeOrBuilder.java": null,
                        "DunsClasses.java": null,
                        "Layout.java": null
                      }
                    },
                    "obj": {
                      "DaosObjClient.java": null,
                      "DaosObject.java": null,
                      "DaosObjectException.java": null,
                      "DaosObjectId.java": null,
                      "IODataDesc.java": null,
                      "IODataDescBase.java": null,
                      "IODataDescSync.java": null,
                      "IODescUpdAsync.java": null,
                      "IODescUpdBase.java": null,
                      "IODescUpdSync.java": null,
                      "IOKeyDesc.java": null,
                      "IOSimpleDDAsync.java": null,
                      "IOSimpleDataDesc.java": null,
                      "OpenMode.java": null,
                      "SimpleDataDescGrp.java": null,
                      "attr": {
                        "DaosEcAttr.java": null,
                        "DaosEcAttrOrBuilder.java": null,
                        "DaosObjAttrClasses.java": null,
                        "DaosObjResil.java": null,
                        "DaosObjSchema.java": null,
                        "DaosObjectAttribute.java": null,
                        "DaosObjectAttributeOrBuilder.java": null,
                        "DaosOclassAttr.java": null,
                        "DaosOclassAttrOrBuilder.java": null,
                        "DaosRpAttr.java": null,
                        "DaosRpAttrOrBuilder.java": null
                      }
                    }
                  }
                }
              },
              "native": {
                "DaosObjectAttribute.pb-c.c": null,
                "DunsAttribute.pb-c.c": null,
                "daos_jni_common.c": null,
                "include": {
                  "DaosObjectAttribute.pb-c.h": null,
                  "DunsAttribute.pb-c.h": null,
                  "daos_jni_common.h": null
                },
                "io_daos_DaosClient.c": null,
                "io_daos_dfs_DaosFsClient.c": null,
                "io_daos_obj_DaosObjClient.c": null
              },
              "resources": {
                "DaosObjectAttribute.proto": null,
                "DunsAttribute.proto": null,
                "log4j2.xml": null
              }
            },
            "test": {
              "java": {
                "io": {
                  "daos": {
                    "BufferAllocatorTest.java": null,
                    "DaosClientTest.java": null,
                    "DaosIOExceptionTest.java": null,
                    "DaosTestBase.java": null,
                    "DaosUtilsTest.java": null,
                    "ShareableClientIT.java": null,
                    "dfs": {
                      "DaosClientIT.java": null,
                      "DaosFileIT.java": null,
                      "DaosFileMultiThreadsIT.java": null,
                      "DaosFilePathTest.java": null,
                      "DaosFsClientIT.java": null,
                      "DaosFsClientTestBase.java": null,
                      "DaosUnsIT.java": null,
                      "DaosUnsTest.java": null,
                      "IODfsDescIT.java": null
                    },
                    "obj": {
                      "DaosObjectIT.java": null,
                      "DaosObjectIdTest.java": null,
                      "DaosObjectTest.java": null,
                      "DescDDAsyncMain.java": null,
                      "DescSimpleMain.java": null,
                      "IODataDescSyncTest.java": null,
                      "IOKeyDescTest.java": null,
                      "NettyAllocationTest.java": null,
                      "PerfResult.java": null,
                      "ReusableDescMain.java": null
                    },
                    "zCleanerIT.java": null
                  }
                }
              }
            }
          }
        },
        "dev": {
          "checkstyle": {
            "checkstyle.license": null,
            "checkstyle.xml": null,
            "configuration_1_3.dtd": null,
            "suppressions.xml": null,
            "suppressions_1_2.dtd": null
          }
        },
        "distribution": {
          "pom.xml": null,
          "src": {
            "assembly": {
              "make-assembly-with-dependencies.xml": null,
              "make-assembly-with-proto3-netty4-deps.xml": null,
              "make-assembly.xml": null
            }
          }
        },
        "hadoop-daos": {
          "pom.xml": null,
          "src": {
            "main": {
              "java": {
                "io": {
                  "daos": {
                    "fs": {
                      "hadoop": {
                        "Constants.java": null,
                        "DaosAbsFsImpl.java": null,
                        "DaosConfigException.java": null,
                        "DaosFileSource.java": null,
                        "DaosFileSourceAsync.java": null,
                        "DaosFileSourceSync.java": null,
                        "DaosFileSystem.java": null,
                        "DaosFsConfig.java": null,
                        "DaosInputStream.java": null,
                        "DaosOutputStream.java": null,
                        "HadoopDaosUtils.java": null,
                        "package-info.java": null
                      }
                    }
                  }
                }
              },
              "resources": {
                "META-INF": {
                  "services": {
                    "org.apache.hadoop.fs.FileSystem": null
                  }
                },
                "core-site-daos-ref.xml": null,
                "daos-config.txt": null,
                "log4j2.xml": null
              }
            },
            "test": {
              "java": {
                "io": {
                  "daos": {
                    "fs": {
                      "hadoop": {
                        "DaosFSFactory.java": null,
                        "DaosFileSourceAsyncIT.java": null,
                        "DaosFileSystemAsyncIT.java": null,
                        "DaosFileSystemContractIT.java": null,
                        "DaosFileSystemIT.java": null,
                        "DaosFileSystemTest.java": null,
                        "DaosFsConfigTest.java": null,
                        "DaosHadoopTestUtils.java": null,
                        "DaosInputStreamAsyncTest.java": null,
                        "DaosInputStreamIT.java": null,
                        "DaosInputStreamTest.java": null,
                        "DaosOutputStreamIT.java": null,
                        "DaosOutputStreamTest.java": null,
                        "HadoopCmdIT.java": null,
                        "contract": {
                          "DaosContractAppendAsyncIT.java": null,
                          "DaosContractAppendIT.java": null,
                          "DaosContractCreateAsyncIT.java": null,
                          "DaosContractCreateIT.java": null,
                          "DaosContractDeleteIT.java": null,
                          "DaosContractIT.java": null,
                          "DaosContractMkdirIT.java": null,
                          "DaosContractOpenAsyncIT.java": null,
                          "DaosContractOpenIT.java": null,
                          "DaosContractRenameIT.java": null,
                          "DaosContractRootDirIT.java": null,
                          "DaosContractSeekAsyncIT.java": null,
                          "DaosContractSeekIT.java": null
                        },
                        "multiple": {
                          "ConcurrentFileOperationIT.java": null,
                          "MultipleDaosOpenFileIT.java": null
                        },
                        "perf": {
                          "Main.java": null,
                          "Test.java": null
                        }
                      }
                    }
                  }
                }
              },
              "resources": {
                "auth-keys.xml": null,
                "contract": {
                  "daos.xml": null
                },
                "core-site.xml": null,
                "java-test.sh": null,
                "mockito-extensions": {
                  "org.mockito.plugins.MockMaker": null
                },
                "run-java-test.sh": null
              }
            }
          }
        },
        "pom.xml": null
      },
      "kv": {
        "README.md": null,
        "SConscript": null,
        "dc_kv.c": null
      },
      "pydaos": {
        "SConscript": null,
        "__init__.py": null,
        "pydaos_core.py": null,
        "pydaos_shim.c": null,
        "raw": {
          "README.md": null,
          "__init__.py": null,
          "conversion.py": null,
          "daos_api.py": null,
          "daos_cref.py": null
        }
      },
      "serialize": {
        "SConscript": null,
        "daos_serialize.c": null
      },
      "setup.py": null
    },
    "common": {
      "README.md": null,
      "SConscript": null,
      "acl_api.c": null,
      "acl_principal.c": null,
      "acl_util.c": null,
      "ad_mem.c": null,
      "ad_mem.h": null,
      "ad_tx.c": null,
      "btree.c": null,
      "btree_class.c": null,
      "checksum.c": null,
      "cipher.c": null,
      "cipher_isal.c": null,
      "cmd_parser.c": null,
      "compression.c": null,
      "compression_isal.c": null,
      "compression_qat.c": null,
      "cont_props.c": null,
      "control.c": null,
      "credit.c": null,
      "dav": {
        "README.md": null,
        "alloc_class.c": null,
        "alloc_class.h": null,
        "bucket.c": null,
        "bucket.h": null,
        "container.h": null,
        "container_ravl.c": null,
        "container_seglists.c": null,
        "critnib.c": null,
        "critnib.h": null,
        "dav.h": null,
        "dav_clogs.c": null,
        "dav_clogs.h": null,
        "dav_iface.c": null,
        "dav_internal.h": null,
        "heap.c": null,
        "heap.h": null,
        "heap_layout.h": null,
        "memblock.c": null,
        "memblock.h": null,
        "memops.c": null,
        "memops.h": null,
        "mo_wal.h": null,
        "obj.h": null,
        "os_thread.h": null,
        "os_thread_posix.c": null,
        "out.h": null,
        "palloc.c": null,
        "palloc.h": null,
        "queue.h": null,
        "ravl.c": null,
        "ravl.h": null,
        "ravl_interval.c": null,
        "ravl_interval.h": null,
        "recycler.c": null,
        "recycler.h": null,
        "stats.c": null,
        "stats.h": null,
        "sys_util.h": null,
        "tx.c": null,
        "tx.h": null,
        "ulog.c": null,
        "ulog.h": null,
        "util.c": null,
        "util.h": null,
        "valgrind_internal.h": null,
        "vec.h": null,
        "vecq.h": null,
        "wal_tx.c": null,
        "wal_tx.h": null
      },
      "debug.c": null,
      "dedup.c": null,
      "drpc.c": null,
      "drpc.pb-c.c": null,
      "fail_loc.c": null,
      "fault_domain.c": null,
      "fault_domain.h": null,
      "lru.c": null,
      "mem.c": null,
      "misc.c": null,
      "multihash.c": null,
      "multihash_isal.c": null,
      "policy.c": null,
      "pool_map.c": null,
      "proc.c": null,
      "profile.c": null,
      "prop.c": null,
      "qat.c": null,
      "rsvc.c": null,
      "sort.c": null,
      "stack_mmap.c": null,
      "tests": {
        "SConscript": null,
        "abt_perf.c": null,
        "acl_api_tests.c": null,
        "acl_principal_tests.c": null,
        "acl_util_real_tests.c": null,
        "acl_util_tests.c": null,
        "acl_valid_tests.c": null,
        "ad_mem_tests.c": null,
        "btree.c": null,
        "btree.sh": null,
        "btree_direct.c": null,
        "checksum_tests.c": null,
        "checksum_timing.c": null,
        "common-mock-ld-opts": null,
        "common_test.c": null,
        "common_test.h": null,
        "compress_tests.c": null,
        "compress_timing.c": null,
        "drpc_tests.c": null,
        "fault_domain_tests.c": null,
        "lru.c": null,
        "misc_tests.c": null,
        "other.c": null,
        "policy_tests.c": null,
        "prop_tests.c": null,
        "sched.c": null,
        "test_mocks.c": null,
        "test_utils.c": null,
        "umem_test.c": null,
        "umem_test_bmem.c": null,
        "utest_common.c": null,
        "utest_common.h": null
      },
      "tests_dmg_helpers.c": null,
      "tests_lib.c": null,
      "tse.c": null,
      "tse_internal.h": null
    },
    "container": {
      "README.md": null,
      "SConscript": null,
      "cli.c": null,
      "cli_internal.h": null,
      "container_iv.c": null,
      "oid_iv.c": null,
      "rpc.c": null,
      "rpc.h": null,
      "srv.c": null,
      "srv_cli.c": null,
      "srv_container.c": null,
      "srv_epoch.c": null,
      "srv_internal.h": null,
      "srv_layout.c": null,
      "srv_layout.h": null,
      "srv_metrics.c": null,
      "srv_oi_table.c": null,
      "srv_target.c": null
    },
    "control": {
      "README.md": null,
      "SConscript": null,
      "build": {
        "errors.go": null,
        "info.go": null,
        "interop.go": null,
        "interop_test.go": null,
        "string.go": null,
        "variables.go": null,
        "version.go": null,
        "version_test.go": null
      },
      "cmd": {
        "daos": {
          "README.md": null,
          "acl.go": null,
          "attribute.go": null,
          "container.go": null,
          "container_test.go": null,
          "filesystem.go": null,
          "flags.go": null,
          "flags_test.go": null,
          "main.go": null,
          "object.go": null,
          "pool.go": null,
          "property.go": null,
          "property_test.go": null,
          "snapshot.go": null,
          "system.go": null,
          "util.c": null,
          "util.go": null,
          "util.h": null
        },
        "daos_agent": {
          "README.md": null,
          "attachinfo.go": null,
          "config.go": null,
          "config_test.go": null,
          "fabric.go": null,
          "fabric_test.go": null,
          "infocache.go": null,
          "infocache_test.go": null,
          "main.go": null,
          "mgmt_rpc.go": null,
          "mgmt_rpc_test.go": null,
          "network.go": null,
          "network_test.go": null,
          "procmon.go": null,
          "security_rpc.go": null,
          "security_rpc_test.go": null,
          "start.go": null,
          "support.go": null
        },
        "daos_firmware_helper": {
          "handler.go": null,
          "handler_test.go": null,
          "main.go": null
        },
        "daos_server": {
          "README.md": null,
          "auto.go": null,
          "auto_test.go": null,
          "command_test.go": null,
          "config.go": null,
          "main.go": null,
          "ms_recovery.go": null,
          "network.go": null,
          "start.go": null,
          "start_test.go": null,
          "storage_legacy.go": null,
          "storage_legacy_test.go": null,
          "storage_nvme.go": null,
          "storage_nvme_test.go": null,
          "storage_scm.go": null,
          "storage_scm_test.go": null,
          "storage_utils.go": null,
          "support.go": null
        },
        "daos_server_helper": {
          "README.md": null,
          "handler.go": null,
          "handler_test.go": null,
          "main.go": null
        },
        "dmg": {
          "README.md": null,
          "auto.go": null,
          "auto_test.go": null,
          "command_test.go": null,
          "cont.go": null,
          "cont_test.go": null,
          "firmware.go": null,
          "firmware_test.go": null,
          "json_test.go": null,
          "main.go": null,
          "network.go": null,
          "network_test.go": null,
          "pool.go": null,
          "pool_properties.go": null,
          "pool_test.go": null,
          "pretty": {
            "firmware.go": null,
            "firmware_test.go": null,
            "network.go": null,
            "pool.go": null,
            "pool_test.go": null,
            "printers.go": null,
            "printers_test.go": null,
            "ranks.go": null,
            "server.go": null,
            "server_test.go": null,
            "storage.go": null,
            "storage_nvme.go": null,
            "storage_nvme_test.go": null,
            "storage_scm.go": null,
            "storage_scm_test.go": null,
            "storage_test.go": null,
            "system.go": null,
            "system_test.go": null,
            "telemetry.go": null,
            "telemetry_test.go": null
          },
          "server.go": null,
          "server_test.go": null,
          "storage.go": null,
          "storage_query.go": null,
          "storage_query_test.go": null,
          "storage_test.go": null,
          "support.go": null,
          "system.go": null,
          "system_test.go": null,
          "telemetry.go": null,
          "telemetry_test.go": null,
          "utils.go": null,
          "utils_test.go": null
        },
        "hello_drpc": {
          "hello": {
            "drpc_test.pb.go": null,
            "drpc_test_module.go": null
          },
          "main.go": null
        }
      },
      "common": {
        "README.md": null,
        "archive.go": null,
        "cmdutil": {
          "json.go": null,
          "logging.go": null,
          "manpage.go": null,
          "no_args.go": null
        },
        "collection_utils.go": null,
        "collection_utils_test.go": null,
        "env_utils.go": null,
        "env_utils_test.go": null,
        "file_utils.go": null,
        "file_utils_test.go": null,
        "loglevel.go": null,
        "loglevel_test.go": null,
        "meminfo.go": null,
        "meminfo_test.go": null,
        "net_utils.go": null,
        "net_utils_test.go": null,
        "proc_utils.go": null,
        "proc_utils_test.go": null,
        "proto": {
          "convert": {
            "types.go": null
          },
          "ctl": {
            "addons.go": null,
            "common.pb.go": null,
            "ctl.pb.go": null,
            "ctl_grpc.pb.go": null,
            "firmware.pb.go": null,
            "network.pb.go": null,
            "ranks.pb.go": null,
            "server.pb.go": null,
            "smd.pb.go": null,
            "storage.pb.go": null,
            "storage_nvme.pb.go": null,
            "storage_scm.pb.go": null,
            "support.pb.go": null
          },
          "error.go": null,
          "error_test.go": null,
          "logging.go": null,
          "mgmt": {
            "acl.pb.go": null,
            "addons.go": null,
            "cont.pb.go": null,
            "mgmt.pb.go": null,
            "mgmt_grpc.pb.go": null,
            "pool.pb.go": null,
            "svc.pb.go": null,
            "system.pb.go": null
          },
          "mocks.go": null,
          "shared": {
            "event.pb.go": null,
            "ranks.pb.go": null
          },
          "srv": {
            "srv.pb.go": null
          },
          "types.go": null,
          "types_test.go": null
        },
        "test": {
          "mocks.go": null,
          "utils.go": null
        },
        "time_utils.go": null,
        "time_utils_test.go": null,
        "types.go": null,
        "types_test.go": null,
        "user_utils.go": null
      },
      "drpc": {
        "README.md": null,
        "drpc.pb.go": null,
        "drpc_client.go": null,
        "drpc_client_test.go": null,
        "drpc_server.go": null,
        "drpc_server_test.go": null,
        "failure.go": null,
        "failure_test.go": null,
        "mocks_test.go": null,
        "module_svc.go": null,
        "module_svc_test.go": null,
        "modules.go": null,
        "modules_test.go": null
      },
      "events": {
        "README.md": null,
        "engine.go": null,
        "engine_test.go": null,
        "generic.go": null,
        "generic_test.go": null,
        "psr_update.go": null,
        "psr_update_test.go": null,
        "pubsub.go": null,
        "pubsub_test.go": null,
        "ras.go": null,
        "ras_test.go": null
      },
      "fault": {
        "code": {
          "codes.go": null
        },
        "fault.go": null,
        "fault_test.go": null
      },
      "go.mod": null,
      "go.sum": null,
      "lib": {
        "atm": {
          "bool.go": null,
          "bool_test.go": null
        },
        "cache": {
          "cache.go": null,
          "cache_test.go": null
        },
        "control": {
          "README.md": null,
          "acl.go": null,
          "acl_test.go": null,
          "auto.go": null,
          "auto_test.go": null,
          "config.go": null,
          "config_test.go": null,
          "cont.go": null,
          "cont_test.go": null,
          "control.go": null,
          "doc.go": null,
          "errors.go": null,
          "event.go": null,
          "event_test.go": null,
          "faults.go": null,
          "firmware.go": null,
          "firmware_test.go": null,
          "hostlist.go": null,
          "hostlist_test.go": null,
          "http.go": null,
          "http_test.go": null,
          "interceptors.go": null,
          "mocks.go": null,
          "network.go": null,
          "network_test.go": null,
          "pool.go": null,
          "pool_acl.go": null,
          "pool_acl_test.go": null,
          "pool_test.go": null,
          "pprof.go": null,
          "pprof_stub.go": null,
          "request.go": null,
          "response.go": null,
          "response_test.go": null,
          "rpc.go": null,
          "rpc_test.go": null,
          "server.go": null,
          "server_meta.go": null,
          "server_meta_test.go": null,
          "server_test.go": null,
          "storage.go": null,
          "storage_test.go": null,
          "support.go": null,
          "system.go": null,
          "system_test.go": null,
          "telemetry.go": null,
          "telemetry_test.go": null
        },
        "daos": {
          "acl.go": null,
          "constants.go": null,
          "hlc.go": null,
          "hlc_test.go": null,
          "pool_cont_prop.go": null,
          "pool_cont_prop_test.go": null,
          "pool_property.go": null,
          "pool_property_test.go": null,
          "status.go": null,
          "status_test.go": null,
          "system_prop.go": null,
          "system_prop_test.go": null
        },
        "dlopen": {
          "dlopen.go": null,
          "dlopen_example.go": null,
          "dlopen_test.go": null
        },
        "hardware": {
          "errors.go": null,
          "errors_test.go": null,
          "fabric.go": null,
          "fabric_test.go": null,
          "hwloc": {
            "bindings.go": null,
            "provider.go": null,
            "provider_test.go": null,
            "testdata": {
              "boro-84.xml": null,
              "gcp_topology.xml": null,
              "multiport_hfi_topology.xml": null,
              "no-numa-no-devices.xml": null,
              "no-numa-nodes.xml": null,
              "tds-0002.xml": null,
              "wolf-133.xml": null
            }
          },
          "hwprov": {
            "defaults.go": null,
            "defaults_test.go": null,
            "topology_cmd.go": null
          },
          "iommu.go": null,
          "libfabric": {
            "bindings.go": null,
            "provider.go": null,
            "provider_test.go": null
          },
          "mocks.go": null,
          "pci.go": null,
          "pci_test.go": null,
          "pretty.go": null,
          "pretty_test.go": null,
          "sysfs": {
            "provider.go": null,
            "provider_test.go": null
          },
          "topology.go": null,
          "topology_test.go": null,
          "ucx": {
            "bindings.go": null,
            "bindings_test.go": null,
            "disabled_bindings.go": null,
            "ucx.go": null,
            "ucx_interfaces_test.go": null,
            "ucx_test.go": null
          }
        },
        "hostlist": {
          "api.go": null,
          "api_test.go": null,
          "fuzz.go": null,
          "hostgroup.go": null,
          "hostlist.go": null,
          "hostlist_test.go": null,
          "hostrange.go": null,
          "hostset.go": null,
          "hostset_test.go": null,
          "numericlist.go": null,
          "numericlist_test.go": null
        },
        "ipmctl": {
          "README.md": null,
          "nvm.go": null,
          "nvm_ctest_linux_amd64.go": null,
          "nvm_linux_amd64.go": null,
          "nvm_stubs.go": null,
          "nvm_test.go": null,
          "nvm_types.go": null,
          "nvm_types_linux_amd64.go": null
        },
        "ranklist": {
          "rank.go": null,
          "rank_test.go": null,
          "ranklist.go": null,
          "ranklist_test.go": null
        },
        "spdk": {
          "README.md": null,
          "SConscript": null,
          "ctests": {
            "SConscript": null,
            "nvme_control_ut.c": null
          },
          "faults.go": null,
          "include": {
            "nvme_control.h": null,
            "nvme_control_common.h": null
          },
          "mocks.go": null,
          "nvme.go": null,
          "nvme_default.go": null,
          "nvme_stubs.go": null,
          "nvme_test.go": null,
          "spdk.go": null,
          "spdk_default.go": null,
          "spdk_stubs.go": null,
          "src": {
            "nvme_control.c": null,
            "nvme_control_common.c": null
          }
        },
        "support": {
          "log.go": null,
          "log_test.go": null
        },
        "systemd": {
          "notify.go": null,
          "notify_linux.go": null,
          "notify_test.go": null
        },
        "telemetry": {
          "counter.go": null,
          "counter_test.go": null,
          "duration.go": null,
          "duration_test.go": null,
          "gauge.go": null,
          "gauge_test.go": null,
          "promexp": {
            "collector.go": null,
            "collector_test.go": null
          },
          "snapshot.go": null,
          "snapshot_test.go": null,
          "telemetry.go": null,
          "telemetry_test.go": null,
          "test_helpers.go": null,
          "timestamp.go": null,
          "timestamp_test.go": null
        },
        "txtfmt": {
          "entity.go": null,
          "entity_test.go": null,
          "table.go": null,
          "table_test.go": null,
          "writer.go": null,
          "writer_test.go": null
        },
        "ui": {
          "acl.go": null,
          "acl_test.go": null,
          "id_flags.go": null,
          "id_flags_test.go": null,
          "list_flags.go": null,
          "list_flags_test.go": null,
          "prop_flags.go": null,
          "prop_flags_test.go": null
        }
      },
      "logging": {
        "debug.go": null,
        "defaults.go": null,
        "error.go": null,
        "formatting.go": null,
        "info.go": null,
        "json.go": null,
        "level.go": null,
        "level_test.go": null,
        "logger.go": null,
        "logging_test.go": null,
        "notice.go": null,
        "syslog.go": null,
        "syslog_test.go": null
      },
      "pbin": {
        "app.go": null,
        "app_test.go": null,
        "decode_test.go": null,
        "exec.go": null,
        "exec_test.go": null,
        "faults.go": null,
        "forwarding.go": null,
        "handler.go": null,
        "handler_test.go": null,
        "mocks.go": null,
        "pbin.go": null,
        "pbin_test.go": null,
        "process.go": null,
        "setuid_linux.go": null,
        "stdio.go": null,
        "stdio_test.go": null,
        "testdata": {
          "boro-84-storage_scan.json": null
        }
      },
      "provider": {
        "system": {
          "distribution.go": null,
          "distribution_test.go": null,
          "distros": {
            "centos7.9-os-rel": null,
            "centos7.9-proc-ver": null,
            "centos7.9-rel": null,
            "centos8.3-os-rel": null,
            "centos8.3-proc-ver": null,
            "centos8.3-rel": null,
            "opensuse15.2-os-rel": null,
            "opensuse15.3-os-rel": null,
            "opensuse15.4-os-rel": null,
            "rocky8.5-os-rel": null,
            "sles15sp2-os-rel": null,
            "ubuntu20.04-os-rel": null,
            "ubuntu22.04-os-rel": null
          },
          "mocks.go": null,
          "system.go": null,
          "system_linux.go": null,
          "system_linux_test.go": null
        }
      },
      "run_go_tests.sh": null,
      "security": {
        "README.md": null,
        "auth": {
          "auth.pb.go": null,
          "auth_sys.go": null,
          "auth_sys_test.go": null,
          "mocks.go": null
        },
        "config.go": null,
        "config_test.go": null,
        "domain_info.go": null,
        "domain_info_test.go": null,
        "faults.go": null,
        "grpc_authorization.go": null,
        "grpc_authorization_test.go": null,
        "grpc_cert_configs.go": null,
        "grpc_cert_configs_pre1.15.go": null,
        "grpc_certs.go": null,
        "pem.go": null,
        "pem_test.go": null,
        "signature.go": null,
        "signature_test.go": null,
        "testdata": {
          "certs": {
            "ImproperKey.golden": null,
            "RSA.golden": null,
            "agent.crt": null,
            "agent.key": null,
            "bad.crt": null,
            "bad.key": null,
            "badperms": {
              "README": null
            },
            "badperms.crt": null,
            "badperms.key": null,
            "daosCA.crt": null,
            "daosCA.key": null,
            "goodperms": {
              "README": null
            },
            "notkey.crt": null,
            "server.crt": null,
            "server.key": null,
            "source.txt": null,
            "toomanypem.crt": null,
            "toomanypem.key": null
          }
        }
      },
      "server": {
        "README.md": null,
        "config": {
          "faults.go": null,
          "server.go": null,
          "server_legacy.go": null,
          "server_test.go": null
        },
        "ctl_firmware.go": null,
        "ctl_firmware_test.go": null,
        "ctl_network_rpc.go": null,
        "ctl_network_rpc_test.go": null,
        "ctl_ranks_rpc.go": null,
        "ctl_ranks_rpc_test.go": null,
        "ctl_smd_rpc.go": null,
        "ctl_smd_rpc_test.go": null,
        "ctl_storage.go": null,
        "ctl_storage_rpc.go": null,
        "ctl_storage_rpc_test.go": null,
        "ctl_storage_test.go": null,
        "ctl_support_rpc.go": null,
        "ctl_svc.go": null,
        "ctl_svc_test.go": null,
        "drpc.go": null,
        "drpc_test.go": null,
        "engine": {
          "config.go": null,
          "config_legacy.go": null,
          "config_test.go": null,
          "exec.go": null,
          "exec_test.go": null,
          "mocks.go": null,
          "tags.go": null,
          "tags_test.go": null,
          "testdata": {
            "full.golden": null
          },
          "utils.go": null,
          "utils_test.go": null
        },
        "faultdomain.go": null,
        "faultdomain_test.go": null,
        "faults.go": null,
        "harness.go": null,
        "harness_test.go": null,
        "init": {
          "setup_spdk.sh": null
        },
        "instance.go": null,
        "instance_drpc.go": null,
        "instance_drpc_test.go": null,
        "instance_exec.go": null,
        "instance_exec_test.go": null,
        "instance_storage.go": null,
        "instance_storage_rpc.go": null,
        "instance_storage_test.go": null,
        "instance_superblock.go": null,
        "instance_superblock_test.go": null,
        "instance_test.go": null,
        "interceptors.go": null,
        "interceptors_test.go": null,
        "mgmt_cont.go": null,
        "mgmt_cont_test.go": null,
        "mgmt_drpc.go": null,
        "mgmt_drpc_test.go": null,
        "mgmt_pool.go": null,
        "mgmt_pool_test.go": null,
        "mgmt_svc.go": null,
        "mgmt_svc_test.go": null,
        "mgmt_system.go": null,
        "mgmt_system_test.go": null,
        "mocks.go": null,
        "security_rpc.go": null,
        "security_rpc_test.go": null,
        "server.go": null,
        "server_utils.go": null,
        "server_utils_test.go": null,
        "storage": {
          "bdev": {
            "backend.go": null,
            "backend_class.go": null,
            "backend_class_test.go": null,
            "backend_json.go": null,
            "backend_json_test.go": null,
            "backend_test.go": null,
            "backend_vmd.go": null,
            "backend_vmd_test.go": null,
            "faults.go": null,
            "firmware.go": null,
            "firmware_test.go": null,
            "mocks.go": null,
            "provider.go": null,
            "provider_test.go": null,
            "runner.go": null,
            "runner_test.go": null,
            "syscall_amd64.go": null,
            "syscall_arm64.go": null
          },
          "bdev.go": null,
          "bdev_test.go": null,
          "config.go": null,
          "config_test.go": null,
          "device.go": null,
          "errors.go": null,
          "faults.go": null,
          "metadata": {
            "faults.go": null,
            "provider.go": null,
            "provider_test.go": null
          },
          "metadata.go": null,
          "mocks.go": null,
          "mount": {
            "provider.go": null,
            "provider_test.go": null
          },
          "mount.go": null,
          "provider.go": null,
          "provider_test.go": null,
          "scm": {
            "faults.go": null,
            "firmware.go": null,
            "firmware_test.go": null,
            "ipmctl.go": null,
            "ipmctl_firmware.go": null,
            "ipmctl_firmware_test.go": null,
            "ipmctl_region.go": null,
            "ipmctl_region_test.go": null,
            "ipmctl_test.go": null,
            "mocks.go": null,
            "ndctl.go": null,
            "ndctl_test.go": null,
            "provider.go": null,
            "provider_test.go": null
          },
          "scm.go": null,
          "scm_test.go": null
        },
        "telemetry.go": null,
        "util_test.go": null
      },
      "system": {
        "attributes.go": null,
        "attributes_test.go": null,
        "errors.go": null,
        "faultdomain.go": null,
        "faultdomain_test.go": null,
        "faults.go": null,
        "member.go": null,
        "member_test.go": null,
        "membership.go": null,
        "membership_test.go": null,
        "mocks.go": null,
        "pool.go": null,
        "properties.go": null,
        "properties_test.go": null,
        "raft": {
          "database.go": null,
          "database_members.go": null,
          "database_pools.go": null,
          "database_system.go": null,
          "database_test.go": null,
          "hclogger.go": null,
          "mocks.go": null,
          "pool_lock.go": null,
          "pool_lock_test.go": null,
          "raft.go": null,
          "raft_recovery.go": null,
          "raft_recovery_test.go": null,
          "testdata": {
            "raft_recovery": {
              "daos_system.db": null,
              "snapshots": {
                "2-11-1661529545129": {
                  "meta.json": null,
                  "state.bin": null
                },
                "2-19-1661529546693": {
                  "meta.json": null,
                  "state.bin": null
                }
              }
            }
          }
        },
        "rankgroups.go": null,
        "rankgroups_test.go": null
      },
      "vendor": {
        "github.com": {
          "Jille": {
            "raft-grpc-transport": {
              "LICENSE": null,
              "README.md": null,
              "fromproto.go": null,
              "grpcapi.go": null,
              "proto": {
                "Makefile": null,
                "transport.pb.go": null,
                "transport.proto": null,
                "transport_grpc.pb.go": null
              },
              "raftapi.go": null,
              "toproto.go": null,
              "transport.go": null
            }
          },
          "armon": {
            "go-metrics": {
              ".travis.yml": null,
              "LICENSE": null,
              "README.md": null,
              "const_unix.go": null,
              "const_windows.go": null,
              "inmem.go": null,
              "inmem_endpoint.go": null,
              "inmem_signal.go": null,
              "metrics.go": null,
              "sink.go": null,
              "start.go": null,
              "statsd.go": null,
              "statsite.go": null
            }
          },
          "beorn7": {
            "perks": {
              "LICENSE": null,
              "quantile": {
                "exampledata.txt": null,
                "stream.go": null
              }
            }
          },
          "cespare": {
            "xxhash": {
              "v2": {
                "LICENSE.txt": null,
                "README.md": null,
                "xxhash.go": null,
                "xxhash_amd64.go": null,
                "xxhash_amd64.s": null,
                "xxhash_other.go": null,
                "xxhash_safe.go": null,
                "xxhash_unsafe.go": null
              }
            }
          },
          "dustin": {
            "go-humanize": {
              ".travis.yml": null,
              "LICENSE": null,
              "README.markdown": null,
              "big.go": null,
              "bigbytes.go": null,
              "bytes.go": null,
              "comma.go": null,
              "commaf.go": null,
              "english": {
                "words.go": null
              },
              "ftoa.go": null,
              "humanize.go": null,
              "number.go": null,
              "ordinals.go": null,
              "si.go": null,
              "times.go": null
            }
          },
          "fatih": {
            "color": {
              "LICENSE.md": null,
              "README.md": null,
              "color.go": null,
              "doc.go": null
            }
          },
          "golang": {
            "protobuf": {
              "AUTHORS": null,
              "CONTRIBUTORS": null,
              "LICENSE": null,
              "jsonpb": {
                "decode.go": null,
                "encode.go": null,
                "json.go": null
              },
              "proto": {
                "buffer.go": null,
                "defaults.go": null,
                "deprecated.go": null,
                "discard.go": null,
                "extensions.go": null,
                "properties.go": null,
                "proto.go": null,
                "registry.go": null,
                "text_decode.go": null,
                "text_encode.go": null,
                "wire.go": null,
                "wrappers.go": null
              },
              "ptypes": {
                "any": {
                  "any.pb.go": null
                },
                "any.go": null,
                "doc.go": null,
                "duration": {
                  "duration.pb.go": null
                },
                "duration.go": null,
                "timestamp": {
                  "timestamp.pb.go": null
                },
                "timestamp.go": null
              }
            }
          },
          "google": {
            "go-cmp": {
              "LICENSE": null,
              "cmp": {
                "cmpopts": {
                  "equate.go": null,
                  "ignore.go": null,
                  "sort.go": null,
                  "struct_filter.go": null,
                  "xform.go": null
                },
                "compare.go": null,
                "export_panic.go": null,
                "export_unsafe.go": null,
                "internal": {
                  "diff": {
                    "debug_disable.go": null,
                    "debug_enable.go": null,
                    "diff.go": null
                  },
                  "flags": {
                    "flags.go": null
                  },
                  "function": {
                    "func.go": null
                  },
                  "value": {
                    "name.go": null,
                    "pointer_purego.go": null,
                    "pointer_unsafe.go": null,
                    "sort.go": null,
                    "zero.go": null
                  }
                },
                "options.go": null,
                "path.go": null,
                "report.go": null,
                "report_compare.go": null,
                "report_references.go": null,
                "report_reflect.go": null,
                "report_slices.go": null,
                "report_text.go": null,
                "report_value.go": null
              }
            },
            "uuid": {
              ".travis.yml": null,
              "CONTRIBUTING.md": null,
              "CONTRIBUTORS": null,
              "LICENSE": null,
              "README.md": null,
              "dce.go": null,
              "doc.go": null,
              "hash.go": null,
              "marshal.go": null,
              "node.go": null,
              "node_js.go": null,
              "node_net.go": null,
              "null.go": null,
              "sql.go": null,
              "time.go": null,
              "util.go": null,
              "uuid.go": null,
              "version1.go": null,
              "version4.go": null
            }
          },
          "hashicorp": {
            "go-hclog": {
              "LICENSE": null,
              "README.md": null,
              "colorize_unix.go": null,
              "colorize_windows.go": null,
              "context.go": null,
              "exclude.go": null,
              "global.go": null,
              "interceptlogger.go": null,
              "intlogger.go": null,
              "logger.go": null,
              "nulllogger.go": null,
              "stacktrace.go": null,
              "stdlog.go": null,
              "writer.go": null
            },
            "go-immutable-radix": {
              "CHANGELOG.md": null,
              "LICENSE": null,
              "README.md": null,
              "edges.go": null,
              "iradix.go": null,
              "iter.go": null,
              "node.go": null,
              "raw_iter.go": null,
              "reverse_iter.go": null
            },
            "go-msgpack": {
              "LICENSE": null,
              "codec": {
                "binc.go": null,
                "build.sh": null,
                "cbor.go": null,
                "codecgen.go": null,
                "decode.go": null,
                "doc.go": null,
                "encode.go": null,
                "fast-path.generated.go": null,
                "fast-path.go.tmpl": null,
                "fast-path.not.go": null,
                "gen-dec-array.go.tmpl": null,
                "gen-dec-map.go.tmpl": null,
                "gen-enc-chan.go.tmpl": null,
                "gen-helper.generated.go": null,
                "gen-helper.go.tmpl": null,
                "gen.generated.go": null,
                "gen.go": null,
                "goversion_arrayof_gte_go15.go": null,
                "goversion_arrayof_lt_go15.go": null,
                "goversion_makemap_gte_go19.go": null,
                "goversion_makemap_lt_go19.go": null,
                "goversion_unexportedembeddedptr_gte_go110.go": null,
                "goversion_unexportedembeddedptr_lt_go110.go": null,
                "goversion_unsupported_lt_go14.go": null,
                "goversion_vendor_eq_go15.go": null,
                "goversion_vendor_eq_go16.go": null,
                "goversion_vendor_gte_go17.go": null,
                "goversion_vendor_lt_go15.go": null,
                "helper.go": null,
                "helper_internal.go": null,
                "helper_not_unsafe.go": null,
                "helper_unsafe.go": null,
                "json.go": null,
                "mammoth-test.go.tmpl": null,
                "mammoth2-test.go.tmpl": null,
                "msgpack.go": null,
                "rpc.go": null,
                "simple.go": null,
                "test-cbor-goldens.json": null,
                "test.py": null
              }
            },
            "golang-lru": {
              "LICENSE": null,
              "simplelru": {
                "lru.go": null,
                "lru_interface.go": null
              }
            },
            "raft": {
              ".golangci-lint.yml": null,
              ".travis.yml": null,
              "CHANGELOG.md": null,
              "LICENSE": null,
              "Makefile": null,
              "README.md": null,
              "api.go": null,
              "commands.go": null,
              "commitment.go": null,
              "config.go": null,
              "configuration.go": null,
              "discard_snapshot.go": null,
              "file_snapshot.go": null,
              "fsm.go": null,
              "future.go": null,
              "inmem_snapshot.go": null,
              "inmem_store.go": null,
              "inmem_transport.go": null,
              "log.go": null,
              "log_cache.go": null,
              "membership.md": null,
              "net_transport.go": null,
              "observer.go": null,
              "peersjson.go": null,
              "progress.go": null,
              "raft.go": null,
              "replication.go": null,
              "saturation.go": null,
              "snapshot.go": null,
              "stable.go": null,
              "state.go": null,
              "tag.sh": null,
              "tcp_transport.go": null,
              "testing.go": null,
              "testing_batch.go": null,
              "transport.go": null,
              "util.go": null
            },
            "raft-boltdb": {
              "v2": {
                "LICENSE": null,
                "README.md": null,
                "bolt_store.go": null,
                "util.go": null
              }
            }
          },
          "jessevdk": {
            "go-flags": {
              ".travis.yml": null,
              "LICENSE": null,
              "README.md": null,
              "arg.go": null,
              "check_crosscompile.sh": null,
              "closest.go": null,
              "command.go": null,
              "completion.go": null,
              "convert.go": null,
              "error.go": null,
              "flags.go": null,
              "group.go": null,
              "help.go": null,
              "ini.go": null,
              "man.go": null,
              "multitag.go": null,
              "option.go": null,
              "optstyle_other.go": null,
              "optstyle_windows.go": null,
              "parser.go": null,
              "termsize.go": null,
              "termsize_nosysioctl.go": null,
              "termsize_windows.go": null
            }
          },
          "mattn": {
            "go-colorable": {
              "LICENSE": null,
              "README.md": null,
              "colorable_appengine.go": null,
              "colorable_others.go": null,
              "colorable_windows.go": null,
              "go.test.sh": null,
              "noncolorable.go": null
            },
            "go-isatty": {
              "LICENSE": null,
              "README.md": null,
              "doc.go": null,
              "go.test.sh": null,
              "isatty_bsd.go": null,
              "isatty_others.go": null,
              "isatty_plan9.go": null,
              "isatty_solaris.go": null,
              "isatty_tcgets.go": null,
              "isatty_windows.go": null
            }
          },
          "matttproud": {
            "golang_protobuf_extensions": {
              "LICENSE": null,
              "NOTICE": null,
              "pbutil": {
                "Makefile": null,
                "decode.go": null,
                "doc.go": null,
                "encode.go": null
              }
            }
          },
          "mitchellh": {
            "hashstructure": {
              "v2": {
                "LICENSE": null,
                "README.md": null,
                "errors.go": null,
                "hashstructure.go": null,
                "include.go": null
              }
            }
          },
          "pkg": {
            "errors": {
              ".travis.yml": null,
              "LICENSE": null,
              "Makefile": null,
              "README.md": null,
              "appveyor.yml": null,
              "errors.go": null,
              "go113.go": null,
              "stack.go": null
            }
          },
          "prometheus": {
            "client_golang": {
              "LICENSE": null,
              "NOTICE": null,
              "prometheus": {
                "README.md": null,
                "build_info_collector.go": null,
                "collector.go": null,
                "counter.go": null,
                "desc.go": null,
                "doc.go": null,
                "expvar_collector.go": null,
                "fnv.go": null,
                "gauge.go": null,
                "go_collector.go": null,
                "go_collector_go116.go": null,
                "go_collector_latest.go": null,
                "histogram.go": null,
                "internal": {
                  "go_runtime_metrics.go": null,
                  "metric.go": null
                },
                "labels.go": null,
                "metric.go": null,
                "observer.go": null,
                "process_collector.go": null,
                "process_collector_other.go": null,
                "process_collector_windows.go": null,
                "promhttp": {
                  "delegator.go": null,
                  "http.go": null,
                  "instrument_client.go": null,
                  "instrument_server.go": null,
                  "option.go": null
                },
                "registry.go": null,
                "summary.go": null,
                "timer.go": null,
                "untyped.go": null,
                "value.go": null,
                "vec.go": null,
                "wrap.go": null
              }
            },
            "client_model": {
              "LICENSE": null,
              "NOTICE": null,
              "go": {
                "metrics.pb.go": null
              }
            },
            "common": {
              "LICENSE": null,
              "NOTICE": null,
              "expfmt": {
                "decode.go": null,
                "encode.go": null,
                "expfmt.go": null,
                "fuzz.go": null,
                "openmetrics_create.go": null,
                "text_create.go": null,
                "text_parse.go": null
              },
              "internal": {
                "bitbucket.org": {
                  "ww": {
                    "goautoneg": {
                      "README.txt": null,
                      "autoneg.go": null
                    }
                  }
                }
              },
              "model": {
                "alert.go": null,
                "fingerprinting.go": null,
                "fnv.go": null,
                "labels.go": null,
                "labelset.go": null,
                "metric.go": null,
                "model.go": null,
                "signature.go": null,
                "silence.go": null,
                "time.go": null,
                "value.go": null
              }
            },
            "procfs": {
              ".golangci.yml": null,
              "CODE_OF_CONDUCT.md": null,
              "CONTRIBUTING.md": null,
              "LICENSE": null,
              "MAINTAINERS.md": null,
              "Makefile": null,
              "Makefile.common": null,
              "NOTICE": null,
              "README.md": null,
              "SECURITY.md": null,
              "arp.go": null,
              "buddyinfo.go": null,
              "cmdline.go": null,
              "cpuinfo.go": null,
              "cpuinfo_armx.go": null,
              "cpuinfo_mipsx.go": null,
              "cpuinfo_others.go": null,
              "cpuinfo_ppcx.go": null,
              "cpuinfo_riscvx.go": null,
              "cpuinfo_s390x.go": null,
              "cpuinfo_x86.go": null,
              "crypto.go": null,
              "doc.go": null,
              "fixtures.ttar": null,
              "fs.go": null,
              "fscache.go": null,
              "internal": {
                "fs": {
                  "fs.go": null
                },
                "util": {
                  "parse.go": null,
                  "readfile.go": null,
                  "sysreadfile.go": null,
                  "sysreadfile_compat.go": null,
                  "valueparser.go": null
                }
              },
              "ipvs.go": null,
              "kernel_random.go": null,
              "loadavg.go": null,
              "mdstat.go": null,
              "meminfo.go": null,
              "mountinfo.go": null,
              "mountstats.go": null,
              "net_conntrackstat.go": null,
              "net_dev.go": null,
              "net_ip_socket.go": null,
              "net_protocols.go": null,
              "net_sockstat.go": null,
              "net_softnet.go": null,
              "net_tcp.go": null,
              "net_udp.go": null,
              "net_unix.go": null,
              "netstat.go": null,
              "proc.go": null,
              "proc_cgroup.go": null,
              "proc_environ.go": null,
              "proc_fdinfo.go": null,
              "proc_io.go": null,
              "proc_limits.go": null,
              "proc_maps.go": null,
              "proc_ns.go": null,
              "proc_psi.go": null,
              "proc_smaps.go": null,
              "proc_stat.go": null,
              "proc_status.go": null,
              "schedstat.go": null,
              "slab.go": null,
              "stat.go": null,
              "swaps.go": null,
              "ttar": null,
              "vm.go": null,
              "xfrm.go": null,
              "zoneinfo.go": null
            }
          }
        },
        "go.etcd.io": {
          "bbolt": {
            ".travis.yml": null,
            "LICENSE": null,
            "Makefile": null,
            "README.md": null,
            "bolt_386.go": null,
            "bolt_amd64.go": null,
            "bolt_arm.go": null,
            "bolt_arm64.go": null,
            "bolt_linux.go": null,
            "bolt_mips64x.go": null,
            "bolt_mipsx.go": null,
            "bolt_openbsd.go": null,
            "bolt_ppc.go": null,
            "bolt_ppc64.go": null,
            "bolt_ppc64le.go": null,
            "bolt_riscv64.go": null,
            "bolt_s390x.go": null,
            "bolt_unix.go": null,
            "bolt_unix_aix.go": null,
            "bolt_unix_solaris.go": null,
            "bolt_windows.go": null,
            "boltsync_unix.go": null,
            "bucket.go": null,
            "cursor.go": null,
            "db.go": null,
            "doc.go": null,
            "errors.go": null,
            "freelist.go": null,
            "freelist_hmap.go": null,
            "node.go": null,
            "page.go": null,
            "tx.go": null,
            "unsafe.go": null
          }
        },
        "golang.org": {
          "x": {
            "net": {
              "LICENSE": null,
              "PATENTS": null,
              "context": {
                "context.go": null,
                "go17.go": null,
                "go19.go": null,
                "pre_go17.go": null,
                "pre_go19.go": null
              },
              "http": {
                "httpguts": {
                  "guts.go": null,
                  "httplex.go": null
                }
              },
              "http2": {
                "Dockerfile": null,
                "Makefile": null,
                "ascii.go": null,
                "ciphers.go": null,
                "client_conn_pool.go": null,
                "databuffer.go": null,
                "errors.go": null,
                "flow.go": null,
                "frame.go": null,
                "go111.go": null,
                "go115.go": null,
                "go118.go": null,
                "gotrack.go": null,
                "headermap.go": null,
                "hpack": {
                  "encode.go": null,
                  "hpack.go": null,
                  "huffman.go": null,
                  "static_table.go": null,
                  "tables.go": null
                },
                "http2.go": null,
                "not_go111.go": null,
                "not_go115.go": null,
                "not_go118.go": null,
                "pipe.go": null,
                "server.go": null,
                "transport.go": null,
                "write.go": null,
                "writesched.go": null,
                "writesched_priority.go": null,
                "writesched_random.go": null
              },
              "idna": {
                "go118.go": null,
                "idna10.0.0.go": null,
                "idna9.0.0.go": null,
                "pre_go118.go": null,
                "punycode.go": null,
                "tables10.0.0.go": null,
                "tables11.0.0.go": null,
                "tables12.0.0.go": null,
                "tables13.0.0.go": null,
                "tables9.0.0.go": null,
                "trie.go": null,
                "trieval.go": null
              },
              "internal": {
                "timeseries": {
                  "timeseries.go": null
                }
              },
              "trace": {
                "events.go": null,
                "histogram.go": null,
                "trace.go": null
              }
            },
            "sys": {
              "LICENSE": null,
              "PATENTS": null,
              "internal": {
                "unsafeheader": {
                  "unsafeheader.go": null
                }
              },
              "unix": {
                "README.md": null,
                "affinity_linux.go": null,
                "aliases.go": null,
                "asm_aix_ppc64.s": null,
                "asm_bsd_386.s": null,
                "asm_bsd_amd64.s": null,
                "asm_bsd_arm.s": null,
                "asm_bsd_arm64.s": null,
                "asm_bsd_ppc64.s": null,
                "asm_bsd_riscv64.s": null,
                "asm_linux_386.s": null,
                "asm_linux_amd64.s": null,
                "asm_linux_arm.s": null,
                "asm_linux_arm64.s": null,
                "asm_linux_loong64.s": null,
                "asm_linux_mips64x.s": null,
                "asm_linux_mipsx.s": null,
                "asm_linux_ppc64x.s": null,
                "asm_linux_riscv64.s": null,
                "asm_linux_s390x.s": null,
                "asm_openbsd_mips64.s": null,
                "asm_solaris_amd64.s": null,
                "asm_zos_s390x.s": null,
                "bluetooth_linux.go": null,
                "cap_freebsd.go": null,
                "constants.go": null,
                "dev_aix_ppc.go": null,
                "dev_aix_ppc64.go": null,
                "dev_darwin.go": null,
                "dev_dragonfly.go": null,
                "dev_freebsd.go": null,
                "dev_linux.go": null,
                "dev_netbsd.go": null,
                "dev_openbsd.go": null,
                "dev_zos.go": null,
                "dirent.go": null,
                "endian_big.go": null,
                "endian_little.go": null,
                "env_unix.go": null,
                "epoll_zos.go": null,
                "fcntl.go": null,
                "fcntl_darwin.go": null,
                "fcntl_linux_32bit.go": null,
                "fdset.go": null,
                "fstatfs_zos.go": null,
                "gccgo.go": null,
                "gccgo_c.c": null,
                "gccgo_linux_amd64.go": null,
                "ifreq_linux.go": null,
                "ioctl.go": null,
                "ioctl_linux.go": null,
                "ioctl_zos.go": null,
                "mkall.sh": null,
                "mkerrors.sh": null,
                "pagesize_unix.go": null,
                "pledge_openbsd.go": null,
                "ptrace_darwin.go": null,
                "ptrace_ios.go": null,
                "race.go": null,
                "race0.go": null,
                "readdirent_getdents.go": null,
                "readdirent_getdirentries.go": null,
                "sockcmsg_dragonfly.go": null,
                "sockcmsg_linux.go": null,
                "sockcmsg_unix.go": null,
                "sockcmsg_unix_other.go": null,
                "syscall.go": null,
                "syscall_aix.go": null,
                "syscall_aix_ppc.go": null,
                "syscall_aix_ppc64.go": null,
                "syscall_bsd.go": null,
                "syscall_darwin.go": null,
                "syscall_darwin_amd64.go": null,
                "syscall_darwin_arm64.go": null,
                "syscall_darwin_libSystem.go": null,
                "syscall_dragonfly.go": null,
                "syscall_dragonfly_amd64.go": null,
                "syscall_freebsd.go": null,
                "syscall_freebsd_386.go": null,
                "syscall_freebsd_amd64.go": null,
                "syscall_freebsd_arm.go": null,
                "syscall_freebsd_arm64.go": null,
                "syscall_freebsd_riscv64.go": null,
                "syscall_hurd.go": null,
                "syscall_hurd_386.go": null,
                "syscall_illumos.go": null,
                "syscall_linux.go": null,
                "syscall_linux_386.go": null,
                "syscall_linux_alarm.go": null,
                "syscall_linux_amd64.go": null,
                "syscall_linux_amd64_gc.go": null,
                "syscall_linux_arm.go": null,
                "syscall_linux_arm64.go": null,
                "syscall_linux_gc.go": null,
                "syscall_linux_gc_386.go": null,
                "syscall_linux_gc_arm.go": null,
                "syscall_linux_gccgo_386.go": null,
                "syscall_linux_gccgo_arm.go": null,
                "syscall_linux_loong64.go": null,
                "syscall_linux_mips64x.go": null,
                "syscall_linux_mipsx.go": null,
                "syscall_linux_ppc.go": null,
                "syscall_linux_ppc64x.go": null,
                "syscall_linux_riscv64.go": null,
                "syscall_linux_s390x.go": null,
                "syscall_linux_sparc64.go": null,
                "syscall_netbsd.go": null,
                "syscall_netbsd_386.go": null,
                "syscall_netbsd_amd64.go": null,
                "syscall_netbsd_arm.go": null,
                "syscall_netbsd_arm64.go": null,
                "syscall_openbsd.go": null,
                "syscall_openbsd_386.go": null,
                "syscall_openbsd_amd64.go": null,
                "syscall_openbsd_arm.go": null,
                "syscall_openbsd_arm64.go": null,
                "syscall_openbsd_libc.go": null,
                "syscall_openbsd_mips64.go": null,
                "syscall_openbsd_ppc64.go": null,
                "syscall_openbsd_riscv64.go": null,
                "syscall_solaris.go": null,
                "syscall_solaris_amd64.go": null,
                "syscall_unix.go": null,
                "syscall_unix_gc.go": null,
                "syscall_unix_gc_ppc64x.go": null,
                "syscall_zos_s390x.go": null,
                "sysvshm_linux.go": null,
                "sysvshm_unix.go": null,
                "sysvshm_unix_other.go": null,
                "timestruct.go": null,
                "unveil_openbsd.go": null,
                "xattr_bsd.go": null,
                "zerrors_aix_ppc.go": null,
                "zerrors_aix_ppc64.go": null,
                "zerrors_darwin_amd64.go": null,
                "zerrors_darwin_arm64.go": null,
                "zerrors_dragonfly_amd64.go": null,
                "zerrors_freebsd_386.go": null,
                "zerrors_freebsd_amd64.go": null,
                "zerrors_freebsd_arm.go": null,
                "zerrors_freebsd_arm64.go": null,
                "zerrors_freebsd_riscv64.go": null,
                "zerrors_linux.go": null,
                "zerrors_linux_386.go": null,
                "zerrors_linux_amd64.go": null,
                "zerrors_linux_arm.go": null,
                "zerrors_linux_arm64.go": null,
                "zerrors_linux_loong64.go": null,
                "zerrors_linux_mips.go": null,
                "zerrors_linux_mips64.go": null,
                "zerrors_linux_mips64le.go": null,
                "zerrors_linux_mipsle.go": null,
                "zerrors_linux_ppc.go": null,
                "zerrors_linux_ppc64.go": null,
                "zerrors_linux_ppc64le.go": null,
                "zerrors_linux_riscv64.go": null,
                "zerrors_linux_s390x.go": null,
                "zerrors_linux_sparc64.go": null,
                "zerrors_netbsd_386.go": null,
                "zerrors_netbsd_amd64.go": null,
                "zerrors_netbsd_arm.go": null,
                "zerrors_netbsd_arm64.go": null,
                "zerrors_openbsd_386.go": null,
                "zerrors_openbsd_amd64.go": null,
                "zerrors_openbsd_arm.go": null,
                "zerrors_openbsd_arm64.go": null,
                "zerrors_openbsd_mips64.go": null,
                "zerrors_openbsd_ppc64.go": null,
                "zerrors_openbsd_riscv64.go": null,
                "zerrors_solaris_amd64.go": null,
                "zerrors_zos_s390x.go": null,
                "zptrace_armnn_linux.go": null,
                "zptrace_linux_arm64.go": null,
                "zptrace_mipsnn_linux.go": null,
                "zptrace_mipsnnle_linux.go": null,
                "zptrace_x86_linux.go": null,
                "zsyscall_aix_ppc.go": null,
                "zsyscall_aix_ppc64.go": null,
                "zsyscall_aix_ppc64_gc.go": null,
                "zsyscall_aix_ppc64_gccgo.go": null,
                "zsyscall_darwin_amd64.go": null,
                "zsyscall_darwin_amd64.s": null,
                "zsyscall_darwin_arm64.go": null,
                "zsyscall_darwin_arm64.s": null,
                "zsyscall_dragonfly_amd64.go": null,
                "zsyscall_freebsd_386.go": null,
                "zsyscall_freebsd_amd64.go": null,
                "zsyscall_freebsd_arm.go": null,
                "zsyscall_freebsd_arm64.go": null,
                "zsyscall_freebsd_riscv64.go": null,
                "zsyscall_illumos_amd64.go": null,
                "zsyscall_linux.go": null,
                "zsyscall_linux_386.go": null,
                "zsyscall_linux_amd64.go": null,
                "zsyscall_linux_arm.go": null,
                "zsyscall_linux_arm64.go": null,
                "zsyscall_linux_loong64.go": null,
                "zsyscall_linux_mips.go": null,
                "zsyscall_linux_mips64.go": null,
                "zsyscall_linux_mips64le.go": null,
                "zsyscall_linux_mipsle.go": null,
                "zsyscall_linux_ppc.go": null,
                "zsyscall_linux_ppc64.go": null,
                "zsyscall_linux_ppc64le.go": null,
                "zsyscall_linux_riscv64.go": null,
                "zsyscall_linux_s390x.go": null,
                "zsyscall_linux_sparc64.go": null,
                "zsyscall_netbsd_386.go": null,
                "zsyscall_netbsd_amd64.go": null,
                "zsyscall_netbsd_arm.go": null,
                "zsyscall_netbsd_arm64.go": null,
                "zsyscall_openbsd_386.go": null,
                "zsyscall_openbsd_386.s": null,
                "zsyscall_openbsd_amd64.go": null,
                "zsyscall_openbsd_amd64.s": null,
                "zsyscall_openbsd_arm.go": null,
                "zsyscall_openbsd_arm.s": null,
                "zsyscall_openbsd_arm64.go": null,
                "zsyscall_openbsd_arm64.s": null,
                "zsyscall_openbsd_mips64.go": null,
                "zsyscall_openbsd_mips64.s": null,
                "zsyscall_openbsd_ppc64.go": null,
                "zsyscall_openbsd_ppc64.s": null,
                "zsyscall_openbsd_riscv64.go": null,
                "zsyscall_openbsd_riscv64.s": null,
                "zsyscall_solaris_amd64.go": null,
                "zsyscall_zos_s390x.go": null,
                "zsysctl_openbsd_386.go": null,
                "zsysctl_openbsd_amd64.go": null,
                "zsysctl_openbsd_arm.go": null,
                "zsysctl_openbsd_arm64.go": null,
                "zsysctl_openbsd_mips64.go": null,
                "zsysctl_openbsd_ppc64.go": null,
                "zsysctl_openbsd_riscv64.go": null,
                "zsysnum_darwin_amd64.go": null,
                "zsysnum_darwin_arm64.go": null,
                "zsysnum_dragonfly_amd64.go": null,
                "zsysnum_freebsd_386.go": null,
                "zsysnum_freebsd_amd64.go": null,
                "zsysnum_freebsd_arm.go": null,
                "zsysnum_freebsd_arm64.go": null,
                "zsysnum_freebsd_riscv64.go": null,
                "zsysnum_linux_386.go": null,
                "zsysnum_linux_amd64.go": null,
                "zsysnum_linux_arm.go": null,
                "zsysnum_linux_arm64.go": null,
                "zsysnum_linux_loong64.go": null,
                "zsysnum_linux_mips.go": null,
                "zsysnum_linux_mips64.go": null,
                "zsysnum_linux_mips64le.go": null,
                "zsysnum_linux_mipsle.go": null,
                "zsysnum_linux_ppc.go": null,
                "zsysnum_linux_ppc64.go": null,
                "zsysnum_linux_ppc64le.go": null,
                "zsysnum_linux_riscv64.go": null,
                "zsysnum_linux_s390x.go": null,
                "zsysnum_linux_sparc64.go": null,
                "zsysnum_netbsd_386.go": null,
                "zsysnum_netbsd_amd64.go": null,
                "zsysnum_netbsd_arm.go": null,
                "zsysnum_netbsd_arm64.go": null,
                "zsysnum_openbsd_386.go": null,
                "zsysnum_openbsd_amd64.go": null,
                "zsysnum_openbsd_arm.go": null,
                "zsysnum_openbsd_arm64.go": null,
                "zsysnum_openbsd_mips64.go": null,
                "zsysnum_openbsd_ppc64.go": null,
                "zsysnum_openbsd_riscv64.go": null,
                "zsysnum_zos_s390x.go": null,
                "ztypes_aix_ppc.go": null,
                "ztypes_aix_ppc64.go": null,
                "ztypes_darwin_amd64.go": null,
                "ztypes_darwin_arm64.go": null,
                "ztypes_dragonfly_amd64.go": null,
                "ztypes_freebsd_386.go": null,
                "ztypes_freebsd_amd64.go": null,
                "ztypes_freebsd_arm.go": null,
                "ztypes_freebsd_arm64.go": null,
                "ztypes_freebsd_riscv64.go": null,
                "ztypes_linux.go": null,
                "ztypes_linux_386.go": null,
                "ztypes_linux_amd64.go": null,
                "ztypes_linux_arm.go": null,
                "ztypes_linux_arm64.go": null,
                "ztypes_linux_loong64.go": null,
                "ztypes_linux_mips.go": null,
                "ztypes_linux_mips64.go": null,
                "ztypes_linux_mips64le.go": null,
                "ztypes_linux_mipsle.go": null,
                "ztypes_linux_ppc.go": null,
                "ztypes_linux_ppc64.go": null,
                "ztypes_linux_ppc64le.go": null,
                "ztypes_linux_riscv64.go": null,
                "ztypes_linux_s390x.go": null,
                "ztypes_linux_sparc64.go": null,
                "ztypes_netbsd_386.go": null,
                "ztypes_netbsd_amd64.go": null,
                "ztypes_netbsd_arm.go": null,
                "ztypes_netbsd_arm64.go": null,
                "ztypes_openbsd_386.go": null,
                "ztypes_openbsd_amd64.go": null,
                "ztypes_openbsd_arm.go": null,
                "ztypes_openbsd_arm64.go": null,
                "ztypes_openbsd_mips64.go": null,
                "ztypes_openbsd_ppc64.go": null,
                "ztypes_openbsd_riscv64.go": null,
                "ztypes_solaris_amd64.go": null,
                "ztypes_zos_s390x.go": null
              },
              "windows": {
                "aliases.go": null,
                "dll_windows.go": null,
                "empty.s": null,
                "env_windows.go": null,
                "eventlog.go": null,
                "exec_windows.go": null,
                "memory_windows.go": null,
                "mkerrors.bash": null,
                "mkknownfolderids.bash": null,
                "mksyscall.go": null,
                "race.go": null,
                "race0.go": null,
                "security_windows.go": null,
                "service.go": null,
                "setupapi_windows.go": null,
                "str.go": null,
                "syscall.go": null,
                "syscall_windows.go": null,
                "types_windows.go": null,
                "types_windows_386.go": null,
                "types_windows_amd64.go": null,
                "types_windows_arm.go": null,
                "types_windows_arm64.go": null,
                "zerrors_windows.go": null,
                "zknownfolderids_windows.go": null,
                "zsyscall_windows.go": null
              }
            },
            "text": {
              "LICENSE": null,
              "PATENTS": null,
              "secure": {
                "bidirule": {
                  "bidirule.go": null,
                  "bidirule10.0.0.go": null,
                  "bidirule9.0.0.go": null
                }
              },
              "transform": {
                "transform.go": null
              },
              "unicode": {
                "bidi": {
                  "bidi.go": null,
                  "bracket.go": null,
                  "core.go": null,
                  "prop.go": null,
                  "tables10.0.0.go": null,
                  "tables11.0.0.go": null,
                  "tables12.0.0.go": null,
                  "tables13.0.0.go": null,
                  "tables9.0.0.go": null,
                  "trieval.go": null
                },
                "norm": {
                  "composition.go": null,
                  "forminfo.go": null,
                  "input.go": null,
                  "iter.go": null,
                  "normalize.go": null,
                  "readwriter.go": null,
                  "tables10.0.0.go": null,
                  "tables11.0.0.go": null,
                  "tables12.0.0.go": null,
                  "tables13.0.0.go": null,
                  "tables9.0.0.go": null,
                  "transform.go": null,
                  "trie.go": null
                }
              }
            }
          }
        },
        "google.golang.org": {
          "genproto": {
            "LICENSE": null,
            "googleapis": {
              "rpc": {
                "errdetails": {
                  "error_details.pb.go": null
                },
                "status": {
                  "status.pb.go": null
                }
              }
            }
          },
          "grpc": {
            "AUTHORS": null,
            "CODE-OF-CONDUCT.md": null,
            "CONTRIBUTING.md": null,
            "GOVERNANCE.md": null,
            "LICENSE": null,
            "MAINTAINERS.md": null,
            "Makefile": null,
            "NOTICE.txt": null,
            "README.md": null,
            "SECURITY.md": null,
            "attributes": {
              "attributes.go": null
            },
            "backoff": {
              "backoff.go": null
            },
            "backoff.go": null,
            "balancer": {
              "balancer.go": null,
              "base": {
                "balancer.go": null,
                "base.go": null
              },
              "grpclb": {
                "state": {
                  "state.go": null
                }
              },
              "roundrobin": {
                "roundrobin.go": null
              }
            },
            "balancer_conn_wrappers.go": null,
            "binarylog": {
              "grpc_binarylog_v1": {
                "binarylog.pb.go": null
              }
            },
            "call.go": null,
            "channelz": {
              "channelz.go": null
            },
            "clientconn.go": null,
            "codec.go": null,
            "codegen.sh": null,
            "codes": {
              "code_string.go": null,
              "codes.go": null
            },
            "connectivity": {
              "connectivity.go": null
            },
            "credentials": {
              "credentials.go": null,
              "insecure": {
                "insecure.go": null
              },
              "tls.go": null
            },
            "dialoptions.go": null,
            "doc.go": null,
            "encoding": {
              "encoding.go": null,
              "proto": {
                "proto.go": null
              }
            },
            "grpclog": {
              "component.go": null,
              "grpclog.go": null,
              "logger.go": null,
              "loggerv2.go": null
            },
            "interceptor.go": null,
            "internal": {
              "backoff": {
                "backoff.go": null
              },
              "balancer": {
                "gracefulswitch": {
                  "gracefulswitch.go": null
                }
              },
              "balancerload": {
                "load.go": null
              },
              "binarylog": {
                "binarylog.go": null,
                "binarylog_testutil.go": null,
                "env_config.go": null,
                "method_logger.go": null,
                "sink.go": null
              },
              "buffer": {
                "unbounded.go": null
              },
              "channelz": {
                "funcs.go": null,
                "id.go": null,
                "logging.go": null,
                "types.go": null,
                "types_linux.go": null,
                "types_nonlinux.go": null,
                "util_linux.go": null,
                "util_nonlinux.go": null
              },
              "credentials": {
                "credentials.go": null,
                "spiffe.go": null,
                "syscallconn.go": null,
                "util.go": null
              },
              "envconfig": {
                "envconfig.go": null,
                "xds.go": null
              },
              "grpclog": {
                "grpclog.go": null,
                "prefixLogger.go": null
              },
              "grpcrand": {
                "grpcrand.go": null
              },
              "grpcsync": {
                "event.go": null
              },
              "grpcutil": {
                "encode_duration.go": null,
                "grpcutil.go": null,
                "metadata.go": null,
                "method.go": null,
                "regex.go": null
              },
              "internal.go": null,
              "metadata": {
                "metadata.go": null
              },
              "pretty": {
                "pretty.go": null
              },
              "resolver": {
                "config_selector.go": null,
                "dns": {
                  "dns_resolver.go": null
                },
                "passthrough": {
                  "passthrough.go": null
                },
                "unix": {
                  "unix.go": null
                }
              },
              "serviceconfig": {
                "serviceconfig.go": null
              },
              "status": {
                "status.go": null
              },
              "syscall": {
                "syscall_linux.go": null,
                "syscall_nonlinux.go": null
              },
              "transport": {
                "bdp_estimator.go": null,
                "controlbuf.go": null,
                "defaults.go": null,
                "flowcontrol.go": null,
                "handler_server.go": null,
                "http2_client.go": null,
                "http2_server.go": null,
                "http_util.go": null,
                "networktype": {
                  "networktype.go": null
                },
                "proxy.go": null,
                "transport.go": null
              },
              "xds_handshake_cluster.go": null
            },
            "keepalive": {
              "keepalive.go": null
            },
            "metadata": {
              "metadata.go": null
            },
            "peer": {
              "peer.go": null
            },
            "picker_wrapper.go": null,
            "pickfirst.go": null,
            "preloader.go": null,
            "regenerate.sh": null,
            "resolver": {
              "map.go": null,
              "resolver.go": null
            },
            "resolver_conn_wrapper.go": null,
            "rpc_util.go": null,
            "server.go": null,
            "service_config.go": null,
            "serviceconfig": {
              "serviceconfig.go": null
            },
            "stats": {
              "handlers.go": null,
              "stats.go": null
            },
            "status": {
              "status.go": null
            },
            "stream.go": null,
            "tap": {
              "tap.go": null
            },
            "trace.go": null,
            "version.go": null,
            "vet.sh": null
          },
          "protobuf": {
            "AUTHORS": null,
            "CONTRIBUTORS": null,
            "LICENSE": null,
            "PATENTS": null,
            "encoding": {
              "protojson": {
                "decode.go": null,
                "doc.go": null,
                "encode.go": null,
                "well_known_types.go": null
              },
              "prototext": {
                "decode.go": null,
                "doc.go": null,
                "encode.go": null
              },
              "protowire": {
                "wire.go": null
              }
            },
            "internal": {
              "descfmt": {
                "stringer.go": null
              },
              "descopts": {
                "options.go": null
              },
              "detrand": {
                "rand.go": null
              },
              "encoding": {
                "defval": {
                  "default.go": null
                },
                "json": {
                  "decode.go": null,
                  "decode_number.go": null,
                  "decode_string.go": null,
                  "decode_token.go": null,
                  "encode.go": null
                },
                "messageset": {
                  "messageset.go": null
                },
                "tag": {
                  "tag.go": null
                },
                "text": {
                  "decode.go": null,
                  "decode_number.go": null,
                  "decode_string.go": null,
                  "decode_token.go": null,
                  "doc.go": null,
                  "encode.go": null
                }
              },
              "errors": {
                "errors.go": null,
                "is_go112.go": null,
                "is_go113.go": null
              },
              "filedesc": {
                "build.go": null,
                "desc.go": null,
                "desc_init.go": null,
                "desc_lazy.go": null,
                "desc_list.go": null,
                "desc_list_gen.go": null,
                "placeholder.go": null
              },
              "filetype": {
                "build.go": null
              },
              "flags": {
                "flags.go": null,
                "proto_legacy_disable.go": null,
                "proto_legacy_enable.go": null
              },
              "genid": {
                "any_gen.go": null,
                "api_gen.go": null,
                "descriptor_gen.go": null,
                "doc.go": null,
                "duration_gen.go": null,
                "empty_gen.go": null,
                "field_mask_gen.go": null,
                "goname.go": null,
                "map_entry.go": null,
                "source_context_gen.go": null,
                "struct_gen.go": null,
                "timestamp_gen.go": null,
                "type_gen.go": null,
                "wrappers.go": null,
                "wrappers_gen.go": null
              },
              "impl": {
                "api_export.go": null,
                "checkinit.go": null,
                "codec_extension.go": null,
                "codec_field.go": null,
                "codec_gen.go": null,
                "codec_map.go": null,
                "codec_map_go111.go": null,
                "codec_map_go112.go": null,
                "codec_message.go": null,
                "codec_messageset.go": null,
                "codec_reflect.go": null,
                "codec_tables.go": null,
                "codec_unsafe.go": null,
                "convert.go": null,
                "convert_list.go": null,
                "convert_map.go": null,
                "decode.go": null,
                "encode.go": null,
                "enum.go": null,
                "extension.go": null,
                "legacy_enum.go": null,
                "legacy_export.go": null,
                "legacy_extension.go": null,
                "legacy_file.go": null,
                "legacy_message.go": null,
                "merge.go": null,
                "merge_gen.go": null,
                "message.go": null,
                "message_reflect.go": null,
                "message_reflect_field.go": null,
                "message_reflect_gen.go": null,
                "pointer_reflect.go": null,
                "pointer_unsafe.go": null,
                "validate.go": null,
                "weak.go": null
              },
              "msgfmt": {
                "format.go": null
              },
              "order": {
                "order.go": null,
                "range.go": null
              },
              "pragma": {
                "pragma.go": null
              },
              "set": {
                "ints.go": null
              },
              "strs": {
                "strings.go": null,
                "strings_pure.go": null,
                "strings_unsafe.go": null
              },
              "version": {
                "version.go": null
              }
            },
            "proto": {
              "checkinit.go": null,
              "decode.go": null,
              "decode_gen.go": null,
              "doc.go": null,
              "encode.go": null,
              "encode_gen.go": null,
              "equal.go": null,
              "extension.go": null,
              "merge.go": null,
              "messageset.go": null,
              "proto.go": null,
              "proto_methods.go": null,
              "proto_reflect.go": null,
              "reset.go": null,
              "size.go": null,
              "size_gen.go": null,
              "wrappers.go": null
            },
            "reflect": {
              "protodesc": {
                "desc.go": null,
                "desc_init.go": null,
                "desc_resolve.go": null,
                "desc_validate.go": null,
                "proto.go": null
              },
              "protoreflect": {
                "methods.go": null,
                "proto.go": null,
                "source.go": null,
                "source_gen.go": null,
                "type.go": null,
                "value.go": null,
                "value_pure.go": null,
                "value_union.go": null,
                "value_unsafe.go": null
              },
              "protoregistry": {
                "registry.go": null
              }
            },
            "runtime": {
              "protoiface": {
                "legacy.go": null,
                "methods.go": null
              },
              "protoimpl": {
                "impl.go": null,
                "version.go": null
              }
            },
            "testing": {
              "protocmp": {
                "reflect.go": null,
                "util.go": null,
                "xform.go": null
              }
            },
            "types": {
              "descriptorpb": {
                "descriptor.pb.go": null
              },
              "known": {
                "anypb": {
                  "any.pb.go": null
                },
                "durationpb": {
                  "duration.pb.go": null
                },
                "timestamppb": {
                  "timestamp.pb.go": null
                }
              }
            }
          }
        },
        "gopkg.in": {
          "yaml.v2": {
            ".travis.yml": null,
            "LICENSE": null,
            "LICENSE.libyaml": null,
            "NOTICE": null,
            "README.md": null,
            "apic.go": null,
            "decode.go": null,
            "emitterc.go": null,
            "encode.go": null,
            "parserc.go": null,
            "readerc.go": null,
            "resolve.go": null,
            "scannerc.go": null,
            "sorter.go": null,
            "writerc.go": null,
            "yaml.go": null,
            "yamlh.go": null,
            "yamlprivateh.go": null
          }
        },
        "modules.txt": null
      }
    },
    "dtx": {
      "SConscript": null,
      "dtx_common.c": null,
      "dtx_cos.c": null,
      "dtx_internal.h": null,
      "dtx_resync.c": null,
      "dtx_rpc.c": null,
      "dtx_srv.c": null
    },
    "engine": {
      "README.md": null,
      "SConscript": null,
      "drpc_client.c": null,
      "drpc_handler.c": null,
      "drpc_handler.h": null,
      "drpc_internal.h": null,
      "drpc_listener.c": null,
      "drpc_progress.c": null,
      "drpc_ras.c": null,
      "event.pb-c.c": null,
      "event.pb-c.h": null,
      "init.c": null,
      "module.c": null,
      "profile.c": null,
      "rpc.c": null,
      "sched.c": null,
      "server_iv.c": null,
      "srv.c": null,
      "srv.pb-c.c": null,
      "srv.pb-c.h": null,
      "srv_cli.c": null,
      "srv_internal.h": null,
      "srv_metrics.c": null,
      "tests": {
        "SConscript": null,
        "drpc_client_tests.c": null,
        "drpc_handler_tests.c": null,
        "drpc_listener_tests.c": null,
        "drpc_progress_tests.c": null
      },
      "tls.c": null,
      "ult.c": null
    },
    "gurt": {
      "SConscript": null,
      "debug.c": null,
      "dlog.c": null,
      "errno.c": null,
      "examples": {
        "SConscript": null,
        "telem_consumer_example.c": null,
        "telem_producer_example.c": null
      },
      "fault_inject.c": null,
      "hash.c": null,
      "heap.c": null,
      "hlc.c": null,
      "hlct.c": null,
      "misc.c": null,
      "slab.c": null,
      "telemetry.c": null,
      "tests": {
        "SConscript": null,
        "test_gurt.c": null,
        "test_gurt_telem_producer.c": null
      }
    },
    "include": {
      "cart": {
        "api.h": null,
        "iv.h": null,
        "swim.h": null,
        "types.h": null
      },
      "daos": {
        "agent.h": null,
        "array.h": null,
        "btree.h": null,
        "btree_class.h": null,
        "checksum.h": null,
        "cipher.h": null,
        "cmd_parser.h": null,
        "common.h": null,
        "compression.h": null,
        "cont_props.h": null,
        "container.h": null,
        "credit.h": null,
        "debug.h": null,
        "dedup.h": null,
        "dpar.h": null,
        "drpc.h": null,
        "drpc.pb-c.h": null,
        "drpc_modules.h": null,
        "dts.h": null,
        "dtx.h": null,
        "event.h": null,
        "job.h": null,
        "kv.h": null,
        "lru.h": null,
        "mem.h": null,
        "mgmt.h": null,
        "multihash.h": null,
        "object.h": null,
        "pipeline.h": null,
        "placement.h": null,
        "pool.h": null,
        "pool_map.h": null,
        "profile.h": null,
        "qat.h": null,
        "rpc.h": null,
        "rsvc.h": null,
        "security.h": null,
        "stack_mmap.h": null,
        "sys_db.h": null,
        "sys_debug.h": null,
        "task.h": null,
        "test_mocks.h": null,
        "test_perf.h": null,
        "test_utils.h": null,
        "tests_lib.h": null,
        "tse.h": null
      },
      "daos.h": null,
      "daos_api.h": null,
      "daos_array.h": null,
      "daos_cont.h": null,
      "daos_errno.h": null,
      "daos_event.h": null,
      "daos_fs.h": null,
      "daos_fs_sys.h": null,
      "daos_kv.h": null,
      "daos_mgmt.h": null,
      "daos_obj.h": null,
      "daos_obj_class.h": null,
      "daos_pipeline.h": null,
      "daos_pool.h": null,
      "daos_prop.h": null,
      "daos_s3.h": null,
      "daos_security.h": null,
      "daos_srv": {
        "ad_mem.h": null,
        "bio.h": null,
        "container.h": null,
        "control.h": null,
        "daos_engine.h": null,
        "daos_mgmt_srv.h": null,
        "dtx_srv.h": null,
        "evtree.h": null,
        "iv.h": null,
        "object.h": null,
        "policy.h": null,
        "pool.h": null,
        "ras.h": null,
        "rdb.h": null,
        "rebuild.h": null,
        "rsvc.h": null,
        "security.h": null,
        "smd.h": null,
        "srv_csum.h": null,
        "srv_obj_ec.h": null,
        "vea.h": null,
        "vos.h": null,
        "vos_types.h": null
      },
      "daos_task.h": null,
      "daos_types.h": null,
      "daos_uns.h": null,
      "daos_version.h.in": null,
      "dfuse_ioctl.h": null,
      "gurt": {
        "atomic.h": null,
        "common.h": null,
        "debug.h": null,
        "debug_setup.h": null,
        "dlog.h": null,
        "fault_inject.h": null,
        "hash.h": null,
        "heap.h": null,
        "list.h": null,
        "slab.h": null,
        "telemetry_common.h": null,
        "telemetry_consumer.h": null,
        "telemetry_producer.h": null,
        "types.h": null
      }
    },
    "mgmt": {
      "SConscript": null,
      "acl.pb-c.c": null,
      "acl.pb-c.h": null,
      "cli_debug.c": null,
      "cli_mgmt.c": null,
      "cli_query.c": null,
      "cont.pb-c.c": null,
      "cont.pb-c.h": null,
      "drpc_internal.h": null,
      "pool.pb-c.c": null,
      "pool.pb-c.h": null,
      "rpc.c": null,
      "rpc.h": null,
      "server.pb-c.c": null,
      "server.pb-c.h": null,
      "smd.pb-c.c": null,
      "smd.pb-c.h": null,
      "srv.c": null,
      "srv_container.c": null,
      "srv_drpc.c": null,
      "srv_internal.h": null,
      "srv_layout.c": null,
      "srv_layout.h": null,
      "srv_pool.c": null,
      "srv_query.c": null,
      "srv_system.c": null,
      "srv_target.c": null,
      "srv_util.c": null,
      "svc.pb-c.c": null,
      "svc.pb-c.h": null,
      "tests": {
        "SConscript": null,
        "mocks.c": null,
        "mocks.h": null,
        "srv_drpc_tests.c": null
      }
    },
    "object": {
      "README.md": null,
      "SConscript": null,
      "cli_csum.c": null,
      "cli_csum.h": null,
      "cli_ec.c": null,
      "cli_mod.c": null,
      "cli_obj.c": null,
      "cli_shard.c": null,
      "obj_class.c": null,
      "obj_class.h": null,
      "obj_class_def.c": null,
      "obj_ec.h": null,
      "obj_enum.c": null,
      "obj_internal.h": null,
      "obj_layout.c": null,
      "obj_rpc.c": null,
      "obj_rpc.h": null,
      "obj_task.c": null,
      "obj_tx.c": null,
      "obj_utils.c": null,
      "obj_verify.c": null,
      "rpc_csum.c": null,
      "rpc_csum.h": null,
      "srv_cli.c": null,
      "srv_csum.c": null,
      "srv_ec.c": null,
      "srv_ec_aggregate.c": null,
      "srv_enum.c": null,
      "srv_internal.h": null,
      "srv_io_map.c": null,
      "srv_mod.c": null,
      "srv_obj.c": null,
      "srv_obj_migrate.c": null,
      "srv_obj_remote.c": null,
      "tests": {
        "SConscript": null,
        "cli_checksum_tests.c": null,
        "srv_checksum_tests.c": null
      }
    },
    "pipeline": {
      "README.md": null,
      "SConscript": null,
      "aggr_funcs.c": null,
      "cli_mod.c": null,
      "cli_pipeline.c": null,
      "common_pipeline.c": null,
      "filter.c": null,
      "filter_funcs.c": null,
      "getdata_funcs.c": null,
      "pipeline_internal.h": null,
      "pipeline_rpc.c": null,
      "pipeline_rpc.h": null,
      "pipeline_task.c": null,
      "srv_mod.c": null,
      "srv_pipeline.c": null
    },
    "placement": {
      "JUMP_MAP.md": null,
      "README.md": null,
      "RING_MAP.md": null,
      "SConscript": null,
      "jump_map.c": null,
      "jump_map.h": null,
      "jump_map_versions.c": null,
      "pl_map.c": null,
      "pl_map.h": null,
      "pl_map_common.c": null,
      "ring_map.c": null,
      "tests": {
        "README.md": null,
        "SConscript": null,
        "benchmark_util.h": null,
        "jump_map_dist.c": null,
        "jump_map_pda.c": null,
        "jump_map_pda_layout.c": null,
        "jump_map_place_obj.c": null,
        "pl_bench.c": null,
        "place_obj_common.c": null,
        "place_obj_common.h": null,
        "placement_test.c": null,
        "ring_map_place_obj.c": null
      }
    },
    "pool": {
      "README.md": null,
      "SConscript": null,
      "cli.c": null,
      "cli_internal.h": null,
      "rpc.c": null,
      "rpc.h": null,
      "srv.c": null,
      "srv_cli.c": null,
      "srv_internal.h": null,
      "srv_iv.c": null,
      "srv_layout.c": null,
      "srv_layout.h": null,
      "srv_metrics.c": null,
      "srv_pool.c": null,
      "srv_pool_chkpt.c": null,
      "srv_pool_map.c": null,
      "srv_pool_map.h": null,
      "srv_pool_scrub_ult.c": null,
      "srv_target.c": null,
      "srv_util.c": null
    },
    "proto": {
      "Makefile": null,
      "README.md": null,
      "ctl": {
        "common.proto": null,
        "ctl.proto": null,
        "firmware.proto": null,
        "network.proto": null,
        "ranks.proto": null,
        "server.proto": null,
        "smd.proto": null,
        "storage.proto": null,
        "storage_nvme.proto": null,
        "storage_scm.proto": null,
        "support.proto": null
      },
      "drpc.proto": null,
      "mgmt": {
        "acl.proto": null,
        "cont.proto": null,
        "mgmt.proto": null,
        "pool.proto": null,
        "svc.proto": null,
        "system.proto": null
      },
      "security": {
        "auth.proto": null
      },
      "shared": {
        "event.proto": null,
        "ranks.proto": null
      },
      "srv": {
        "srv.proto": null
      },
      "test": {
        "drpc_test.proto": null
      }
    },
    "rdb": {
      "README.md": null,
      "SConscript": null,
      "raft_tests": {
        "raft_tests.py": null
      },
      "rdb.c": null,
      "rdb_internal.h": null,
      "rdb_kvs.c": null,
      "rdb_layout.c": null,
      "rdb_layout.h": null,
      "rdb_module.c": null,
      "rdb_path.c": null,
      "rdb_raft.c": null,
      "rdb_rpc.c": null,
      "rdb_tx.c": null,
      "rdb_util.c": null,
      "tests": {
        "README": null,
        "SConscript": null,
        "rdb_test.c": null,
        "rdbt.c": null,
        "rpc.c": null,
        "rpc.h": null
      }
    },
    "rebuild": {
      "README.md": null,
      "SConscript": null,
      "ras.c": null,
      "rebuild_internal.h": null,
      "rebuild_iv.c": null,
      "rpc.c": null,
      "rpc.h": null,
      "scan.c": null,
      "srv.c": null
    },
    "rsvc": {
      "README.md": null,
      "SConscript": null,
      "rpc.c": null,
      "rpc.h": null,
      "srv.c": null,
      "srv_common.c": null
    },
    "security": {
      "README.md": null,
      "SConscript": null,
      "acl.c": null,
      "acl.h": null,
      "auth.pb-c.c": null,
      "auth.pb-c.h": null,
      "cli_security.c": null,
      "srv.c": null,
      "srv_acl.c": null,
      "srv_internal.h": null,
      "tests": {
        "SConscript": null,
        "cli_security_tests.c": null,
        "drpc_mocks.c": null,
        "drpc_mocks.h": null,
        "sec_test_util.c": null,
        "sec_test_util.h": null,
        "srv_acl_tests.c": null
      }
    },
    "tests": {
      "SConscript": null,
      "daos_mw_fi.c": null,
      "daos_perf.c": null,
      "daos_racer.c": null,
      "drpc": {
        "SConscript": null,
        "drpc_engine_test.c": null,
        "drpc_test.c": null,
        "drpc_test.pb-c.c": null,
        "drpc_test.pb-c.h": null
      },
      "dts.c": null,
      "ftest": {
        "SConscript": null,
        "__init__.py": null,
        "aggregation": {
          "basic.py": null,
          "basic.yaml": null,
          "checksum.py": null,
          "checksum.yaml": null,
          "dfuse_space_check.py": null,
          "dfuse_space_check.yaml": null,
          "io_small.py": null,
          "io_small.yaml": null,
          "multiple_pool_cont.py": null,
          "multiple_pool_cont.yaml": null,
          "punching.py": null,
          "punching.yaml": null,
          "shutdown_restart.py": null,
          "shutdown_restart.yaml": null,
          "throttling.py": null,
          "throttling.yaml": null
        },
        "avocado-job-result_proxy-reference-fix.patch": null,
        "avocado-report-test-phases-common.patch": null,
        "avocado-report-test-phases-py2.patch": null,
        "avocado-report-test-phases-py3.patch": null,
        "avocado-teardown-timeout.patch": null,
        "avocado_tests.py": null,
        "avocado_tests.yaml": null,
        "cart": {
          "SConscript": null,
          "common.h": null,
          "corpc": {
            "corpc_five_node.py": null,
            "corpc_five_node.yaml": null,
            "corpc_one_node.py": null,
            "corpc_one_node.yaml": null,
            "corpc_two_node.py": null,
            "corpc_two_node.yaml": null
          },
          "crt_basic.c": null,
          "ctl": {
            "ctl_five_node.py": null,
            "ctl_five_node.yaml": null,
            "ctl_one_node.py": null,
            "ctl_one_node.yaml": null
          },
          "dual_iface_server.c": null,
          "fault_status.c": null,
          "ghost_rank_rpc": {
            "ghost_rank_rpc_one_node.py": null,
            "ghost_rank_rpc_one_node.yaml": null
          },
          "group_test": {
            "group_test.py": null,
            "group_test.yaml": null
          },
          "iv": {
            "iv_one_node.py": null,
            "iv_one_node.yaml": null,
            "iv_two_node.py": null,
            "iv_two_node.yaml": null
          },
          "iv_client.c": null,
          "iv_common.h": null,
          "iv_server.c": null,
          "no_pmix": {
            "multictx_one_node.py": null,
            "multictx_one_node.yaml": null
          },
          "no_pmix_corpc_errors.c": null,
          "no_pmix_group_test.c": null,
          "no_pmix_group_version.c": null,
          "no_pmix_launcher_client.c": null,
          "no_pmix_launcher_common.h": null,
          "no_pmix_launcher_server.c": null,
          "no_pmix_multi_ctx.c": null,
          "nopmix_launcher": {
            "launcher_one_node.py": null,
            "launcher_one_node.yaml": null
          },
          "rpc": {
            "multisend_one_node.py": null,
            "multisend_one_node.yaml": null,
            "rpc_one_node.py": null,
            "rpc_one_node.yaml": null,
            "rpc_two_node.py": null,
            "rpc_two_node.yaml": null,
            "swim_notification.py": null,
            "swim_notification.yaml": null
          },
          "rpc_test_cli.c": null,
          "rpc_test_common.h": null,
          "rpc_test_srv.c": null,
          "rpc_test_srv2.c": null,
          "selftest": {
            "selftest_three_node.py": null,
            "selftest_three_node.yaml": null
          },
          "test_corpc_exclusive.c": null,
          "test_corpc_prefwd.c": null,
          "test_ep_cred_client.c": null,
          "test_ep_cred_common.h": null,
          "test_ep_cred_server.c": null,
          "test_group_np_cli.c": null,
          "test_group_np_common.h": null,
          "test_group_np_common_cli.h": null,
          "test_group_np_srv.c": null,
          "test_group_rpc.h": null,
          "test_hlc_net.c": null,
          "test_multisend_client.c": null,
          "test_multisend_common.h": null,
          "test_multisend_server.c": null,
          "test_no_timeout.c": null,
          "test_proto_client.c": null,
          "test_proto_common.h": null,
          "test_proto_server.c": null,
          "test_rpc_error.c": null,
          "test_rpc_to_ghost_rank.c": null,
          "test_swim.c": null,
          "test_swim_emu.c": null,
          "test_swim_net.c": null,
          "threaded_client.c": null,
          "threaded_rpc.h": null,
          "threaded_server.c": null,
          "utest": {
            "SConscript": null,
            "test_linkage.cpp": null,
            "utest_hlc.c": null,
            "utest_portnumber.c": null,
            "utest_swim.c": null,
            "wrap_cmocka.h": null
          },
          "util": {
            "__init__.py": null,
            "cart_logparse.py": null,
            "cart_logtest.py": null,
            "cart_logusage.py": null,
            "cart_utils.py": null
          }
        },
        "checksum": {
          "csum_basic.py": null,
          "csum_basic.yaml": null,
          "csum_error_logging.py": null,
          "csum_error_logging.yaml": null
        },
        "config_file_gen.py": null,
        "container": {
          "api_basic_attribute.py": null,
          "api_basic_attribute.yaml": null,
          "auto_oc_selection.py": null,
          "auto_oc_selection.yaml": null,
          "basic_snapshot.py": null,
          "basic_snapshot.yaml": null,
          "boundary.py": null,
          "boundary.yaml": null,
          "destroy.py": null,
          "destroy.yaml": null,
          "fill_destroy_loop.py": null,
          "fill_destroy_loop.yaml": null,
          "full_pool_container_create.py": null,
          "full_pool_container_create.yaml": null,
          "label.py": null,
          "label.yaml": null,
          "list.py": null,
          "list.yaml": null,
          "multiple_delete.py": null,
          "multiple_delete.yaml": null,
          "open.py": null,
          "open.yaml": null,
          "per_server_fault_domain.py": null,
          "per_server_fault_domain.yaml": null,
          "query_attribute.py": null,
          "query_attribute.yaml": null,
          "query_properties.py": null,
          "query_properties.yaml": null,
          "rf_enforcement.py": null,
          "rf_enforcement.yaml": null,
          "snapshot.py": null,
          "snapshot.yaml": null,
          "snapshot_aggregation.py": null,
          "snapshot_aggregation.yaml": null
        },
        "control": {
          "config_generate_run.py": null,
          "config_generate_run.yaml": null,
          "daos_agent_config.py": null,
          "daos_agent_config.yaml": null,
          "daos_agent_support_collect_log.py": null,
          "daos_agent_support_collect_log.yaml": null,
          "daos_control_config.py": null,
          "daos_control_config.yaml": null,
          "daos_object_query.py": null,
          "daos_object_query.yaml": null,
          "daos_server_helper.py": null,
          "daos_server_helper.yaml": null,
          "daos_server_support_collect_log.py": null,
          "daos_server_support_collect_log.yaml": null,
          "daos_snapshot.py": null,
          "daos_snapshot.yaml": null,
          "daos_system_query.py": null,
          "daos_system_query.yaml": null,
          "dmg_network_scan.py": null,
          "dmg_network_scan.yaml": null,
          "dmg_nvme_scan_test.py": null,
          "dmg_nvme_scan_test.yaml": null,
          "dmg_pool_query_ranks.py": null,
          "dmg_pool_query_ranks.yaml": null,
          "dmg_pool_query_test.py": null,
          "dmg_pool_query_test.yaml": null,
          "dmg_server_set_logmasks.py": null,
          "dmg_server_set_logmasks.yaml": null,
          "dmg_storage_query.py": null,
          "dmg_storage_query.yaml": null,
          "dmg_storage_scan_scm.py": null,
          "dmg_storage_scan_scm.yaml": null,
          "dmg_support_collect_log.py": null,
          "dmg_support_collect_log.yaml": null,
          "dmg_system_cleanup.py": null,
          "dmg_system_cleanup.yaml": null,
          "dmg_system_reformat.py": null,
          "dmg_system_reformat.yaml": null,
          "dmg_telemetry_basic.py": null,
          "dmg_telemetry_basic.yaml": null,
          "dmg_telemetry_io_basic.py": null,
          "dmg_telemetry_io_basic.yaml": null,
          "dmg_telemetry_io_latency.py": null,
          "dmg_telemetry_io_latency.yaml": null,
          "dmg_telemetry_nvme.py": null,
          "dmg_telemetry_nvme.yaml": null,
          "log_entry.py": null,
          "log_entry.yaml": null,
          "ms_failover.py": null,
          "ms_failover.yaml": null,
          "ms_resilience.py": null,
          "ms_resilience.yaml": null,
          "ssd_socket.py": null,
          "ssd_socket.yaml": null,
          "super_block_versioning.py": null,
          "super_block_versioning.yaml": null,
          "version.py": null,
          "version.yaml": null
        },
        "daos_perf": {
          "large.py": null,
          "large.yaml": null,
          "small.py": null,
          "small.yaml": null
        },
        "daos_racer": {
          "multi.py": null,
          "multi.yaml": null,
          "parallel.py": null,
          "parallel.yaml": null,
          "simple.py": null,
          "simple.yaml": null
        },
        "daos_test": {
          "dfs.py": null,
          "dfs.yaml": null,
          "dfuse.py": null,
          "dfuse.yaml": null,
          "nvme_recovery.py": null,
          "nvme_recovery.yaml": null,
          "rebuild.py": null,
          "rebuild.yaml": null,
          "suite.py": null,
          "suite.yaml": null
        },
        "daos_vol": {
          "bigio.py": null,
          "bigio.yaml": null,
          "h5_suite.py": null,
          "h5_suite.yaml": null
        },
        "datamover": {
          "copy_procs.py": null,
          "copy_procs.yaml": null,
          "dst_create.py": null,
          "dst_create.yaml": null,
          "large_dir.py": null,
          "large_dir.yaml": null,
          "large_file.py": null,
          "large_file.yaml": null,
          "negative.py": null,
          "negative.yaml": null,
          "negative_space.py": null,
          "negative_space.yaml": null,
          "obj_large_posix.py": null,
          "obj_large_posix.yaml": null,
          "obj_small.py": null,
          "obj_small.yaml": null,
          "posix_meta_entry.py": null,
          "posix_meta_entry.yaml": null,
          "posix_preserve_props.py": null,
          "posix_preserve_props.yaml": null,
          "posix_subsets.py": null,
          "posix_subsets.yaml": null,
          "posix_symlinks.py": null,
          "posix_symlinks.yaml": null,
          "posix_types.py": null,
          "posix_types.yaml": null,
          "serial_large_posix.py": null,
          "serial_large_posix.yaml": null,
          "serial_small.py": null,
          "serial_small.yaml": null
        },
        "dbench": {
          "dbench.py": null,
          "dbench.yaml": null
        },
        "deployment": {
          "agent_failure.py": null,
          "agent_failure.yaml": null,
          "basic_checkout.py": null,
          "basic_checkout.yaml": null,
          "critical_integration.py": null,
          "critical_integration.yaml": null,
          "disk_failure.py": null,
          "disk_failure.yaml": null,
          "io_sys_admin.py": null,
          "io_sys_admin.yaml": null,
          "ior_per_rank.py": null,
          "ior_per_rank.yaml": null,
          "network_failure.py": null,
          "network_failure.yaml": null,
          "server_rank_failure.py": null,
          "server_rank_failure.yaml": null,
          "target_failure.py": null,
          "target_failure.yaml": null
        },
        "dfuse": {
          "bash.py": null,
          "bash.yaml": null,
          "caching_check.py": null,
          "caching_check.yaml": null,
          "container_type.py": null,
          "container_type.yaml": null,
          "daos_build.py": null,
          "daos_build.yaml": null,
          "enospace.py": null,
          "enospace.yaml": null,
          "find.py": null,
          "find.yaml": null,
          "fio_pil4dfs_small.py": null,
          "fio_pil4dfs_small.yaml": null,
          "fio_small.py": null,
          "fio_small.yaml": null,
          "mu_mount.py": null,
          "mu_mount.yaml": null,
          "mu_perms.py": null,
          "mu_perms.yaml": null,
          "posix_stat.py": null,
          "posix_stat.yaml": null,
          "root_container.py": null,
          "root_container.yaml": null,
          "simul.py": null,
          "simul.yaml": null,
          "sparse_file.py": null,
          "sparse_file.yaml": null
        },
        "dtx": {
          "basic.py": null,
          "basic.yaml": null
        },
        "erasurecode": {
          "aggregation.py": null,
          "aggregation.yaml": null,
          "cell_size.py": null,
          "cell_size.yaml": null,
          "cell_size_property.py": null,
          "cell_size_property.yaml": null,
          "ior_smoke.py": null,
          "ior_smoke.yaml": null,
          "mdtest_smoke.py": null,
          "mdtest_smoke.yaml": null,
          "multiple_failure.py": null,
          "multiple_failure.yaml": null,
          "offline_rebuild.py": null,
          "offline_rebuild.yaml": null,
          "offline_rebuild_aggregation.py": null,
          "offline_rebuild_aggregation.yaml": null,
          "offline_rebuild_single.py": null,
          "offline_rebuild_single.yaml": null,
          "online_rebuild.py": null,
          "online_rebuild.yaml": null,
          "online_rebuild_mdtest.py": null,
          "online_rebuild_mdtest.yaml": null,
          "online_rebuild_single.py": null,
          "online_rebuild_single.yaml": null,
          "rank_failure.py": null,
          "rank_failure.yaml": null,
          "rebuild_disabled.py": null,
          "rebuild_disabled.yaml": null,
          "rebuild_disabled_single.py": null,
          "rebuild_disabled_single.yaml": null,
          "rebuild_fio.py": null,
          "rebuild_fio.yaml": null,
          "restart.py": null,
          "restart.yaml": null,
          "space_usage.py": null,
          "space_usage.yaml": null,
          "truncate.py": null,
          "truncate.yaml": null
        },
        "fault_domain": {
          "fault_domain.py": null,
          "fault_domain.yaml": null
        },
        "fault_injection": {
          "ec.py": null,
          "ec.yaml": null,
          "pool.py": null,
          "pool.yaml": null
        },
        "harness": {
          "advanced.py": null,
          "advanced.yaml": null,
          "basic.py": null,
          "basic.yaml": null,
          "config.py": null,
          "config.yaml": null,
          "core_files.py": null,
          "core_files.yaml": null,
          "launch_setup.py": null,
          "launch_setup.yaml": null,
          "setup.py": null,
          "setup.yaml": null,
          "setup_vm.py": null,
          "setup_vm.yaml": null,
          "skip_list.py": null,
          "skip_list.yaml": null,
          "slurm.py": null,
          "slurm.yaml": null,
          "timeout.py": null,
          "timeout.yaml": null,
          "unit.py": null,
          "unit.yaml": null
        },
        "interoperability": {
          "diff_versions.py": null,
          "diff_versions.yaml": null,
          "down_grade.py": null,
          "down_grade.yaml": null,
          "updown_grade.py": null,
          "updown_grade.yaml": null,
          "updown_grade_8svr.yaml": null,
          "upgrade_downgrade_base.py": null
        },
        "io": {
          "io_consistency.py": null,
          "io_consistency.yaml": null,
          "large_file_count.py": null,
          "large_file_count.yaml": null,
          "macsio_test.py": null,
          "macsio_test.yaml": null,
          "parallel_io.py": null,
          "parallel_io.yaml": null,
          "seg_count.py": null,
          "seg_count.yaml": null,
          "small_file_count.py": null,
          "small_file_count.yaml": null,
          "unaligned_io.py": null,
          "unaligned_io.yaml": null
        },
        "ior": {
          "crash.py": null,
          "crash.yaml": null,
          "hard.py": null,
          "hard.yaml": null,
          "hard_rebuild.py": null,
          "hard_rebuild.yaml": null,
          "intercept_messages.py": null,
          "intercept_messages.yaml": null,
          "intercept_messages_pil4dfs.py": null,
          "intercept_messages_pil4dfs.yaml": null,
          "intercept_multi_client.py": null,
          "intercept_multi_client.yaml": null,
          "small.py": null,
          "small.yaml": null
        },
        "launch.py": null,
        "mdtest": {
          "small.py": null,
          "small.yaml": null
        },
        "mpiio": {
          "hdf5.py": null,
          "hdf5.yaml": null,
          "llnl_mpi4py.py": null,
          "llnl_mpi4py.yaml": null,
          "romio.py": null,
          "romio.yaml": null
        },
        "network": {
          "cart_self_test.py": null,
          "cart_self_test.yaml": null
        },
        "nvme": {
          "enospace.py": null,
          "enospace.yaml": null,
          "fault.py": null,
          "fault.yaml": null,
          "fragmentation.py": null,
          "fragmentation.yaml": null,
          "health.py": null,
          "health.yaml": null,
          "io.py": null,
          "io.yaml": null,
          "io_verification.py": null,
          "io_verification.yaml": null,
          "object.py": null,
          "object.yaml": null,
          "pool_capacity.py": null,
          "pool_capacity.yaml": null,
          "pool_exclude.py": null,
          "pool_exclude.yaml": null,
          "pool_extend.py": null,
          "pool_extend.yaml": null
        },
        "object": {
          "array.py": null,
          "array.yaml": null,
          "create_many_dkeys.py": null,
          "create_many_dkeys.yaml": null,
          "fetch_bad_param.py": null,
          "fetch_bad_param.yaml": null,
          "integrity.py": null,
          "integrity.yaml": null,
          "open_bad_param.py": null,
          "open_bad_param.yaml": null,
          "punch_test.py": null,
          "punch_test.yaml": null,
          "same_key_different_value.py": null,
          "same_key_different_value.yaml": null,
          "update_bad_param.py": null,
          "update_bad_param.yaml": null
        },
        "osa": {
          "dmg_negative_test.py": null,
          "dmg_negative_test.yaml": null,
          "offline_drain.py": null,
          "offline_drain.yaml": null,
          "offline_extend.py": null,
          "offline_extend.yaml": null,
          "offline_parallel_test.py": null,
          "offline_parallel_test.yaml": null,
          "offline_reintegration.py": null,
          "offline_reintegration.yaml": null,
          "online_drain.py": null,
          "online_drain.yaml": null,
          "online_extend.py": null,
          "online_extend.yaml": null,
          "online_parallel_test.py": null,
          "online_parallel_test.yaml": null,
          "online_reintegration.py": null,
          "online_reintegration.yaml": null
        },
        "performance": {
          "ior_easy.py": null,
          "ior_easy.yaml": null,
          "ior_hard.py": null,
          "ior_hard.yaml": null,
          "mdtest_easy.py": null,
          "mdtest_easy.yaml": null,
          "mdtest_hard.py": null,
          "mdtest_hard.yaml": null
        },
        "pool": {
          "Makefile": null,
          "api_attribute.py": null,
          "api_attribute.yaml": null,
          "autotest.py": null,
          "autotest.yaml": null,
          "bad_connect.py": null,
          "bad_connect.yaml": null,
          "bad_evict.py": null,
          "bad_evict.yaml": null,
          "bad_query.py": null,
          "bad_query.yaml": null,
          "create.py": null,
          "create.yaml": null,
          "create_all_hw.py": null,
          "create_all_hw.yaml": null,
          "create_all_vm.py": null,
          "create_all_vm.yaml": null,
          "create_capacity.py": null,
          "create_capacity.yaml": null,
          "create_query.py": null,
          "create_query.yaml": null,
          "destroy.py": null,
          "destroy.yaml": null,
          "destroy_rebuild.py": null,
          "destroy_rebuild.yaml": null,
          "dynamic_server_pool.py": null,
          "dynamic_server_pool.yaml": null,
          "evict.py": null,
          "evict.yaml": null,
          "info.py": null,
          "info.yaml": null,
          "label.py": null,
          "label.yaml": null,
          "list_pools.py": null,
          "list_pools.yaml": null,
          "list_verbose.py": null,
          "list_verbose.yaml": null,
          "management_race.py": null,
          "management_race.yaml": null,
          "multi_server_create_delete.py": null,
          "multi_server_create_delete.yaml": null,
          "pda.py": null,
          "pda.yaml": null,
          "permission.py": null,
          "permission.yaml": null,
          "query_attribute.py": null,
          "query_attribute.yaml": null,
          "rf.py": null,
          "rf.yaml": null,
          "svc.py": null,
          "svc.yaml": null,
          "target_query.py": null,
          "target_query.yaml": null,
          "uuid_corner_case.py": null,
          "uuid_corner_case.yaml": null
        },
        "process_core_files.py": null,
        "rebuild": {
          "basic.py": null,
          "basic.yaml": null,
          "cascading_failures.py": null,
          "cascading_failures.yaml": null,
          "container_create_race.py": null,
          "container_create_race.yaml": null,
          "container_rf.py": null,
          "container_rf.yaml": null,
          "delete_objects.py": null,
          "delete_objects.yaml": null,
          "io_conf_run.py": null,
          "io_conf_run.yaml": null,
          "no_cap.py": null,
          "no_cap.yaml": null,
          "pool_destroy_race.py": null,
          "pool_destroy_race.yaml": null,
          "read_array.py": null,
          "read_array.yaml": null,
          "widely_striped.py": null,
          "widely_striped.yaml": null,
          "with_io.py": null,
          "with_io.yaml": null,
          "with_ior.py": null,
          "with_ior.yaml": null
        },
        "scripts": {
          "cleanup_nodes.sh": null,
          "main.sh": null,
          "post_process_xml.sh": null,
          "pre_clean_nodes.sh": null,
          "setup_nodes.sh": null
        },
        "scrubber": {
          "basic.py": null,
          "basic.yaml": null,
          "csum_fault.py": null,
          "csum_fault.yaml": null,
          "target_auto_eviction.py": null,
          "target_auto_eviction.yaml": null
        },
        "security": {
          "cont_acl.py": null,
          "cont_acl.yaml": null,
          "cont_create_acl.py": null,
          "cont_create_acl.yaml": null,
          "cont_delete_acl.py": null,
          "cont_delete_acl.yaml": null,
          "cont_get_acl.py": null,
          "cont_get_acl.yaml": null,
          "cont_overwrite_acl.py": null,
          "cont_overwrite_acl.yaml": null,
          "cont_update_acl.py": null,
          "cont_update_acl.yaml": null,
          "pool_acl.py": null,
          "pool_acl.yaml": null,
          "pool_connect_init.py": null,
          "pool_connect_init.yaml": null,
          "pool_groups.py": null,
          "pool_groups.yaml": null
        },
        "server": {
          "cpu_usage.py": null,
          "cpu_usage.yaml": null,
          "daos_server_config.py": null,
          "daos_server_config.yaml": null,
          "daos_server_dump.py": null,
          "daos_server_dump.yaml": null,
          "daos_server_restart.py": null,
          "daos_server_restart.yaml": null,
          "dynamic_start_stop.py": null,
          "dynamic_start_stop.yaml": null,
          "metadata.py": null,
          "metadata.yaml": null,
          "multiengine_persocket.py": null,
          "multiengine_persocket.yaml": null,
          "replay.py": null,
          "replay.yaml": null,
          "storage_tiers.py": null,
          "storage_tiers.yaml": null
        },
        "slurm_setup.py": null,
        "soak": {
          "faults.py": null,
          "faults.yaml": null,
          "harassers.py": null,
          "harassers.yaml": null,
          "smoke.py": null,
          "smoke.yaml": null,
          "stress.py": null,
          "stress.yaml": null,
          "stress_2h.py": null,
          "stress_2h.yaml": null
        },
        "telemetry": {
          "dkey_akey_enum_punch.py": null,
          "dkey_akey_enum_punch.yaml": null,
          "pool_space_metrics.py": null,
          "pool_space_metrics.yaml": null,
          "telemetry_pool_metrics.py": null,
          "telemetry_pool_metrics.yaml": null
        },
        "util": {
          "SConscript": null,
          "__init__.py": null,
          "agent_utils.py": null,
          "agent_utils_params.py": null,
          "apricot": {
            "VERSION": null,
            "apricot": {
              "__init__.py": null,
              "test.py": null
            },
            "setup.py": null
          },
          "cart_ctl_utils.py": null,
          "cmocka_utils.py": null,
          "command_utils.py": null,
          "command_utils_base.py": null,
          "configuration_utils.py": null,
          "cont_security_test_base.py": null,
          "container_rf_test_base.py": null,
          "control_test_base.py": null,
          "daos_core_base.py": null,
          "daos_io_conf.py": null,
          "daos_perf_base.py": null,
          "daos_perf_utils.py": null,
          "daos_racer_utils.py": null,
          "daos_utils.py": null,
          "daos_utils_base.py": null,
          "data_mover_test_base.py": null,
          "data_mover_utils.py": null,
          "data_utils.py": null,
          "dbench_utils.py": null,
          "dfuse_test_base.py": null,
          "dfuse_utils.py": null,
          "distro_utils.py": null,
          "dmg_utils.py": null,
          "dmg_utils_base.py": null,
          "dmg_utils_params.py": null,
          "duns_utils.py": null,
          "ec_utils.py": null,
          "exception_utils.py": null,
          "fault_config_utils.py": null,
          "file_count_test_base.py": null,
          "fio_test_base.py": null,
          "fio_utils.py": null,
          "general_utils.py": null,
          "host_utils.py": null,
          "io_utilities.py": null,
          "ior_intercept_test_base.py": null,
          "ior_test_base.py": null,
          "ior_utils.py": null,
          "job_manager_utils.py": null,
          "logger_utils.py": null,
          "macsio_test_base.py": null,
          "macsio_util.py": null,
          "mdtest_test_base.py": null,
          "mdtest_utils.py": null,
          "mpiio_test_base.py": null,
          "mpiio_utils.py": null,
          "network_utils.py": null,
          "nvme_utils.py": null,
          "oclass_utils.py": null,
          "osa_utils.py": null,
          "package_utils.py": null,
          "performance_test_base.py": null,
          "pool_create_all_base.py": null,
          "pool_security_test_base.py": null,
          "rebuild_test_base.py": null,
          "results_utils.py": null,
          "run_utils.py": null,
          "scrubber_test_base.py": null,
          "scrubber_utils.py": null,
          "security_test_base.py": null,
          "server_utils.py": null,
          "server_utils_base.py": null,
          "server_utils_params.py": null,
          "slurm_utils.py": null,
          "soak_test_base.py": null,
          "soak_utils.py": null,
          "storage_utils.py": null,
          "support_test_base.py": null,
          "telemetry_test_base.py": null,
          "telemetry_utils.py": null,
          "test_utils_base.py": null,
          "test_utils_container.py": null,
          "test_utils_pool.py": null,
          "thread_manager.py": null,
          "user_utils.py": null,
          "verify_perms.py": null,
          "vol_test_base.py": null,
          "write_host_file.py": null,
          "yaml_utils.py": null
        },
        "vmd": {
          "fault_reintegration.py": null,
          "fault_reintegration.yaml": null,
          "led.py": null,
          "led.yaml": null
        }
      },
      "input": {
        "calgary": null
      },
      "jobtest.c": null,
      "obj_ctl.c": null,
      "perf_common.c": null,
      "perf_internal.h": null,
      "rpc": {
        "SConscript": null,
        "rpc_tests.c": null
      },
      "security": {
        "SConscript": null,
        "acl_dump_test.c": null,
        "security_test.c": null
      },
      "simple_array.c": null,
      "simple_common.h": null,
      "simple_dfs.c": null,
      "simple_obj.c": null,
      "suite": {
        "SConscript": null,
        "daos_aggregate_ec.c": null,
        "daos_array.c": null,
        "daos_base_tx.c": null,
        "daos_capa.c": null,
        "daos_checksum.c": null,
        "daos_container.c": null,
        "daos_debug_set_params.c": null,
        "daos_dedup.c": null,
        "daos_degrade_ec.c": null,
        "daos_degraded.c": null,
        "daos_dist_tx.c": null,
        "daos_drain_simple.c": null,
        "daos_epoch.c": null,
        "daos_epoch_io.c": null,
        "daos_epoch_recovery.c": null,
        "daos_extend_simple.c": null,
        "daos_iotest.h": null,
        "daos_kv.c": null,
        "daos_md_replication.c": null,
        "daos_mgmt.c": null,
        "daos_nvme_recovery.c": null,
        "daos_obj.c": null,
        "daos_obj_array.c": null,
        "daos_obj_ec.c": null,
        "daos_oid_alloc.c": null,
        "daos_pipeline.c": null,
        "daos_pool.c": null,
        "daos_rebuild.c": null,
        "daos_rebuild_common.c": null,
        "daos_rebuild_ec.c": null,
        "daos_rebuild_simple.c": null,
        "daos_test.c": null,
        "daos_test.h": null,
        "daos_test_common.c": null,
        "daos_upgrade.c": null,
        "daos_verify_consistency.c": null,
        "dfs_par_test.c": null,
        "dfs_sys_unit_test.c": null,
        "dfs_test.c": null,
        "dfs_test.h": null,
        "dfs_unit_test.c": null,
        "dfuse_test.c": null,
        "io_conf": {
          "SConscript": null,
          "daos_generate_io_conf.c": null,
          "daos_io_conf_1": null,
          "daos_io_conf_2": null,
          "daos_io_conf_3": null,
          "daos_io_conf_4": null,
          "daos_io_conf_5": null,
          "daos_run_io_conf.c": null
        }
      },
      "vos_engine.c": null,
      "vos_perf.c": null
    },
    "utils": {
      "SConscript": null,
      "crt_launch": {
        "SConscript": null,
        "crt_launch.c": null
      },
      "ctl": {
        "SConscript": null,
        "cart_ctl.c": null
      },
      "daos_autotest.c": null,
      "daos_dfs_hdlr.c": null,
      "daos_hdlr.c": null,
      "daos_hdlr.h": null,
      "daos_metrics": {
        "SConscript": null,
        "daos_metrics.c": null
      },
      "daos_obj_ctl.c": null,
      "daos_obj_ctl.h": null,
      "self_test": {
        "SConscript": null,
        "self_test.c": null
      },
      "wrap": {
        "SConscript": null,
        "mpi": {
          "SConscript": null,
          "dpar_mpi.c": null,
          "dpar_stub.c": null
        }
      }
    },
    "vea": {
      "README.md": null,
      "SConscript": null,
      "tests": {
        "SConscript": null,
        "vea_stress.c": null,
        "vea_ut.c": null
      },
      "vea_alloc.c": null,
      "vea_api.c": null,
      "vea_free.c": null,
      "vea_hint.c": null,
      "vea_init.c": null,
      "vea_internal.h": null,
      "vea_util.c": null
    },
    "vos": {
      "README.md": null,
      "SConscript": null,
      "evt_iter.c": null,
      "evt_priv.h": null,
      "evtree.c": null,
      "ilog.c": null,
      "ilog.h": null,
      "lru_array.c": null,
      "lru_array.h": null,
      "storage_estimator": {
        "README.md": null,
        "SConscript": null,
        "common": {
          "__init__.py": null,
          "dfs_sb.py": null,
          "explorer.py": null,
          "parse_csv.py": null,
          "tests": {
            "__init__.py": null,
            "pytest.ini": null,
            "storage_estimator.sh": null,
            "storage_estimator_test.py": null,
            "test_files": {
              "test_data.csv": null,
              "test_data_16p2gx.yaml": null,
              "test_data_3gx.yaml": null,
              "test_data_big_16p2gx.yaml": null,
              "test_data_big_3gx.yaml": null,
              "test_data_big_sx.yaml": null,
              "test_data_sx.yaml": null
            },
            "util.py": null
          },
          "util.py": null,
          "vos_size.py": null,
          "vos_structures.py": null
        },
        "daos_storage_estimator.py": null
      },
      "sys_db.c": null,
      "tests": {
        "SConscript": null,
        "bio_ut.c": null,
        "bio_ut.h": null,
        "daos_nvme.conf": null,
        "evt_ctl.c": null,
        "evt_ctl.sh": null,
        "evt_stress.py": null,
        "pool_scrubbing_tests.c": null,
        "vos_cmd.c": null,
        "vos_size_input.yaml": null,
        "vos_tests.c": null,
        "vts_aggregate.c": null,
        "vts_array.c": null,
        "vts_array.h": null,
        "vts_checksum.c": null,
        "vts_common.c": null,
        "vts_common.h": null,
        "vts_container.c": null,
        "vts_dtx.c": null,
        "vts_gc.c": null,
        "vts_ilog.c": null,
        "vts_io.c": null,
        "vts_io.h": null,
        "vts_mvcc.c": null,
        "vts_pm.c": null,
        "vts_pool.c": null,
        "vts_ts.c": null,
        "vts_wal.c": null,
        "wal_ut.c": null
      },
      "vos_aggregate.c": null,
      "vos_common.c": null,
      "vos_container.c": null,
      "vos_csum_recalc.c": null,
      "vos_dtx.c": null,
      "vos_dtx_iter.c": null,
      "vos_gc.c": null,
      "vos_ilog.c": null,
      "vos_ilog.h": null,
      "vos_internal.h": null,
      "vos_io.c": null,
      "vos_iterator.c": null,
      "vos_layout.h": null,
      "vos_obj.c": null,
      "vos_obj.h": null,
      "vos_obj_cache.c": null,
      "vos_obj_index.c": null,
      "vos_overhead.c": null,
      "vos_policy.c": null,
      "vos_policy.h": null,
      "vos_pool.c": null,
      "vos_pool_scrub.c": null,
      "vos_query.c": null,
      "vos_size.c": null,
      "vos_space.c": null,
      "vos_tls.h": null,
      "vos_tree.c": null,
      "vos_ts.c": null,
      "vos_ts.h": null
    }
  },
  "third_party_programs.txt": null,
  "utils": {
    "ansible": {
      "ftest": {
        "README.md": null,
        "ansible.cfg": null,
        "ftest.yml": null,
        "inventory-sample.yml": null,
        "library": {
          "__init__.py": null,
          "daos_hugepages.py": null
        },
        "requirements.txt": null,
        "tasks": {
          "daos_base.yml": null,
          "daos_clients.yml": null,
          "daos_dev.yml": null,
          "daos_servers.yml": null,
          "el8": {
            "clients_dependencies.yml": null,
            "devs_dependencies.yml": null,
            "servers_dependencies.yml": null
          }
        },
        "templates": {
          "daos-launch.sh.j2": null,
          "daos-ld.so.conf.j2": null,
          "daos-make.sh.j2": null,
          "daos_agent.service.j2": null,
          "daos_server.service.j2": null
        },
        "vars": {
          "Rocky8.yml": null,
          "defaults.yml": null
        }
      }
    },
    "build.config": null,
    "certs": {
      "SConscript": null,
      "admin.cnf": null,
      "agent.cnf": null,
      "gen_certificates.sh": null,
      "server.cnf": null,
      "test.cnf": null
    },
    "ci": {
      "gha-file-check.sh": null,
      "run_in_gha.sh": null
    },
    "completion": {
      "daos.bash": null
    },
    "config": {
      "SConscript": null,
      "daos_agent.yml": null,
      "daos_control.yml": null,
      "daos_server.yml": null,
      "examples": {
        "daos_server_local.yml": null,
        "daos_server_mdonssd.yml": null,
        "daos_server_tcp.yml": null,
        "daos_server_ucx.yml": null,
        "daos_server_unittests.yml": null,
        "daos_server_verbs.yml": null
      }
    },
    "cq": {
      "README.md": null,
      "d_logging_check.py": null,
      "daos_pylint.py": null,
      "pylintrc": null,
      "requirements.txt": null,
      "words.dict": null
    },
    "docker": {
      "Dockerfile.checkpatch": null,
      "Dockerfile.code_scanning": null,
      "Dockerfile.el.8": null,
      "Dockerfile.el.9": null,
      "Dockerfile.leap.15": null,
      "Dockerfile.ubuntu": null,
      "README.md": null,
      "examples": {
        "client": {
          ".env": null,
          "README.md": null,
          "daos-agent": {
            "el8": {
              ".dockerignore": null,
              "Dockerfile": null,
              "daos_agent.yml.in": null,
              "run-daos_agent.in": null
            }
          },
          "daos-base": {
            "el8": {
              ".dockerignore": null,
              "Dockerfile": null
            }
          },
          "daos-client": {
            "el8": {
              ".dockerignore": null,
              "Dockerfile": null,
              "daos_agent.yml": null
            }
          },
          "daos-client_agent": {
            "el8": {
              ".dockerignore": null,
              "Dockerfile": null,
              "daos-bash.in": null
            }
          },
          "deploy-docker_stack.sh": null,
          "docker-compose.daos_base.yml": null,
          "docker-compose.daos_client.standalone.yml": null,
          "docker-compose.daos_client_agent.gathered.yml": null,
          "docker-compose.daos_client_agent.standalone.yml": null,
          "docker-stack.daos_client_agent.gathered.yml": null
        }
      },
      "vcluster": {
        ".env": null,
        "README.md": null,
        "daos-admin": {
          "el8": {
            ".dockerignore": null,
            "Dockerfile": null,
            "daos_control.yml.in": null
          }
        },
        "daos-base": {
          "el8": {
            ".dockerignore": null,
            "Dockerfile": null
          }
        },
        "daos-client": {
          "el8": {
            ".dockerignore": null,
            "Dockerfile": null,
            "daos_agent.yml.in": null
          }
        },
        "daos-cm.sh": null,
        "daos-server": {
          "el8": {
            ".dockerignore": null,
            "Dockerfile": null,
            "daos_server.yml.in": null
          }
        },
        "docker-compose.yml": null
      }
    },
    "githooks": {
      "README.md": null,
      "commit-msg": null,
      "commit-msg.d": {
        "10-watermark.py": null
      },
      "find_base.sh": null,
      "git-version.sh": null,
      "pre-commit": null,
      "pre-commit.d": {
        "10-update-copyright": null,
        "20-flake.sh": null,
        "30-yamllint.sh": null,
        "40-clang-format": null,
        "40-gofmt.sh": null,
        "40-pylint.sh": null
      },
      "prepare-commit-msg": null,
      "prepare-commit-msg.d": {
        "10-submodule-update-check.py": null
      }
    },
    "grafana": {
      "DAOS-Grafana-Dashboard.json": null,
      "README.md": null
    },
    "nlt_server.yaml": null,
    "node_local_test.py": null,
    "rpms": {
      "10-daos_server.conf": null,
      "Makefile": null,
      "bz-1955184_find-requires": null,
      "daos.rpmlintrc": null,
      "daos.spec": null,
      "packaging": {
        "Dockerfile.centos.7": null,
        "Dockerfile.coverity": null,
        "Dockerfile.mockbuild": null,
        "Dockerfile.ubuntu.20.04": null,
        "Dockerfile.ubuntu.rolling": null,
        "Makefile_distro_vars.mk": null,
        "Makefile_packaging.mk": null,
        "debian_chrootbuild": null,
        "rpm_chrootbuild": null,
        "rpmlint--ignore-unused-rpmlintrc.patch": null
      }
    },
    "run_utest.py": null,
    "scripts": {
      "helpers": {
        "build_url_repo.sh": null,
        "daos-server-user-setup.sh": null,
        "distro_info.sh": null,
        "install_maldet.sh": null,
        "maven-settings.xml.in": null,
        "repo-helper-el8.sh": null,
        "repo-helper-leap15.sh": null,
        "scan_daos_maldet.sh": null
      },
      "install-el8.sh": null,
      "install-el9.sh": null,
      "install-leap15.sh": null,
      "install-ubuntu.sh": null
    },
    "setup_daos_server_helper.sh": null,
    "sl": {
      "fake_scons": {
        "SCons": {
          "Action": {
            "__init__.py": null
          },
          "Builder": {
            "__init__.py": null
          },
          "Errors": {
            "__init__.py": null
          },
          "Script": {
            "__init__.py": null
          },
          "Subst": {
            "__init__.py": null
          },
          "Tool": {
            "gcc": {
              "__init__.py": null
            }
          },
          "Util": {
            "__init__.py": null
          },
          "Variables": {
            "__init__.py": null
          },
          "Warnings": {
            "__init__.py": null
          },
          "__init__.py": null
        }
      },
      "setup_local.sh": null
    },
    "systemd": {
      "daos_agent.service": null,
      "daos_server.service": null,
      "daosfiles.conf": null
    },
    "test_memcheck.supp": null,
    "utest.yaml": null
  }
}

### Suspected Files ###
--- src/control/server/harness.go
//
// (C) Copyright 2019-2023 Intel Corporation.
//
// SPDX-License-Identifier: BSD-2-Clause-Patent
//

package server

import (
	"context"
	"os"
	"sync"

	"github.com/pkg/errors"
	"google.golang.org/protobuf/proto"

	commonpb "github.com/daos-stack/daos/src/control/common/proto"
	ctlpb "github.com/daos-stack/daos/src/control/common/proto/ctl"
	srvpb "github.com/daos-stack/daos/src/control/common/proto/srv"
	"github.com/daos-stack/daos/src/control/drpc"
	"github.com/daos-stack/daos/src/control/lib/atm"
	"github.com/daos-stack/daos/src/control/lib/ranklist"
	"github.com/daos-stack/daos/src/control/logging"
	"github.com/daos-stack/daos/src/control/server/config"
	"github.com/daos-stack/daos/src/control/server/storage"
	"github.com/daos-stack/daos/src/control/system"
)

// Engine defines an interface to be implemented by engine instances.
//
// NB: This interface is way too big right now; need to refactor in order
// to limit scope.
type Engine interface {
	// These are definitely wrong... They indicate that too much internal
	// information is being leaked outside of the implementation.
	newCret(string, error) *ctlpb.NvmeControllerResult
	tryDrpc(context.Context, drpc.Method) *system.MemberResult
	requestStart(context.Context)
	updateInUseBdevs(context.Context, []storage.NvmeController, uint64, uint64) ([]storage.NvmeController, error)
	isAwaitingFormat() bool

	// These methods should probably be replaced by callbacks.
	NotifyDrpcReady(*srvpb.NotifyReadyReq)
	NotifyStorageReady()
	BioErrorNotify(*srvpb.BioErrorReq)

	// These methods should probably be refactored out into functions that
	// accept the engine instance as a parameter.
	GetBioHealth(context.Context, *ctlpb.BioHealthReq) (*ctlpb.BioHealthResp, error)
	ScanBdevTiers() ([]storage.BdevTierScanResult, error)
	ListSmdDevices(context.Context, *ctlpb.SmdDevReq) (*ctlpb.SmdDevResp, error)
	StorageFormatSCM(context.Context, bool) *ctlpb.ScmMountResult
	StorageFormatNVMe() commonpb.NvmeControllerResults

	// This is a more reasonable surface that will be easier to maintain and test.
	CallDrpc(context.Context, drpc.Method, proto.Message) (*drpc.Response, error)
	GetRank() (ranklist.Rank, error)
	GetTargetCount() int
	Index() uint32
	IsStarted() bool
	IsReady() bool
	LocalState() system.MemberState
	RemoveSuperblock() error
	Run(context.Context, bool)
	SetupRank(context.Context, ranklist.Rank, uint32) error
	Stop(os.Signal) error
	OnInstanceExit(...onInstanceExitFn)
	OnReady(...onReadyFn)
	GetStorage() *storage.Provider
}

// EngineHarness is responsible for managing Engine instances.
type EngineHarness struct {
	sync.RWMutex
	log           logging.Logger
	instances     []Engine
	started       atm.Bool
	faultDomain   *system.FaultDomain
	onDrpcFailure []func(context.Context, error)
}

// NewEngineHarness returns an initialized *EngineHarness.
func NewEngineHarness(log logging.Logger) *EngineHarness {
	return &EngineHarness{
		log:       log,
		instances: make([]Engine, 0),
	}
}

// WithFaultDomain adds a fault domain to the EngineHarness.
func (h *EngineHarness) WithFaultDomain(fd *system.FaultDomain) *EngineHarness {
	h.faultDomain = fd
	return h
}

// isStarted indicates whether the EngineHarness is in a running state.
func (h *EngineHarness) isStarted() bool {
	return h.started.Load()
}

// Instances safely returns harness' EngineInstances.
func (h *EngineHarness) Instances() []Engine {
	h.RLock()
	defer h.RUnlock()
	return h.instances
}

// FilterInstancesByRankSet returns harness' EngineInstances that match any
// of a list of ranks derived from provided rank set string.
func (h *EngineHarness) FilterInstancesByRankSet(ranks string) ([]Engine, error) {
	h.RLock()
	defer h.RUnlock()

	rankList, err := ranklist.ParseRanks(ranks)
	if err != nil {
		return nil, err
	}
	out := make([]Engine, 0)

	for _, i := range h.instances {
		r, err := i.GetRank()
		if err != nil {
			continue // no rank to check against
		}
		if r.InList(rankList) {
			out = append(out, i)
		}
	}

	return out, nil
}

// AddInstance adds a new Engine instance to be managed.
func (h *EngineHarness) AddInstance(ei Engine) error {
	if h.isStarted() {
		return errors.New("can't add instance to already-started harness")
	}

	h.Lock()
	defer h.Unlock()
	if indexSetter, ok := ei.(interface{ setIndex(uint32) }); ok {
		indexSetter.setIndex(uint32(len(h.instances)))
	}

	h.instances = append(h.instances, ei)
	return nil
}

// OnDrpcFailure registers callbacks to be invoked on dRPC call failure.
func (h *EngineHarness) OnDrpcFailure(fns ...func(ctx context.Context, err error)) {
	h.Lock()
	defer h.Unlock()

	h.onDrpcFailure = append(h.onDrpcFailure, fns...)
}

// CallDrpc calls the supplied dRPC method on a managed I/O Engine instance.
func (h *EngineHarness) CallDrpc(ctx context.Context, method drpc.Method, body proto.Message) (resp *drpc.Response, err error) {
	defer func() {
		if err == nil {
			return
		}
		// If the context was canceled, don't trigger callbacks.
		if errors.Cause(err) == context.Canceled {
			return
		}
		// Don't trigger callbacks for these errors which can happen when
		// things are still starting up.
		if err == FaultHarnessNotStarted || err == errEngineNotReady {
			return
		}

		h.log.Debugf("invoking dRPC failure handlers for %s", err)
		h.RLock()
		defer h.RUnlock()
		for _, fn := range h.onDrpcFailure {
			fn(ctx, err)
		}
	}()

	if !h.isStarted() {
		return nil, FaultHarnessNotStarted
	}

	// Iterate through the managed instances, looking for
	// the first one that is available to service the request.
	// If the request fails, that error will be returned.
	for _, i := range h.Instances() {
		resp, err = i.CallDrpc(ctx, method, body)

		switch errors.Cause(err) {
		case errEngineNotReady, errDRPCNotReady, FaultDataPlaneNotStarted:
			continue
		default:
			return
		}
	}

	return
}

type dbLeader interface {
	IsLeader() bool
	ShutdownRaft() error
	ResignLeadership(error) error
}

// Start starts harness by setting up and starting dRPC before initiating
// configured instances' processing loops.
//
// Run until harness is shutdown.
func (h *EngineHarness) Start(ctx context.Context, db dbLeader, cfg *config.Server) error {
	if h.isStarted() {
		return errors.New("can't start: harness already started")
	}

	if cfg == nil {
		return errors.New("nil cfg supplied to Start()")
	}

	// Now we want to block any RPCs that might try to mess with storage
	// (format, firmware update, etc) before attempting to start I/O Engines
	// which are using the storage.
	h.started.SetTrue()
	defer h.started.SetFalse()

	for _, ei := range h.Instances() {
		ei.Run(ctx, cfg.RecreateSuperblocks)
	}

	h.OnDrpcFailure(func(_ context.Context, errIn error) {
		if !db.IsLeader() {
			return
		}

		switch errors.Cause(errIn) {
		case errDRPCNotReady, FaultDataPlaneNotStarted:
			break
		default:
			// Don't shutdown on other failures which are
			// not related to dRPC communications.
			return
		}

		// If we cannot service a dRPC request on this node,
		// we should resign as leader in order to force a new
		// leader election.
		if err := db.ResignLeadership(errIn); err != nil {
			h.log.Errorf("failed to resign leadership after dRPC failure: %s", err)
		}
	})

	<-ctx.Done()
	h.log.Debug("shutting down harness")

	return ctx.Err()
}

// readyRanks returns rank assignment of configured harness instances that are
// in a ready state. Rank assignments can be nil.
func (h *EngineHarness) readyRanks() []ranklist.Rank {
	h.RLock()
	defer h.RUnlock()

	ranks := make([]ranklist.Rank, 0)
	for idx, ei := range h.instances {
		if ei.IsReady() {
			rank, err := ei.GetRank()
			if err != nil {
				h.log.Errorf("instance %d: no rank (%s)", idx, err)
				continue
			}
			ranks = append(ranks, rank)
		}
	}

	return ranks
}


--- src/control/server/ctl_smd_rpc.go
//
// (C) Copyright 2020-2023 Intel Corporation.
//
// SPDX-License-Identifier: BSD-2-Clause-Patent
//

package server

import (
	"context"
	"fmt"
	"sort"
	"strings"
	"time"

	uuid "github.com/google/uuid"
	"github.com/pkg/errors"
	"google.golang.org/protobuf/proto"

	"github.com/daos-stack/daos/src/control/common"
	"github.com/daos-stack/daos/src/control/common/proto/convert"
	ctlpb "github.com/daos-stack/daos/src/control/common/proto/ctl"
	"github.com/daos-stack/daos/src/control/drpc"
	"github.com/daos-stack/daos/src/control/lib/daos"
	"github.com/daos-stack/daos/src/control/lib/hardware"
	"github.com/daos-stack/daos/src/control/lib/ranklist"
	"github.com/daos-stack/daos/src/control/logging"
)

// Set as variables so can be overwritten during unit testing.
var (
	baseDevReplaceBackoff      = 250 * time.Millisecond
	maxDevReplaceBackoffFactor = 7 // 8s
	maxDevReplaceRetries       = 20
)

func queryRank(reqRank uint32, engineRank ranklist.Rank) bool {
	rr := ranklist.Rank(reqRank)
	if rr.Equals(ranklist.NilRank) {
		return true
	}
	return rr.Equals(engineRank)
}

func (svc *ControlService) querySmdDevices(ctx context.Context, req *ctlpb.SmdQueryReq, resp *ctlpb.SmdQueryResp) error {
	for _, ei := range svc.harness.Instances() {
		if !ei.IsReady() {
			svc.log.Debugf("skipping not-ready instance %d", ei.Index())
			continue
		}

		engineRank, err := ei.GetRank()
		if err != nil {
			return err
		}
		if !queryRank(req.GetRank(), engineRank) {
			continue
		}

		rResp := new(ctlpb.SmdQueryResp_RankResp)
		rResp.Rank = engineRank.Uint32()

		listDevsResp, err := ei.ListSmdDevices(ctx, new(ctlpb.SmdDevReq))
		if err != nil {
			return errors.Wrapf(err, "rank %d", engineRank)
		}

		if len(listDevsResp.Devices) == 0 {
			rResp.Devices = nil
			resp.Ranks = append(resp.Ranks, rResp)
			continue
		}

		// For each SmdDevice returned in list devs response, append a SmdDeviceWithHealth.
		for _, sd := range listDevsResp.Devices {
			rResp.Devices = append(rResp.Devices, &ctlpb.SmdQueryResp_SmdDeviceWithHealth{
				Details: sd,
			})
		}
		resp.Ranks = append(resp.Ranks, rResp)

		if req.Uuid != "" {
			found := false
			for _, dev := range rResp.Devices {
				if dev.Details.Uuid == req.Uuid {
					rResp.Devices = []*ctlpb.SmdQueryResp_SmdDeviceWithHealth{dev}
					found = true
					break
				}
			}
			if !found {
				rResp.Devices = nil
			}
		}

		for _, dev := range rResp.Devices {
			state := dev.Details.DevState

			// skip health query if the device is not in a normal or faulty state
			if req.IncludeBioHealth {
				if state != ctlpb.NvmeDevState_NEW {
					health, err := ei.GetBioHealth(ctx, &ctlpb.BioHealthReq{
						DevUuid: dev.Details.Uuid,
					})
					if err != nil {
						return errors.Wrapf(err, "device %q, state %q",
							dev, state)
					}
					dev.Health = health
					continue
				}
				svc.log.Debugf("skip fetching health stats on device %q in NEW state",
					dev, state)
			}
		}
	}

	return nil
}

func (svc *ControlService) querySmdPools(ctx context.Context, req *ctlpb.SmdQueryReq, resp *ctlpb.SmdQueryResp) error {
	for _, ei := range svc.harness.Instances() {
		if !ei.IsReady() {
			svc.log.Debugf("skipping not-ready instance")
			continue
		}

		engineRank, err := ei.GetRank()
		if err != nil {
			return err
		}
		if !queryRank(req.GetRank(), engineRank) {
			continue
		}

		rResp := new(ctlpb.SmdQueryResp_RankResp)
		rResp.Rank = engineRank.Uint32()

		dresp, err := ei.CallDrpc(ctx, drpc.MethodSmdPools, new(ctlpb.SmdPoolReq))
		if err != nil {
			return err
		}

		rankDevResp := new(ctlpb.SmdPoolResp)
		if err = proto.Unmarshal(dresp.Body, rankDevResp); err != nil {
			return errors.Wrap(err, "unmarshal SmdListPools response")
		}

		if rankDevResp.Status != 0 {
			return errors.Wrapf(daos.Status(rankDevResp.Status),
				"rank %d ListPools failed", engineRank)
		}

		if err := convert.Types(rankDevResp.Pools, &rResp.Pools); err != nil {
			return errors.Wrap(err, "failed to convert pool list")
		}
		resp.Ranks = append(resp.Ranks, rResp)

		if req.Uuid != "" {
			found := false
			for _, pool := range rResp.Pools {
				if pool.Uuid == req.Uuid {
					rResp.Pools = []*ctlpb.SmdQueryResp_Pool{pool}
					found = true
					break
				}
			}
			if !found {
				rResp.Pools = nil
			}
		}
	}

	return nil
}

// SmdQuery implements the method defined for the Management Service.
//
// Query SMD info for pools or devices.
func (svc *ControlService) SmdQuery(ctx context.Context, req *ctlpb.SmdQueryReq) (*ctlpb.SmdQueryResp, error) {
	if !svc.harness.isStarted() {
		return nil, FaultHarnessNotStarted
	}
	if len(svc.harness.readyRanks()) == 0 {
		return nil, FaultDataPlaneNotStarted
	}

	if req.Uuid != "" && (!req.OmitDevices && !req.OmitPools) {
		return nil, errors.New("UUID is ambiguous when querying both pools and devices")
	}

	resp := new(ctlpb.SmdQueryResp)
	if !req.OmitDevices {
		if err := svc.querySmdDevices(ctx, req, resp); err != nil {
			return nil, err
		}
	}
	if !req.OmitPools {
		if err := svc.querySmdPools(ctx, req, resp); err != nil {
			return nil, err
		}
	}

	return resp, nil
}

type idMap map[string]bool

func (im idMap) Keys() (keys []string) {
	for k := range im {
		keys = append(keys, k)
	}
	return
}

// Split IDs in comma separated string and assign each token to relevant return list.
func extractReqIDs(log logging.Logger, ids string, addrs idMap, uuids idMap) error {
	tokens := strings.Split(ids, ",")

	for _, token := range tokens {
		if addr, e := hardware.NewPCIAddress(token); e == nil && addr.IsVMDBackingAddress() {
			addrs[addr.String()] = true
			continue
		}

		if uuid, e := uuid.Parse(token); e == nil {
			uuids[uuid.String()] = true
			continue
		}

		return errors.Errorf("req id entry %q is neither a valid vmd backing device pci "+
			"address or uuid", token)
	}

	return nil
}

// Union type containing either traddr or uuid.
type devID struct {
	trAddr string
	uuid   string
}

func (id *devID) String() string {
	if id.trAddr != "" {
		return id.trAddr
	}
	return id.uuid
}

type devIDMap map[string]devID

func (dim devIDMap) getFirst() *devID {
	if len(dim) == 0 {
		return nil
	}

	var keys []string
	for key := range dim {
		keys = append(keys, key)
	}
	sort.Strings(keys)

	d := dim[keys[0]]
	return &d
}

type engineDevMap map[Engine]devIDMap

func (edm engineDevMap) add(e Engine, id devID) {
	if _, exists := edm[e]; !exists {
		edm[e] = make(devIDMap)
	}
	if _, exists := edm[e][id.String()]; !exists {
		edm[e][id.String()] = id
	}
}

// Map requested device IDs provided in comma-separated string to the engine that controls the given
// device. Device can be identified either by UUID or transport (PCI) address.
func (svc *ControlService) mapIDsToEngine(ctx context.Context, ids string, useTrAddr bool) (engineDevMap, error) {
	trAddrs := make(idMap)
	devUUIDs := make(idMap)
	matchAll := false

	if ids == "" {
		// Selecting all is not supported unless using transport addresses.
		if !useTrAddr {
			return nil, errors.New("empty id string")
		}
		matchAll = true
	} else {
		// Extract transport addresses and device UUIDs from IDs string.
		if err := extractReqIDs(svc.log, ids, trAddrs, devUUIDs); err != nil {
			return nil, err
		}
	}

	req := &ctlpb.SmdQueryReq{Rank: uint32(ranklist.NilRank)}
	resp := new(ctlpb.SmdQueryResp)
	if err := svc.querySmdDevices(ctx, req, resp); err != nil {
		return nil, err
	}

	edm := make(engineDevMap)

	for _, rr := range resp.Ranks {
		engines, err := svc.harness.FilterInstancesByRankSet(fmt.Sprintf("%d", rr.Rank))
		if err != nil {
			return nil, err
		}
		if len(engines) == 0 {
			return nil, errors.Errorf("failed to retrieve instance for rank %d",
				rr.Rank)
		}
		engine := engines[0]
		for _, dev := range rr.Devices {
			if dev == nil {
				return nil, errors.New("nil device in smd query resp")
			}
			dds := dev.Details
			if dds == nil {
				return nil, errors.New("device with nil details in smd query resp")
			}
			if dds.TrAddr == "" {
				svc.log.Errorf("No transport address associated with device %s",
					dds.Uuid)
			}

			matchUUID := dds.Uuid != "" && devUUIDs[dds.Uuid]

			// Where possible specify the TrAddr over UUID as there may be multiple
			// UUIDs mapping to the same TrAddr.
			if useTrAddr && dds.TrAddr != "" {
				if matchAll || matchUUID || trAddrs[dds.TrAddr] {
					// If UUID matches, add by TrAddr rather than UUID which
					// should avoid duplicate UUID entries for the same TrAddr.
					edm.add(engine, devID{trAddr: dds.TrAddr})
					delete(trAddrs, dds.TrAddr)
					delete(devUUIDs, dds.Uuid)
					continue
				}
			}

			if matchUUID {
				// Only add UUID entry if TrAddr is not available for a device.
				edm.add(engine, devID{uuid: dds.Uuid})
				delete(devUUIDs, dds.Uuid)
			}
		}
	}

	// Check all input IDs have been matched.
	missingKeys := append(devUUIDs.Keys(), trAddrs.Keys()...)
	if len(missingKeys) > 0 {
		return nil, errors.Errorf("ids requested but not found: %v", missingKeys)
	}

	return edm, nil
}

func sendManageReq(c context.Context, e Engine, m drpc.Method, b proto.Message) (*ctlpb.SmdManageResp_Result, error) {
	if !e.IsReady() {
		return &ctlpb.SmdManageResp_Result{
			Status: daos.Unreachable.Int32(),
		}, nil
	}

	dResp, err := e.CallDrpc(c, m, b)
	if err != nil {
		return nil, errors.Wrap(err, "call drpc")
	}

	mResp := new(ctlpb.DevManageResp)
	if err = proto.Unmarshal(dResp.Body, mResp); err != nil {
		return nil, errors.Wrapf(err, "unmarshal %T response", mResp)
	}

	return &ctlpb.SmdManageResp_Result{
		Status: mResp.Status, Device: mResp.Device,
	}, nil
}

func addManageRespIDOnFail(log logging.Logger, res *ctlpb.SmdManageResp_Result, dev *devID) {
	if res == nil || dev == nil || res.Status == 0 {
		return
	}

	log.Errorf("drpc returned status %q on dev %+v", daos.Status(res.Status), dev)
	if res.Device == nil {
		// Populate id so failure can be mapped to a device.
		res.Device = &ctlpb.SmdDevice{
			TrAddr: dev.trAddr, Uuid: dev.uuid,
		}
	}
}

// Retry dev-replace requests as state propagation may take some time after set-faulty call has
// been made to manually trigger a faulty device state.
func replaceDevRetryBusy(ctx context.Context, log logging.Logger, e Engine, req proto.Message) (res *ctlpb.SmdManageResp_Result, err error) {
	for try := uint(0); try < uint(maxDevReplaceRetries); try++ {
		res, err = sendManageReq(ctx, e, drpc.MethodReplaceStorage, req)
		if err != nil {
			return
		}
		if daos.Status(res.Status) != daos.Busy {
			break
		}

		backoff := common.ExpBackoff(baseDevReplaceBackoff, uint64(try),
			uint64(maxDevReplaceBackoffFactor))
		log.Debugf("retrying dev-replace drpc request after %s", backoff)

		select {
		case <-ctx.Done():
			err = ctx.Err()
			return
		case <-time.After(backoff):
		}
	}

	return
}

// SmdManage implements the method defined for the Management Service.
//
// Manage SMD devices.
func (svc *ControlService) SmdManage(ctx context.Context, req *ctlpb.SmdManageReq) (*ctlpb.SmdManageResp, error) {
	if !svc.harness.isStarted() {
		return nil, FaultHarnessNotStarted
	}
	if len(svc.harness.readyRanks()) == 0 {
		return nil, FaultDataPlaneNotStarted
	}

	// Flag indicates whether Device-UUID can be replaced with its parent NVMe controller address.
	var useTrAddrInReq bool
	var ids string

	switch req.Op.(type) {
	case *ctlpb.SmdManageReq_Replace:
		ids = req.GetReplace().OldDevUuid
	case *ctlpb.SmdManageReq_Faulty:
		ids = req.GetFaulty().Uuid
	case *ctlpb.SmdManageReq_Led:
		useTrAddrInReq = true
		ids = req.GetLed().Ids
	default:
		return nil, errors.Errorf("Unrecognized operation in SmdManageReq: %+v", req.Op)
	}

	// Evaluate which engine(s) to send requests to.
	engineDevMap, err := svc.mapIDsToEngine(ctx, ids, useTrAddrInReq)
	if err != nil {
		return nil, errors.Wrap(err, "mapping device identifiers to engine")
	}

	rankResps := []*ctlpb.SmdManageResp_RankResp{}

	for engine, devs := range engineDevMap {
		devResults := []*ctlpb.SmdManageResp_Result{}

		rank, err := engine.GetRank()
		if err != nil {
			return nil, errors.Wrap(err, "retrieving engine rank")
		}

		msg := fmt.Sprintf("CtlSvc.SmdManage dispatch, rank %d: %%s req:%%+v\n", rank)

		// Extract request from oneof field and execute dRPC.
		switch req.Op.(type) {
		case *ctlpb.SmdManageReq_Replace:
			if len(devs) != 1 {
				return nil, errors.New("replace request expects only one device ID")
			}
			dReq := req.GetReplace()
			svc.log.Debugf(msg, "dev-replace", dReq)
			devRes, err := replaceDevRetryBusy(ctx, svc.log, engine, dReq)
			if err != nil {
				return nil, errors.Wrap(err, msg)
			}
			addManageRespIDOnFail(svc.log, devRes, devs.getFirst())
			devResults = append(devResults, devRes)
		case *ctlpb.SmdManageReq_Faulty:
			if len(devs) != 1 {
				return nil, errors.New("set-faulty request expects only one device ID")
			}
			dReq := req.GetFaulty()
			svc.log.Debugf(msg, "set-faulty", dReq)
			devRes, err := sendManageReq(ctx, engine, drpc.MethodSetFaultyState, dReq)
			if err != nil {
				return nil, errors.Wrap(err, msg)
			}
			addManageRespIDOnFail(svc.log, devRes, devs.getFirst())
			devResults = append(devResults, devRes)
		case *ctlpb.SmdManageReq_Led:
			if len(devs) == 0 {
				// Operate on all devices by default.
				return nil, errors.New("led-manage request expects one or more IDs")
			}
			// Multiple addresses are supported in LED request.
			for _, dev := range devs {
				dReq := req.GetLed()
				// ID should by now have been resolved to a transport (PCI) address.
				if dev.trAddr == "" {
					return nil, errors.Errorf("device uuid %s not resolved to a PCI address",
						dev.uuid)
				}
				dReq.Ids = dev.trAddr
				svc.log.Debugf(msg, "led-manage", dReq)
				devRes, err := sendManageReq(ctx, engine, drpc.MethodLedManage, dReq)
				if err != nil {
					return nil, errors.Wrap(err, msg)
				}
				addManageRespIDOnFail(svc.log, devRes, &dev)
				devResults = append(devResults, devRes)
			}
		default:
			return nil, errors.New("unexpected smd manage request type")
		}

		rankResps = append(rankResps, &ctlpb.SmdManageResp_RankResp{
			Rank: rank.Uint32(), Results: devResults,
		})
	}

	sort.Slice(rankResps, func(i, j int) bool {
		return rankResps[i].Rank < rankResps[j].Rank
	})

	resp := &ctlpb.SmdManageResp{Ranks: rankResps}

	return resp, nil
}



---

## **Your Task**:
1. **Use all provided context** (`proto file`, `dependency tree`, and `suspected files`) to understand the problem.
2. **Identify and correct potential issues** in the `suspectedFiles` using the proto definition.
3. **Request additional files** if necessary by marking "%_Reply Required_%" and listing the required file paths at the top of your response.
4. **Modify all necessary files** to ensure a fully working implementation.
5. Provide only the corrected source code for all modified files.
6. Modified files should be in unix diff format.
7. Do not write comments in "%_Reply Required_%" or "%_Modified_%". Comments within code are allowed.

---

## Response ##

### Response Format:
%_Reply Required_%
[
    {File Path_01},
    {File Path_02}
];



%_Modified_%
--- [{Old File Path}]
+++ [{New File Path}]
@@ -[{Old Line Num Start}],[{Old Line Num End}] +[{New Line Num Start}],[{New Line Num End}] @@
- [{Old line}]
+ [{New line}]


%_Comment_%
[{If you have comment. Write here.}]

---

### Response example:
%_Reply Required_%

[
    "/app/src/file1",
    "/app/src/module/module1"
];


%_Modified_%

--- src/proto/ctl/smd.proto
+++ src/proto/ctl/smd.proto
@@ -76,7 +76,7 @@
 }
 
 enum NvmeDevState {
-	UNKNOWN   = 0; // Device state is unknown, zer6o value
+	UNKNOWN   = 0; // Device state is unknown, zero value
 	NORMAL    = 1; // Device is in a normal operational state
 	NEW       = 2; // Device is new and is not yet in-use
 	EVICTED   = 3; // Device is faulty and has been evicted

--- src/proto/ctl/smd.proto
+++ src/proto/ctl/smd.proto
@@ -76,7 +76,7 @@
 }
 
 enum NvmeDevState {
-	UNKNOWN   = 0; // Device state is unknown, zer6o value
+	UNKNOWN   = 0; // Device state is unknown, zero value
 	NORMAL    = 1; // Device is in a normal operational state
 	NEW       = 2; // Device is new and is not yet in-use
 	EVICTED   = 3; // Device is faulty and has been evicted

%_Comment_%
I've reviewed the code and compared it with the proto definitions provided. 

I fixed 5 typos.

%_Response_%: 
 %_Modified_%
--- src/proto/ctl/smd.proto
+++ src/proto/ctl/smd.proto
@@ -76,7 +76,7 @@
 }
 
 enum NvmeDevState {
-	UNKNOWN   = 0; // Device state is unknown, zer6o value
+	UNKNOWN   = 0; // Device state is unknown, zero value
 	NORMAL    = 1; // Device is in a normal operational state
 	NEW       = 2; // Device is new and is not yet in-use
 	EVICTED   = 3; // Device is faulty and has been evicted

--- src/control/server/ctl_smd_rpc.go
+++ src/control/server/ctl_smd_rpc.go
@@ -172,7 +172,7 @@
 				if state != ctlpb.NvmeDevState_NEW {
 					health, err := ei.GetBioHealth(ctx, &ctlpb.BioHealthReq{
 						DevUuid: dev.Details.Uuid,
 					})
 					if err != nil {
 						return errors.Wrapf(err, "device %q, state %q",
 							dev, state)
-					}
+					}
 					dev.Health = health
 					continue
 				}
@@ -395,7 +395,7 @@
 					// If UUID matches, add by TrAddr rather than UUID which
 					// should avoid duplicate UUID entries for the same TrAddr.
 					edm.add(engine, devID{trAddr: dds.TrAddr})
 					delete(trAddrs, dds.TrAddr)
 					delete(devUUIDs, dds.Uuid)
 					continue
 				}
 			}
 
 			if matchUUID {
 				// Only add UUID entry if TrAddr is not available for a device.
				edm.add(engine, devID{uuid: dds.Uuid})
				delete(devUUIDs, dds.Uuid)
 			}
 		}
--- src/control/server/harness.go
+++ src/control/server/harness.go
@@ -135,7 +135,7 @@
 	}

 	for _, i := range h.instances {
 		r, err := i.GetRank()
 		if err != nil {
 			continue // no rank to check against
 		}
-		if r.InList(rankList) {
+		if r.InList(rankList) {
 			out = append(out, i)
 		}
 	}

	return out
}

 ---------- 


{
  "proto_files": [
    {
      "path": "src/client/java/daos-java/src/main/resources/DaosObjectAttribute.proto",
      "content": "syntax = \"proto3\";\npackage objattr;\noption java_package = \"io.daos.obj.attr\";\noption java_outer_classname = \"DaosObjAttrClasses\";\noption java_multiple_files = true;\n\nenum DaosObjSchema {\n  DAOS_OS_SINGLE = 0;   /**< Single stripe object */\n  DAOS_OS_STRIPED = 1;\t/**< Fix striped object */\n  DAOS_OS_DYN_STRIPED = 2;\t/**< Dynamically striped object */\n  DAOS_OS_DYN_CHUNKED = 3;\t/**< Dynamically chunked object */\n}\n\nenum DaosObjResil {\n  DAOS_RES_EC = 0;  /**< Erasure code */\n  DAOS_RES_REPL = 1;  /**< Replication */\n}\n\nmessage DaosRpAttr {\n  uint32 r_proto = 1;\n  uint32 r_num = 2;\n}\n\nmessage DaosEcAttr {\n  uint32 e_k = 1;\n  uint32 e_p = 2;\n  uint32 e_len = 3;\n}\n\nmessage DaosOclassAttr {\n  DaosObjSchema ca_schema = 1;\n  DaosObjResil ca_resil = 2;\n  uint32 ca_resil_degree = 3;\n  uint32 ca_grp_nr = 4;\n  oneof u {\n    DaosRpAttr rp = 5;\n    DaosEcAttr ec = 6;\n  }\n}\n\nmessage DaosObjectAttribute {\n  uint32 oa_rank = 1;\n  DaosOclassAttr oa_oa = 2;\n}\n"
    },
    {
      "path": "src/client/java/daos-java/src/main/resources/DunsAttribute.proto",
      "content": "syntax = \"proto3\";\npackage uns;\noption java_package = \"io.daos.dfs.uns\";\noption java_outer_classname = \"DunsClasses\";\noption java_multiple_files = true;\n\nenum Layout {\n  UNKNOWN = 0;\n  POSIX = 1;\n  HDF5 = 2;\n}\n\nmessage DunsAttribute {\n  string poolId = 1;\n  string contId = 2;\n  Layout layout_type = 3;\n  string object_type = 4;\n  uint64  chunk_size = 5;\n  string rel_path = 6;\n  bool   on_lustre  = 7;\n  bool no_prefix = 9;\n  uint32 flags = 10;\n}\n\n"
    },
    {
      "path": "src/control/vendor/github.com/Jille/raft-grpc-transport/proto/transport.proto",
      "content": "syntax = \"proto3\";\n\noption go_package = \"github.com/Jille/raft-grpc-transport/proto\";\nimport \"google/protobuf/timestamp.proto\";\n\nservice RaftTransport {\n  // AppendEntriesPipeline opens an AppendEntries message stream.\n  rpc AppendEntriesPipeline(stream AppendEntriesRequest) returns (stream AppendEntriesResponse) {}\n\n  // AppendEntries performs a single append entries request / response.\n  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse) {}\n  // RequestVote is the command used by a candidate to ask a Raft peer for a vote in an election.\n  rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse) {}\n  // TimeoutNow is used to start a leadership transfer to the target node.\n  rpc TimeoutNow(TimeoutNowRequest) returns (TimeoutNowResponse) {}\n  // InstallSnapshot is the command sent to a Raft peer to bootstrap its log (and state machine) from a snapshot on another peer.\n  rpc InstallSnapshot(stream InstallSnapshotRequest) returns (InstallSnapshotResponse) {}\n}\n\nmessage RPCHeader {\n\tint64 protocol_version = 1;\n}\n\nmessage Log {\n\tenum LogType {\n\t\tLOG_COMMAND = 0;\n\t\tLOG_NOOP = 1;\n\t\tLOG_ADD_PEER_DEPRECATED = 2;\n\t\tLOG_REMOVE_PEER_DEPRECATED = 3;\n\t\tLOG_BARRIER = 4;\n\t\tLOG_CONFIGURATION = 5;\n\t}\n\tuint64 index = 1;\n\tuint64 term = 2;\n\tLogType type = 3;\n\tbytes data = 4;\n\tbytes extensions = 5;\n\tgoogle.protobuf.Timestamp appended_at = 6;\n}\n\nmessage AppendEntriesRequest {\n\tRPCHeader rpc_header = 1;\n\tuint64 term = 2;\n\tbytes leader = 3;\n\tuint64 prev_log_entry = 4;\n\tuint64 prev_log_term = 5;\n\trepeated Log entries = 6;\n\tuint64 leader_commit_index = 7;\n}\n\nmessage AppendEntriesResponse {\n\tRPCHeader rpc_header = 1;\n\tuint64 term = 2;\n\tuint64 last_log = 3;\n\tbool success = 4;\n\tbool no_retry_backoff = 5;\n}\n\nmessage RequestVoteRequest {\n\tRPCHeader rpc_header = 1;\n\tuint64 term = 2;\n\tbytes candidate = 3;\n\tuint64 last_log_index = 4;\n\tuint64 last_log_term = 5;\n\tbool leadership_transfer = 6;\n}\n\nmessage RequestVoteResponse {\n\tRPCHeader rpc_header = 1;\n\tuint64 term = 2;\n\tbytes peers = 3;\n\tbool granted = 4;\n}\n\nmessage TimeoutNowRequest {\n\tRPCHeader rpc_header = 1;\n}\n\nmessage TimeoutNowResponse {\n\tRPCHeader rpc_header = 1;\n}\n\n// The first InstallSnapshotRequest on the stream contains all the metadata.\n// All further messages contain only data.\nmessage InstallSnapshotRequest {\n\tRPCHeader rpc_header = 1;\n\tint64 snapshot_version = 11;\n\tuint64 term = 2;\n\tbytes leader = 3;\n\tuint64 last_log_index = 4;\n\tuint64 last_log_term = 5;\n\tbytes peers = 6;\n\tbytes configuration = 7;\n\tuint64 configuration_index = 8;\n\tint64 size = 9;\n\n\tbytes data = 10;\n}\n\nmessage InstallSnapshotResponse {\n\tRPCHeader rpc_header = 1;\n\tuint64 term = 2;\n\tbool success = 3;\n}\n"
    },
    {
      "path": "src/control/vendor/google.golang.org/protobuf/types/gofeaturespb/go_features.proto",
      "content": "// Protocol Buffers - Google's data interchange format\n// Copyright 2023 Google Inc.  All rights reserved.\n//\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file or at\n// https://developers.google.com/open-source/licenses/bsd\n\nsyntax = \"proto2\";\n\npackage google.protobuf;\n\nimport \"google/protobuf/descriptor.proto\";\n\noption go_package = \"google.golang.org/protobuf/types/gofeaturespb\";\n\nextend google.protobuf.FeatureSet {\n  optional GoFeatures go = 1002;\n}\n\nmessage GoFeatures {\n  // Whether or not to generate the deprecated UnmarshalJSON method for enums.\n  optional bool legacy_unmarshal_json_enum = 1 [\n    retention = RETENTION_RUNTIME,\n    targets = TARGET_TYPE_ENUM,\n    edition_defaults = { edition: EDITION_PROTO2, value: \"true\" },\n    edition_defaults = { edition: EDITION_PROTO3, value: \"false\" }\n  ];\n}\n"
    },
    {
      "path": "src/proto/ctl/common.proto",
      "content": "// (C) Copyright 2019-2021 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\nsyntax = \"proto3\";\npackage ctl;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/ctl\";\n\nmessage EmptyReq {}\n\nmessage FilePath {\n\tstring path = 1;\n}\n\nenum ResponseStatus {\n\tCTL_SUCCESS = 0;\n\tCTL_IN_PROGRESS = 1;\t// Not yet completed\n\tCTL_WAITING = 2;\t// Blocked\n\tCTL_ERR_CONF = -1;\t// Config file parsing error\n\tCTL_ERR_NVME = -2;\t// NVMe subsystem error\n\tCTL_ERR_SCM = -3;\t// SCM subsystem error\n\tCTL_ERR_APP = -4;\t// Other application error\n\tCTL_ERR_UNKNOWN = -5;\t// Unknown error\n\tCTL_NO_IMPL = -6;\t// No implementation\n}\n\nmessage ResponseState {\n\tResponseStatus status = 1;\n\tstring error = 2;\n\tstring info = 3;\n}\n\n"
    },
    {
      "path": "src/proto/ctl/ctl.proto",
      "content": "//\n// (C) Copyright 2019-2023 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\nsyntax = \"proto3\";\npackage ctl;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/ctl\";\n\nimport \"ctl/storage.proto\";\nimport \"ctl/network.proto\";\nimport \"ctl/firmware.proto\";\nimport \"ctl/smd.proto\";\nimport \"ctl/ranks.proto\";\nimport \"ctl/server.proto\";\nimport \"ctl/support.proto\";\n\n// Service definitions for communications between gRPC management server and\n// client regarding tasks related to DAOS system and server hardware.\n//\n// All Control service RPCs will terminate at gRPC server and do not interact\n// with the Management Service.\nservice CtlSvc {\n\t// Retrieve details of nonvolatile storage on server, including health info\n\trpc StorageScan(StorageScanReq) returns(StorageScanResp) {};\n\t// Format nonvolatile storage devices for use with DAOS\n\trpc StorageFormat(StorageFormatReq) returns(StorageFormatResp) {};\n\t// Rebind SSD from kernel and bind instead to user-space for use with DAOS\n\trpc StorageNvmeRebind(NvmeRebindReq) returns(NvmeRebindResp) {};\n\t// Add newly inserted SSD to DAOS engine config\n\trpc StorageNvmeAddDevice(NvmeAddDeviceReq) returns(NvmeAddDeviceResp) {};\n\t// Perform a fabric scan to determine the available provider, device, NUMA node combinations\n\trpc NetworkScan (NetworkScanReq) returns (NetworkScanResp) {};\n\t// Retrieve firmware details from storage devices on server\n\trpc FirmwareQuery(FirmwareQueryReq) returns (FirmwareQueryResp) {};\n\t// Update firmware on storage devices on server\n\trpc FirmwareUpdate(FirmwareUpdateReq) returns (FirmwareUpdateResp) {};\n\t// Query the per-server metadata\n\trpc SmdQuery(SmdQueryReq) returns (SmdQueryResp) {}\n\t// Manage devices (per-server) identified in SMD table\n\trpc SmdManage(SmdManageReq) returns (SmdManageResp) {}\n\t// Set log level for DAOS I/O Engines on a host.\n\trpc SetEngineLogMasks(SetLogMasksReq) returns (SetLogMasksResp) {}\n\t// Prepare DAOS I/O Engines on a host for controlled shutdown. (gRPC fanout)\n\trpc PrepShutdownRanks(RanksReq) returns (RanksResp) {}\n\t// Stop DAOS I/O Engines on a host. (gRPC fanout)\n\trpc StopRanks(RanksReq) returns (RanksResp) {}\n\t// ResetFormat DAOS I/O Engines on a host. (gRPC fanout)\n\trpc ResetFormatRanks(RanksReq) returns (RanksResp) {}\n\t// Start DAOS I/O Engines on a host. (gRPC fanout)\n\trpc StartRanks(RanksReq) returns (RanksResp) {}\n\t// Perform a Log collection on Servers for support/debug purpose\n\trpc CollectLog (CollectLogReq) returns (CollectLogResp) {};\n}\n"
    },
    {
      "path": "src/proto/ctl/firmware.proto",
      "content": "//\n// (C) Copyright 2020-2021 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\nsyntax = \"proto3\";\npackage ctl;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/ctl\";\n\nimport \"ctl/storage_scm.proto\";\nimport \"ctl/smd.proto\";\n\nmessage FirmwareQueryReq {\n\tbool queryScm = 1; // Should we query SCM devices?\n\tbool queryNvme = 2; // Should we query NVMe devices?\n\trepeated string deviceIDs = 3; // Filter by specific devices\n\tstring modelID = 4; // Filter by model ID\n\tstring firmwareRev = 5; // Filter by current firmware revision\n}\n\nmessage ScmFirmwareQueryResp {\n\tScmModule module = 1; // The module of this firmware\n\tstring activeVersion = 2; // Active FW version\n\tstring stagedVersion = 3; // Staged FW version\n\tuint32 imageMaxSizeBytes = 4; // Maximum size of FW image accepted\n\tuint32 updateStatus = 5; // Status of FW update\n\tstring error = 6; // Error string, if any\n}\n\nmessage NvmeFirmwareQueryResp {\n\tNvmeController device = 1; // Controller information includes FW rev\n}\n\nmessage FirmwareQueryResp {\n\trepeated ScmFirmwareQueryResp scmResults = 1;\n\trepeated NvmeFirmwareQueryResp nvmeResults = 2;\n}\n\nmessage FirmwareUpdateReq {\n\tstring firmwarePath = 1; // Path to firmware file\n\tenum DeviceType {\n\t\tSCM = 0;\n\t\tNVMe = 1;\n\t}\n\tDeviceType type = 2; // Type of device this firmware applies to\n\trepeated string deviceIDs = 3; // Devices this update applies to\n\tstring modelID = 4; // Model ID this update applies to\n\tstring firmwareRev = 5; // Starting FW rev this update applies to\n}\n\nmessage ScmFirmwareUpdateResp {\n\tScmModule module = 1; // SCM device\n\tstring error = 2; // empty if successful\n}\n\nmessage NvmeFirmwareUpdateResp {\n\tstring pciAddr = 1; // PCI address of the NVMe device\n\tstring error = 2; // empty if successful\n}\n\nmessage FirmwareUpdateResp {\n\trepeated ScmFirmwareUpdateResp scmResults = 1; // results for SCM update\n\trepeated NvmeFirmwareUpdateResp nvmeResults = 2; // results for NVMe update\n}\n"
    },
    {
      "path": "src/proto/ctl/network.proto",
      "content": "//\n// (C) Copyright 2019-2021 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\nsyntax = \"proto3\";\npackage ctl;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/ctl\";\n\nmessage NetworkScanReq {\n  string provider = 1;\n  string excludeinterfaces = 2;\n}\n\nmessage NetworkScanResp {\n  repeated FabricInterface interfaces = 1;\n  int32 numacount = 2;\n  int32 corespernuma = 3; // physical cores per numa node\n}\n\nmessage FabricInterface {\n  string provider = 1;\n  string device = 2;\n  uint32 numanode = 3;\n  uint32 priority = 4;\n  uint32 netdevclass = 5;\n}\n"
    },
    {
      "path": "src/proto/ctl/ranks.proto",
      "content": "//\n// (C) Copyright 2020-2021 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\nsyntax = \"proto3\";\npackage ctl;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/ctl\";\n\nimport \"shared/ranks.proto\";\n\n// Generic request indicating which ranks to operate on.\n// Used in gRPC fanout to operate on hosts with multiple ranks.\nmessage RanksReq {\n\tbool force = 3; // force operation\n\tstring ranks = 4; // rankset to operate over\n}\n\n// Generic response containing DER result from multiple ranks.\n// Used in gRPC fanout to operate on hosts with multiple ranks.\nmessage RanksResp {\n\trepeated shared.RankResult results = 1;\n}\n\n"
    },
    {
      "path": "src/proto/ctl/server.proto",
      "content": "//\n// (C) Copyright 2021-2023 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\nsyntax = \"proto3\";\npackage ctl;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/ctl\";\n\n// Control Service Protobuf Definitions related to interactions between\n// DAOS control server and DAOS I/O Engine.\n\n// SetLogMasksReq provides parameters to set system-wide log masks.\nmessage SetLogMasksReq {\n\tstring sys = 1; // DAOS system name\n\tstring masks = 2; // set log masks for a set of facilities to a given level\n\tstring streams = 3; // enable specific set of debug streams to log\n\tstring subsystems = 4; // enable logging of specific subsystems\n\tbool reset_masks = 5; // reset log-masks to engine log_mask value in config\n\tbool reset_streams = 6; // reset debug-streams to DD_MASK env value in config\n\tbool reset_subsystems = 7; // reset enabled-subsystems to DD_SUBSYS env value in config\n}\n\n// SetEngineLogMasksResp returns results of attempts to set engine log masks.\nmessage SetLogMasksResp {\n\tint32 status = 1; // DAOS error code returned from dRPC\n\trepeated string errors = 2; // per-instance error strings\n}\n"
    },
    {
      "path": "src/proto/ctl/smd.proto",
      "content": "//\n// (C) Copyright 2019-2023 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\nsyntax = \"proto3\";\npackage ctl;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/ctl\";\n\n// Control Service Protobuf Definitions related to interactions between\n// DAOS control server and DAOS Blob I/O (BIO) module and Per-Server Metadata\n// (SMD).\n\nmessage BioHealthReq {\n\tstring dev_uuid = 1;\n\tuint64 meta_size = 2;\t// Size of the metadata (i.e. vos file index) blob\n\tuint64 rdb_size = 3;\t// Size of the RDB blob\n}\n\n// BioHealthResp mirrors nvme_health_stats structure.\nmessage BioHealthResp {\n\treserved 1, 2;\n\tuint64 timestamp = 3;\n\t// Device health details\n\tuint32 warn_temp_time = 5;\n\tuint32 crit_temp_time = 6;\n\tuint64 ctrl_busy_time = 7;\n\tuint64 power_cycles = 8;\n\tuint64 power_on_hours = 9;\n\tuint64 unsafe_shutdowns = 10;\n\tuint64 media_errs = 11;\n\tuint64 err_log_entries = 12;\n\t// I/O error counters\n\tuint32 bio_read_errs = 13;\n\tuint32 bio_write_errs = 14;\n\tuint32 bio_unmap_errs = 15;\n\tuint32 checksum_errs = 16;\n\tuint32 temperature = 17; // in Kelvin\n\t// Critical warnings\n\tbool temp_warn = 18;\n\tbool avail_spare_warn = 19;\n\tbool dev_reliability_warn = 20;\n\tbool read_only_warn = 21;\n\tbool volatile_mem_warn = 22; // volatile memory backup\n\tint32 status = 23; // DAOS err code\n\tstring dev_uuid = 24; // UUID of blobstore\n\t// Usage stats\n\tuint64 total_bytes = 25; // size of blobstore\n\tuint64 avail_bytes = 26; // free space in blobstore\n\t// Intel vendor SMART attributes\n\tuint32 program_fail_cnt_norm = 27; // percent remaining\n\tuint64 program_fail_cnt_raw = 28; // current value\n\tuint32 erase_fail_cnt_norm = 29;\n\tuint64 erase_fail_cnt_raw = 30;\n\tuint32 wear_leveling_cnt_norm = 31;\n\tuint32 wear_leveling_cnt_min = 32;\n\tuint32 wear_leveling_cnt_max = 33;\n\tuint32 wear_leveling_cnt_avg = 34;\n\tuint64 endtoend_err_cnt_raw = 35;\n\tuint64 crc_err_cnt_raw = 36;\n\tuint64 media_wear_raw = 37;\n\tuint64 host_reads_raw = 38;\n\tuint64 workload_timer_raw = 39;\n\tuint32 thermal_throttle_status = 40;\n\tuint64 thermal_throttle_event_cnt = 41;\n\tuint64 retry_buffer_overflow_cnt = 42;\n\tuint64 pll_lock_loss_cnt = 43;\n\tuint64 nand_bytes_written = 44;\n\tuint64 host_bytes_written = 45;\n\t// Engine configs properties\n\tuint64 cluster_size = 46;\t\t// blobstore cluster size in bytes\n\tuint64 meta_wal_size = 47;\t\t// metadata WAL blob size\n\tuint64 rdb_wal_size = 48;\t\t// RDB WAL blob size\n}\n\nenum NvmeDevState {\n\tUNKNOWN   = 0; // Device state is unknown, zero value\n\tNORMAL    = 1; // Device is in a normal operational state\n\tNEW       = 2; // Device is new and is not yet in-use\n\tEVICTED   = 3; // Device is faulty and has been evicted\n\tUNPLUGGED = 4; // Device has been physically removed\n}\n\nenum LedState {\n\tNA = 0;\t\t\t// Equivalent to SPDK_VMD_LED_STATE_UNKNOWN\t(VMD not enabled)\n\tQUICK_BLINK = 1;\t// Equivalent to SPDK_VMD_LED_STATE_IDENTIFY\t(4Hz blink)\n\tON = 2;\t\t\t// Equivalent to SPDK_VMD_LED_STATE_FAULT\t(solid on)\n\tSLOW_BLINK = 3;\t\t// Equivalent to SPDK_VMD_LED_STATE_REBUILD\t(1Hz blink)\n\tOFF = 4;\t\t// Equivalent to SPDK_VMD_LED_STATE_OFF\n}\n\n// NvmeController represents an NVMe Controller (SSD).\nmessage NvmeController {\n\t// Namespace represents a namespace created on an NvmeController.\n\tmessage Namespace {\n\t\tuint32 id = 1;\t\t\t// namespace id\n\t\tuint64 size = 2;\t\t// device capacity in bytes\n\t\tstring ctrlr_pci_addr = 3;\t// parent controller PCI address\n\t}\n\n\tstring model = 1;\t\t\t// model name\n\tstring serial = 2;\t\t\t// serial number\n\tstring pci_addr = 3;\t\t\t// pci address\n\tstring fw_rev = 4;\t\t\t// firmware revision\n\tint32 socket_id = 5;\t\t\t// NUMA socket ID\n\tBioHealthResp health_stats = 6;\t\t// controller's health stats\n\trepeated Namespace namespaces = 7;\t// controller's namespaces\n\trepeated SmdDevice smd_devices = 8;     // controller's blobstores\n\tNvmeDevState dev_state = 9;\t\t// NVMe device operational state\n\tLedState led_state = 10;\t\t// NVMe device LED state\n\tstring pci_dev_type = 11;\t\t// PCI device type, vmd or pci\n\tstring vendor_id = 12;\t\t\t// controller's vendor ID\n}\n\n// SmdDevice represents a DAOS BIO device, identified by a UUID written into a label stored on a\n// SPDK blobstore created on a NVMe namespace. Multiple SmdDevices may exist per NVMe controller.\nmessage SmdDevice {\n\treserved 3,4,5;\n\tstring uuid = 1;\t\t// UUID of blobstore\n\trepeated int32 tgt_ids = 2;\t// VOS target IDs\n\tuint64 total_bytes = 6;\t\t// blobstore clusters total bytes\n\tuint64 avail_bytes = 7;\t\t// Available RAW storage for data\n\tuint64 cluster_size = 8;\t// blobstore cluster size in bytes\n\tuint32 rank = 9;\t\t// DAOS I/O Engine using controller\n\tuint32 role_bits = 10;\t\t// Device active roles (bitmask)\n\tuint64 meta_size = 11;\t\t// Size of the metadata (i.e. vos file index) blob\n\tuint64 meta_wal_size = 12;\t// Size of the metadata WAL blob\n\tuint64 rdb_size = 13;\t\t// Size of the RDB blob\n\tuint64 rdb_wal_size = 14;\t// Size of the RDB WAL blob\n\tuint64 usable_bytes = 15;\t// Effective storage available for data\n\tNvmeController ctrlr = 16;\t// Backing NVMe controller of SMD device\n\tuint32 ctrlr_namespace_id = 17;\t// NVMe namespace id hosting SMD blobstore\n}\n\nmessage SmdDevReq {}\n\nmessage SmdDevResp {\n\tint32 status = 1;\n\trepeated SmdDevice devices = 2;\n}\n\nmessage SmdPoolReq {}\n\nmessage SmdPoolResp {\n\tmessage Pool {\n\t\tstring uuid = 1; // UUID of VOS pool\n\t\trepeated int32 tgt_ids = 2; // VOS target IDs\n\t\trepeated uint64 blobs = 3; // SPDK blobs\n\t}\n\tint32 status = 1;\n\trepeated Pool pools = 2;\n}\n\nmessage SmdQueryReq {\n\tbool omit_devices = 1;\t\t// Indicate query should omit devices\n\tbool omit_pools = 2;\t\t// Indicate query should omit pools\n\tbool include_bio_health = 3;\t// Indicate query should include BIO health for devices\n\tstring uuid = 4;\t\t// Constrain query to this UUID (pool or device)\n\tuint32 rank = 5;\t\t// Restrict response to only include info about this rank\n}\n\nmessage SmdQueryResp {\n\tmessage Pool {\n\t\tstring uuid = 1; // UUID of VOS pool\n\t\trepeated int32 tgt_ids = 2; // VOS target IDs\n\t\trepeated uint64 blobs = 3; // SPDK blobs\n\t}\n\tmessage RankResp {\n\t\tuint32 rank = 1; // rank to which this response corresponds\n\t\trepeated SmdDevice devices = 2; // List of devices on the rank\n\t\trepeated Pool pools = 3; // List of pools on the rank\n\t}\n\tint32 status = 1; // DAOS error code\n\trepeated RankResp ranks = 2; // List of per-rank responses\n}\n\nenum LedAction {\n\tGET = 0;\n\tSET = 1;\n\tRESET = 2;\n}\n\nmessage LedManageReq {\n\tstring ids = 1;\t\t\t// List of Device-UUIDs and/or PCI-addresses\n\tLedAction led_action = 3;\t// LED action to perform\n\tLedState led_state = 4;\t\t// LED state to set (used if action is SET)\n\tuint32 led_duration_mins = 5;\t// LED action duration (how long to blink LED in minutes)\n}\n\nmessage DevReplaceReq {\n\tstring old_dev_uuid = 1;\t// UUID of old (hot-removed) blobstore/device\n\tstring new_dev_uuid = 2;\t// UUID of new (hot-plugged) blobstore/device\n\tbool no_reint = 3;\t\t// Skip device reintegration if set\n}\n\nmessage SetFaultyReq {\n\tstring uuid = 1;\t// Device-UUID (as recorded in SMD)\n}\n\nmessage DevManageResp {\n\tint32 status = 1;\t// DAOS error code\n\tSmdDevice device = 2;\t// Details of device that has been managed\n}\n\nmessage SmdManageReq {\n\toneof op{\n\t\tLedManageReq led = 1;\t\t// Request to manage LED state\n\t\tDevReplaceReq replace = 2;\t// Request to replace SMD device\n\t\tSetFaultyReq faulty = 3;\t// Request to set SMD device faulty\n\t}\n}\n\nmessage SmdManageResp {\n\tmessage Result {\n\t\tint32 status = 1;\t\t// DAOS error code\n\t\tSmdDevice device = 2;\n\t}\n\tmessage RankResp {\n\t\tuint32 rank = 1;\t\t// Rank to which this response corresponds\n\t\trepeated Result results = 2;\t// List of device results on the rank\n\t}\n\trepeated RankResp ranks = 1;\t\t// List of per-rank responses\n}\n"
    },
    {
      "path": "src/proto/ctl/storage.proto",
      "content": "//\n// (C) Copyright 2019-2022 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\nsyntax = \"proto3\";\npackage ctl;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/ctl\";\n\nimport \"ctl/storage_nvme.proto\";\nimport \"ctl/storage_scm.proto\";\nimport \"ctl/common.proto\";\n\n// Management Service Protobuf Definitions related to interactions between\n// DAOS control server and locally attached storage.\n\nmessage StorageScanReq {\n\tScanNvmeReq nvme = 1;\n\tScanScmReq scm = 2;\n}\n\nmessage MemInfo {\n\tuint64 hugepages_total = 1;\n\tuint64 hugepages_free = 2;\n\tuint64 hugepages_reserved = 3;\n\tuint64 hugepages_surplus = 4;\n\tuint32 hugepage_size_kb = 5;\n\tuint64 mem_total_kb = 6;\n\tuint64 mem_free_kb = 7;\n\tuint64 mem_available_kb = 8;\n}\n\nmessage StorageScanResp {\n\tScanNvmeResp nvme = 1;\n\tScanScmResp scm = 2;\n\tMemInfo mem_info = 3;\n}\n\nmessage StorageFormatReq {\n\tFormatNvmeReq nvme = 1;\n\tFormatScmReq scm = 2;\n\tbool reformat = 3;\n}\n\nmessage StorageFormatResp {\n\trepeated NvmeControllerResult crets = 1;\t// One per controller format attempt\n\trepeated ScmMountResult mrets = 2;\t\t// One per scm format and mount attempt\n}\n\nmessage NvmeRebindReq {\n\tstring pci_addr = 1;\t// an NVMe controller PCI address\n}\n\nmessage NvmeRebindResp {\n\tResponseState state = 1;\n}\n\nmessage NvmeAddDeviceReq {\n\tstring pci_addr = 1;\t\t// PCI address of NVMe controller to add\n\tuint32 engine_index = 2;\t// Index of DAOS engine to add device to\n\tint32 storage_tier_index = 3;\t// Index of storage tier to add device to\n}\n\nmessage NvmeAddDeviceResp {\n\tResponseState state = 1;\n}\n"
    },
    {
      "path": "src/proto/ctl/storage_nvme.proto",
      "content": "//\n// (C) Copyright 2019-2023 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\nsyntax = \"proto3\";\npackage ctl;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/ctl\";\n\nimport \"ctl/common.proto\";\nimport \"ctl/smd.proto\";\n\n// NVMe Storage Protobuf Definitions related to interactions between\n// DAOS control server and locally attached storage.\n\n// NvmeControllerResult represents state of operation performed on controller.\nmessage NvmeControllerResult {\n\tstring pci_addr = 1;\t\t// PCI address of NVMe controller\n\tResponseState state = 2;\t// state of current operation\n\tuint32 role_bits = 3;\t\t// Device active roles (bitmask)\n}\n\nmessage ScanNvmeReq {\n\tbool Health = 1;\t// Retrieve NVMe device health statistics\n\tbool Meta = 2;\t\t// Retrieve metadata relating to NVMe device\n\tbool Basic = 3;\t\t// Strip NVMe device details to only basic\n\tuint64 MetaSize = 4;\t// Size of the metadata blob\n\tuint64 RdbSize = 5;\t// Size of the RDB blob\n}\n\nmessage ScanNvmeResp {\n\trepeated NvmeController ctrlrs = 1;\n\tResponseState state = 2;\n}\n\nmessage FormatNvmeReq {}\n\n// FormatNvmeResp isn't required because controller results are returned instead\n\n"
    },
    {
      "path": "src/proto/ctl/storage_scm.proto",
      "content": "//\n// (C) Copyright 2019-2024 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\nsyntax = \"proto3\";\npackage ctl;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/ctl\";\n\nimport \"ctl/common.proto\";\n\n// SCM Storage Protobuf Definitions related to interactions between\n// DAOS control server and locally attached storage devices.\n\n// ScmModule represent Storage Class Memory modules installed.\nmessage ScmModule {\n\tuint32 channelid = 1;\t\t// The channel id where module is installed.\n\tuint32 channelposition = 2;\t// The channel position where module is installed.\n\tuint32 controllerid = 3;\t// The memory controller id attached to module.\n\tuint32 socketid = 4;\t\t// The socket id attached to module.\n\tuint32 physicalid = 5;\t\t// The physical id of the module.\n\tuint64 capacity = 6;\t\t// The capacity of the module.\n\tstring uid = 7;\t\t\t// The uid of the module.\n\tstring partNumber = 8;\t\t// The part number of the module.\n\tstring firmwareRevision = 9;\t// Module's active firmware revision\n\tstring healthState      = 10;   // Module's health state.\n}\n\n// ScmNamespace represents SCM namespace as pmem device files created on a ScmRegion.\nmessage ScmNamespace {\n\t// Mount represents a mounted pmem block device.\n\tmessage Mount {\n\t\tstring path = 1;\n\t\tuint64 total_bytes = 2;\n\t\tuint64 avail_bytes = 3;\t\t\t// Available RAW storage for data\n\t\trepeated string device_list = 4;\n\t\tstring class = 5;\n\t\tuint32 rank = 6;\t\t\t// DAOS I/O Engine using SCM devices\n\t\tuint64 usable_bytes = 7;\t\t// Effective storage available for data\n\t}\n\tstring uuid = 1;\n\tstring blockdev = 2;\n\tstring dev = 3;\t\t\t// ndctl specific device identifier\n\tuint32 numa_node = 4;\n\tuint64 size = 5;\t\t// pmem block device capacity in bytes\n\tMount mount = 6;\t\t// mount OS info\n}\n\n// ScmModuleResult represents operation state for specific SCM/PM module.\n//\n// TODO: replace identifier with serial when returned in scan\nmessage ScmModuleResult {\n\tuint32 physicalid = 1;\t\t// SCM module identifier\n\tResponseState state = 2;\t// state of current operation\n}\n\n// ScmMountResult represents operation state for specific SCM mount point.\nmessage ScmMountResult {\n\tstring mntpoint = 1;\t\t// Path where device or tmpfs is mounted\n\tResponseState state = 2;\t// state of current operation\n\tuint32 instanceidx = 3;\t\t// Index of I/O Engine instance\n}\n\nmessage PrepareScmReq {\n\tbool reset = 1;\t\t\t// Reset SCM devices to memory mode\n}\n\nmessage PrepareScmResp {\n\trepeated ScmNamespace namespaces = 1;\t// Existing namespace devices (new and old)\n\tResponseState state = 2;\n\tbool rebootrequired = 3;\n}\n\nmessage ScanScmReq {\n\tbool usage = 1;\t\t\t// Populate usage statistics in scan\n}\n\nmessage ScanScmResp {\n\trepeated ScmModule modules = 1;\n\trepeated ScmNamespace namespaces = 2;\n\tResponseState state = 3;\n}\n\nmessage FormatScmReq {}\n// TODO: format should return existing / new mounts\n\n// FormatScmResp isn't required because SCM mount results are returned instead\n"
    },
    {
      "path": "src/proto/ctl/support.proto",
      "content": "//\n// (C) Copyright 2022-2023 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\nsyntax = \"proto3\";\npackage ctl;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/ctl\";\n\n// Management Service Protobuf Definitions related to collect-log for support purpose.\n\nmessage CollectLogReq {\n  string TargetFolder = 1;\n  string ExtraLogsDir = 2;\n  string AdminNode = 3;\n  bool JsonOutput = 4;\n  int32 LogFunction = 5;\n  string LogCmd = 6;\n  string LogStartDate = 7;\n  string LogEndDate = 8;\n  string LogStartTime = 9;\n  string LogEndTime = 10;\n  bool StopOnError = 11;\n}\n\nmessage CollectLogResp {\n  int32 status = 1; // DAOS error code\n}\n"
    },
    {
      "path": "src/proto/drpc.proto",
      "content": "//\n// (C) Copyright 2018-2022 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\nsyntax = \"proto3\";\npackage drpc;\n\noption go_package = \"github.com/daos-stack/daos/src/control/drpc\";\n\n// Call describes a function call to be executed over the dRPC channel.\nmessage Call {\n\tint32 module = 1; // ID of the module to process the call.\n\tint32 method = 2; // ID of the method to be executed.\n\tint64 sequence = 3; // Sequence number for matching a response to this call.\n\tbytes body = 4; // Input payload to be used by the method.\n}\n\n// Status represents the valid values for a response status.\nenum Status {\n\tSUCCESS = 0; // The method executed and provided a response payload, if needed. Otherwise, the method simply succeeded.\n\tSUBMITTED = 1; // The method has been queued for asynchronous execution.\n\tFAILURE = 2; // The method has failed and did not provide a response payload.\n\tUNKNOWN_MODULE = 3; // The requested module does not exist.\n\tUNKNOWN_METHOD = 4; // The requested method does not exist.\n\tFAILED_UNMARSHAL_CALL = 5; // Could not unmarshal the incoming call.\n\tFAILED_UNMARSHAL_PAYLOAD = 6; // Could not unmarshal the method-specific payload of the incoming call.\n\tFAILED_MARSHAL = 7; // Generated a response payload, but couldn't marshal it into the response.\n}\n\n// Response describes the result of a dRPC call.\nmessage Response {\n\tint64 sequence = 1; // Sequence number of the Call that triggered this response.\n\tStatus status = 2; // High-level status of the RPC. If SUCCESS, method-specific status may be included in the body.\n\tbytes body = 3; // Output payload produced by the method.\n}\n"
    },
    {
      "path": "src/proto/mgmt/acl.proto",
      "content": "//\n// (C) Copyright 2019-2023 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\nsyntax = \"proto3\";\npackage mgmt;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/mgmt\";\n\n// Access Control List related protobuf structures\n\n// Access control list and ownership information\nmessage AccessControlList {\n\trepeated string entries = 1; // List of ACEs in short string format\n\tstring owner_user = 2; // Name of user that owns the resource\n\tstring owner_group = 3; // Name of group that owns the resource\n}\n\n// Response to ACL-related requests includes the command status and current ACL\nmessage ACLResp {\n\tint32 status = 1; // DAOS error code\n\tAccessControlList acl = 2;\n}\n\n// Request to fetch an ACL\nmessage GetACLReq {\n\tstring sys = 1; // DAOS system identifier\n\tstring id = 2; // Target UUID or label\n\trepeated uint32 svc_ranks = 3; // List of pool service ranks\n}\n\n// Request to modify an ACL\n// Results depend on the specific modification command.\nmessage ModifyACLReq {\n\tstring sys = 1; // DAOS system identifier\n\tstring id = 2; // Target UUID or label\n\trepeated string entries = 3; // List of ACEs to overwrite ACL with\n\trepeated uint32 svc_ranks = 4; // List of pool service ranks\n}\n\n// Delete a principal's entry from the ACL\nmessage DeleteACLReq {\n\tstring sys = 1; // DAOS system identifier\n\tstring id = 2; // Target UUID or label\n\tstring principal = 3; // Principal whose entry is to be deleted\n\trepeated uint32 svc_ranks = 4; // List of pool service ranks\n}\n"
    },
    {
      "path": "src/proto/mgmt/cont.proto",
      "content": "//\n// (C) Copyright 2020-2021 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\nsyntax = \"proto3\";\npackage mgmt;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/mgmt\";\n\n// Management Service Protobuf Definitions related to interactions between\n// DAOS control server and DAOS containers.\n\n// ContSetOwnerReq supplies new pool parameters.\nmessage ContSetOwnerReq {\n\tstring sys = 1; // DAOS system identifier\n\tstring contUUID = 2; // UUID of the container\n\tstring poolUUID = 3; // UUID of the pool that the container is in\n\tstring owneruser = 4; // formatted user e.g. \"bob@\"\n\tstring ownergroup = 5; // formatted group e.g. \"builders@\"\n\trepeated uint32 svc_ranks = 6; // List of pool service ranks\n}\n\n// ContSetOwnerResp returns created pool uuid and ranks.\nmessage ContSetOwnerResp {\n\tint32 status = 1; // DAOS error code\n}\n"
    },
    {
      "path": "src/proto/mgmt/mgmt.proto",
      "content": "//\n// (C) Copyright 2019-2022 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\nsyntax = \"proto3\";\npackage mgmt;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/mgmt\";\n\nimport \"shared/event.proto\";\nimport \"mgmt/pool.proto\";\nimport \"mgmt/cont.proto\";\nimport \"mgmt/svc.proto\";\nimport \"mgmt/acl.proto\"; // ACL-related requests\nimport \"mgmt/system.proto\";\n\n// Management Service is replicated on a small number of servers in the system,\n// these requests will be processed on a host that is a member of the management\n// service.\n//\n// MgmtSvc RPCs will be forwarded over dRPC to be handled in data plane or\n// forwarded over gRPC to be handled by the management service.\nservice MgmtSvc {\n\t// Join the server described by JoinReq to the system.\n\trpc Join(JoinReq) returns (JoinResp) {}\n\t// ClusterEvent notify MS of a RAS event in the cluster.\n\trpc ClusterEvent(shared.ClusterEventReq) returns (shared.ClusterEventResp) {}\n\t// LeaderQuery provides a mechanism for clients to discover\n\t// the system's current Management Service leader\n\trpc LeaderQuery(LeaderQueryReq) returns (LeaderQueryResp) {}\n\t// Create a DAOS pool allocated across a number of ranks\n\trpc PoolCreate(PoolCreateReq) returns (PoolCreateResp) {}\n\t// Destroy a DAOS pool allocated across a number of ranks.\n\trpc PoolDestroy(PoolDestroyReq) returns (PoolDestroyResp) {}\n\t// Evict a DAOS pool's connections.\n\trpc PoolEvict(PoolEvictReq) returns (PoolEvictResp) {}\n\t// Exclude a pool target.\n\trpc PoolExclude(PoolExcludeReq) returns (PoolExcludeResp) {}\n\t// Drain a pool target.\n\trpc PoolDrain(PoolDrainReq) returns (PoolDrainResp) {}\n\t// Extend a pool.\n\trpc PoolExtend(PoolExtendReq) returns (PoolExtendResp) {}\n\t// Reintegrate a pool target.\n\trpc PoolReintegrate(PoolReintegrateReq) returns (PoolReintegrateResp) {}\n\t// PoolQuery queries a DAOS pool.\n\trpc PoolQuery(PoolQueryReq) returns (PoolQueryResp) {}\n\t// PoolQueryTarget queries a DAOS storage target.\n\trpc PoolQueryTarget(PoolQueryTargetReq) returns (PoolQueryTargetResp) {}\n\t// Set a DAOS pool property.\n\trpc PoolSetProp(PoolSetPropReq) returns (PoolSetPropResp) {}\n\t// Get a DAOS pool property list.\n\trpc PoolGetProp(PoolGetPropReq) returns (PoolGetPropResp) {}\n\t// Fetch the Access Control List for a DAOS pool.\n\trpc PoolGetACL(GetACLReq) returns (ACLResp) {}\n\t// Overwrite the Access Control List for a DAOS pool with a new one.\n\trpc PoolOverwriteACL(ModifyACLReq) returns (ACLResp) {}\n\t// Update existing the Access Control List for a DAOS pool with new entries.\n\trpc PoolUpdateACL(ModifyACLReq) returns (ACLResp) {}\n\t// Delete an entry from a DAOS pool's Access Control List.\n\trpc PoolDeleteACL(DeleteACLReq) returns (ACLResp) {}\n\t// Get the information required by libdaos to attach to the system.\n\trpc GetAttachInfo(GetAttachInfoReq) returns (GetAttachInfoResp) {}\n\t// List all pools in a DAOS system: basic info: UUIDs, service ranks.\n\trpc ListPools(ListPoolsReq) returns (ListPoolsResp) {}\n\t// List all containers in a pool\n\trpc ListContainers(ListContReq) returns (ListContResp) {}\n\t// Change the owner of a DAOS container\n\trpc ContSetOwner(ContSetOwnerReq) returns (ContSetOwnerResp) {}\n\t// Query DAOS system status\n\trpc SystemQuery(SystemQueryReq) returns(SystemQueryResp) {}\n\t// Stop DAOS system (shutdown data-plane instances)\n\trpc SystemStop(SystemStopReq) returns(SystemStopResp) {}\n\t// Start DAOS system (restart data-plane instances)\n\trpc SystemStart(SystemStartReq) returns(SystemStartResp) {}\n\t// Exclude DAOS ranks\n\trpc SystemExclude(SystemExcludeReq) returns(SystemExcludeResp) {}\n\t// Erase DAOS system database prior to reformat\n\trpc SystemErase(SystemEraseReq) returns(SystemEraseResp) {}\n\t// Clean up leaked resources for a given node\n\trpc SystemCleanup(SystemCleanupReq) returns(SystemCleanupResp){}\n\t// PoolUpgrade queries a DAOS pool.\n\trpc PoolUpgrade(PoolUpgradeReq) returns (PoolUpgradeResp) {}\n\t// Set a system attribute or attributes.\n\trpc SystemSetAttr(SystemSetAttrReq) returns (DaosResp) {}\n\t// Get a system attribute or attributes.\n\trpc SystemGetAttr(SystemGetAttrReq) returns (SystemGetAttrResp) {}\n\t// Set a system property or properties.\n\trpc SystemSetProp(SystemSetPropReq) returns (DaosResp) {}\n\t// Get a system property or properties.\n\trpc SystemGetProp(SystemGetPropReq) returns (SystemGetPropResp) {}\n}\n"
    },
    {
      "path": "src/proto/mgmt/pool.proto",
      "content": "//\n// (C) Copyright 2019-2023 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\nsyntax = \"proto3\";\npackage mgmt;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/mgmt\";\n\n// Management Service Protobuf Definitions related to interactions between\n// DAOS control server and DAOS pools.\n\n// PoolCreateReq supplies new pool parameters.\nmessage PoolCreateReq {\n\tstring uuid = 1; // UUID for new pool, generated on the client\n\tstring sys = 2; // DAOS system identifier\n\tstring user = 3; // formatted user e.g. \"bob@\"\n\tstring usergroup = 4; // formatted group e.g. \"builders@\"\n\trepeated string acl = 5; // Access Control Entries in short string format\n\trepeated PoolProperty properties = 6; // Pool properties to be set\n\n\t// The minimal fault domain tree format consists of a set of tuples\n\t// representing members of the tree in a breadth-first traversal order.\n\t// Each domain above rank consists of: (level, id, num children)\n\t// Each rank consists of: (rank number)\n\trepeated uint32 faultDomains = 7; // Fault domain tree, minimal format\n\tuint32 numsvcreps = 8; // desired number of pool service replicas\n\tuint64 totalbytes = 9; // Total pool size in bytes (auto config)\n\trepeated double tierratio = 10; // Ratio of storage tiers expressed as % of totalbytes (auto config)\n\tuint32 numranks = 11; // Number of target ranks to use (auto config)\n\trepeated uint32 ranks = 12; // target ranks (manual config)\n\trepeated uint64 tierbytes = 13; // Size in bytes of storage tiers (manual config)\n\tuint64 meta_blob_size     = 14; // Size in bytes of metadata blob on SSD (manual config)\n}\n\n// PoolCreateResp returns created pool uuid and ranks.\nmessage PoolCreateResp {\n\tint32 status = 1; // DAOS error code\n\tuint32 leader = 2; // Current service leader\n\trepeated uint32 svc_reps = 3; // pool service replica ranks\n\trepeated uint32 tgt_ranks = 4; // pool target ranks\n\trepeated uint64 tier_bytes = 5; // storage tiers allocated to pool\n\tuint64 meta_blob_size     = 6; // Size in bytes of metadata blob on SSD (manual config)\n}\n\n// PoolDestroyReq supplies pool identifier and force flag.\nmessage PoolDestroyReq {\n\tstring sys = 1; // DAOS system identifier\n\tstring id = 2; // uuid or label of pool to destroy\n\tbool force = 3; // destroy regardless of active connections\n\trepeated uint32 svc_ranks = 4; // List of pool service ranks\n\tbool recursive = 5; // destroy regardless of any child containers\n}\n\n// PoolDestroyResp returns resultant state of destroy operation.\nmessage PoolDestroyResp {\n\tint32 status = 1; // DAOS error code\n}\n\n// PoolEvictReq supplies pool identifier.\nmessage PoolEvictReq {\n\tstring sys = 1; // DAOS system identifier\n\tstring id = 2; // uuid or label of pool to evict\n\trepeated uint32 svc_ranks = 3; // List of pool service ranks\n\trepeated string handles = 4; // Optional list of handles to evict (Mutually exclusive with destroy/force_destroy)\n\tbool destroy = 5; // If true, evict is first step of a pool destroy operation\n\tbool force_destroy = 6; // If true and destroy=true, forcibly closes open pool handles\n\tstring machine = 7; // Optional machine name to evict handles for (Mutually exclusive with handles)\n}\n\n// PoolEvictResp returns resultant state of evict operation.\nmessage PoolEvictResp {\n\tint32 status = 1; // DAOS error code\n\tint32 count = 2; // Count of handles evicted\n}\n\n// PoolExcludeReq supplies pool identifier, rank, and target_idxs.\nmessage PoolExcludeReq {\n\tstring sys = 1; // DAOS system identifier\n\tstring id = 2; // uuid or label of pool to exclude some targets\n\tuint32 rank = 3; // target to move to the down state\n\trepeated uint32 targetidx = 4; // target ranks\n\trepeated uint32 svc_ranks = 5; // List of pool service ranks\n}\n\n// PoolExcludeResp returns resultant state of Exclude operation.\nmessage PoolExcludeResp {\n\tint32 status = 1; // DAOS error code\n}\n\n// PoolDrainReq supplies pool identifier, rank, and target_idxs.\nmessage PoolDrainReq {\n\tstring sys = 1; // DAOS system identifier\n\tstring id = 2; // uuid or label of pool to drain some targets\n\tuint32 rank = 3; // rank to move to the down state\n\trepeated uint32 targetidx = 4; // rank targets\n\trepeated uint32 svc_ranks = 5; // List of pool service ranks\n}\n\n// PoolDrainResp returns resultant state of Drain operation.\nmessage PoolDrainResp {\n\tint32 status = 1; // DAOS error code\n}\n\n// PoolExtendReq supplies pool identifier and rank list.\nmessage PoolExtendReq {\n\tstring sys = 1; // DAOS system identifier\n\tstring id = 2; // uuid or label of pool to add target up to\n\trepeated uint32 ranks = 3; // ranks\n\trepeated uint32 svc_ranks = 4; // List of pool service ranks\n\trepeated uint64 tierbytes = 5; // Size in bytes of storage tiers\n\trepeated uint32 faultDomains = 6; // fault domain tree, minimal format\n}\n\n// PoolExtendResp returns resultant state of Extend operation.\nmessage PoolExtendResp {\n\tint32 status = 1; // DAOS error code\n\trepeated uint64 tier_bytes = 2; // storage tiers allocated to pool\n}\n\n// PoolReintegrateReq supplies pool identifier, rank, and target_idxs.\nmessage PoolReintegrateReq {\n\tstring sys = 1; // DAOS system identifier\n\tstring id = 2; // uuid or label of pool to add target up to\n\tuint32 rank = 3; // target to move to the up state\n\trepeated uint32 targetidx = 4; // target ranks\n\trepeated uint32 svc_ranks = 5; // List of pool service ranks\n\trepeated uint64 tierbytes = 6; // Size in bytes of storage tiers\n}\n\n// PoolReintegrateResp returns resultant state of Reintegrate operation.\nmessage PoolReintegrateResp {\n\tint32 status = 1; // DAOS error code\n}\n\n// ListPoolsReq represents a request to list pools on a given DAOS system.\nmessage ListPoolsReq {\n\tstring sys = 1; // DAOS system identifier\n}\n\n// ListPoolsResp returns the list of pools in the system.\nmessage ListPoolsResp {\n\tmessage Pool {\n\t\tstring uuid = 1; // uuid of pool\n\t\tstring label = 2; // pool label\n\t\trepeated uint32 svc_reps = 3; // pool service replica ranks\n\t\tstring state = 4; // pool state\n\t\tstring rebuild_state = 5; // pool rebuild state\n\t}\n\tint32 status = 1; // DAOS error code\n\trepeated Pool pools = 2; // pools list\n\tuint64 data_version = 3; // Version of the system database.\n}\n\n// ListContainers\n// Initial implementation differs from C API\n// (numContainers not provided in request - get whole list)\nmessage ListContReq {\n\tstring sys = 1; // DAOS system identifier\n\tstring id = 2; // uuid or label of pool\n\trepeated uint32 svc_ranks = 3; // List of pool service ranks\n}\n\nmessage ListContResp {\n\tmessage Cont {\n\t\tstring uuid = 1; // uuid of container\n\t}\n\tint32 status = 1; // DAOS error code\n\trepeated Cont containers = 2; // containers\n}\n\n// PoolQueryReq represents a pool query request.\nmessage PoolQueryReq {\n\tstring sys = 1; // DAOS system identifier\n\tstring id = 2;\n\trepeated uint32 svc_ranks = 3; // List of pool service ranks\n\tbool include_enabled_ranks = 4; // True if the list of enabled ranks shall be returned\n\tbool include_disabled_ranks = 5; // True if the list of disabled ranks shall be returned\n}\n\nenum StorageMediaType {\n\tSCM = 0;\n\tNVME = 1;\n}\n\n// StorageUsageStats represents usage statistics for a storage subsystem.\nmessage StorageUsageStats {\n\tuint64 total = 1;\n\tuint64 free = 2;\n\tuint64 min = 3;\n\tuint64 max = 4;\n\tuint64 mean = 5;\n\tStorageMediaType media_type = 6;\n}\n\n// PoolRebuildStatus represents a pool's rebuild status.\nmessage PoolRebuildStatus {\n\tint32 status = 1; // DAOS error code\n\tenum State {\n\t\tIDLE = 0;\n\t\tDONE = 1;\n\t\tBUSY = 2;\n\t}\n\tState state = 2;\n\tuint64 objects = 3;\n\tuint64 records = 4;\n}\n\nenum PoolServiceState {\n\tCreating = 0;   // pool service is being created\n\tReady = 1;      // pool service is ready to be used\n\tDestroying = 2; // pool service is being destroyed\n\tDegraded = 3 ;  // pool service is degraded\n\tUnknown = 4 ;   // pool service is Unknown state\n}\n\n// PoolQueryResp represents a pool query response.\nmessage PoolQueryResp {\n\treserved 9;\n\treserved \"total_nodes\";\n\tint32 status = 1; // DAOS error code\n\tstring uuid = 2; // pool uuid\n\tstring label = 3; // pool label\n\tuint32 total_targets = 4; // total targets in pool\n\tuint32 active_targets = 5; // active targets in pool\n\tuint32 disabled_targets = 6; // number of disabled targets in pool\n\tPoolRebuildStatus rebuild = 7; // pool rebuild status\n\trepeated StorageUsageStats tier_stats = 8; // storage tiers usage stats\n\tuint32 version = 10; // latest pool map version\n\tuint32 leader = 11; // current raft leader\n\tstring enabled_ranks = 12; // optional set of ranks enabled\n\tstring disabled_ranks = 13; // optional set of ranks disabled\n\tuint32 total_engines = 14; // total engines in pool\n\tuint32 pool_layout_ver = 15; // current pool global version\n\tuint32 upgrade_layout_ver = 16; // latest pool global version to upgrade\n\tPoolServiceState state = 17; // pool state\n}\n\nmessage PoolProperty {\n\tuint32 number = 1; // pool property number\n\toneof value {\n\t\tstring strval = 2; // pool property string value\n\t\tuint64 numval = 3; // pool property numeric value\n\t}\n}\n\n// PoolSetPropReq represents a request to set pool properties.\nmessage PoolSetPropReq {\n\tstring sys = 1; // DAOS system identifier\n\tstring id = 2; // uuid or label of pool to modify\n\trepeated PoolProperty properties = 3;\n\trepeated uint32 svc_ranks = 4; // List of pool service ranks\n}\n\n// PoolSetPropResp represents the result of setting pool properties.\nmessage PoolSetPropResp {\n\tint32 status = 1; // DAOS error code\n}\n\n// PoolGetPropReq represents a request to get pool properties.\nmessage PoolGetPropReq {\n\tstring sys = 1; // DAOS system identifier\n\tstring id = 2; // uuid or label of pool to query\n\trepeated PoolProperty properties = 3;\n\trepeated uint32 svc_ranks = 4; // List of pool service ranks\n}\n\n// PoolGetPropResp represents the result of getting pool properties.\nmessage PoolGetPropResp {\n\tint32 status = 1; // DAOS error code\n\trepeated PoolProperty properties = 2;\n}\n\n// PoolUpgradeReq upgrades the disk format of an existing pool to the\n// latest version.\nmessage PoolUpgradeReq {\n\tstring sys = 1; // DAOS system identifier\n\tstring id = 2;\n\trepeated uint32 svc_ranks = 3; // List of pool service ranks\n}\n\n// PoolUpgradeResp returns resultant state of upgrade operation.\nmessage PoolUpgradeResp {\n\tint32 status = 1; // DAOS error code\n}\n\n// PoolQueryTargetReq represents a pool query target(s) request.\nmessage PoolQueryTargetReq {\n\tstring sys = 1; // DAOS system identifier\n\tstring id = 2;\t// Pool label or UUID\n\tuint32 rank = 3; // Engine rank with targets to query\n\trepeated uint32 targets = 4; // indices of targets to be queried\n\trepeated uint32 svc_ranks = 5; // List of pool service ranks\n}\n\n// StorageTargetUsage represent's a target's capacity and usage\nmessage StorageTargetUsage {\n\tuint64 total = 1; // total space in bytes\n\tuint64 free = 2; // free space in bytes\n\tStorageMediaType  media_type = 3; // see daos_media_type_t (e.g., SCM, NVME)\n}\n\n// PoolQueryTargetInfo represents pool target query info for a single target.\n// The RPC response type (PoolQueryTargetResponse) contains a sequence of these.\nmessage PoolQueryTargetInfo {\n\tenum TargetType { // See enum daos_target_type_t\n\t\tUNKNOWN = 0;\n\t\tHDD = 1; // Rotating disk\n\t\tSSD = 2; // Flash-based\n\t\tPM = 3; // Persistent memory\n\t\tVM = 4; // Volatile memory\n\t}\n\tTargetType type = 1; // Target type jsee enum daos_target_type_t\n\n\tenum TargetState { // See enum daos_target_state_t\n\t\tSTATE_UNKNOWN = 0;\n\t\tDOWN_OUT = 1; // Not available\n\t\tDOWN = 2; // Not available, may need rebuild\n\t\tUP = 3; // Up\n\t\tUP_IN = 4; // Up and running\n\t\tNEW = 5; // Intermediate state for pool map change\n\t\tDRAIN = 6; // Being drained\n\t}\n\tTargetState state = 2; // target state see enum daos_target_state_t\n\t// TODO: target performance data\n\trepeated StorageTargetUsage space = 3; // this target's usage per storage tier\n}\n\n// PoolQueryTargetResp represents a pool target query response\nmessage PoolQueryTargetResp {\n\tint32 status = 1; // DAOS error code\n\trepeated PoolQueryTargetInfo infos = 2; // Per-target information\n}\n"
    },
    {
      "path": "src/proto/mgmt/svc.proto",
      "content": "//\n// (C) Copyright 2018-2023 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\nsyntax = \"proto3\";\npackage mgmt;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/mgmt\";\n\n// Management Service Protobuf Definitions related to interactions between\n// DAOS control server and DAOS IO Engines.\n\n// Generic response just containing DER from I/O Engine.\nmessage DaosResp {\n\tint32 status = 1;\t// DAOS error code.\n}\n\nmessage GroupUpdateReq {\n\tmessage Engine {\n\t\tuint32 rank = 1;\n\t\tstring uri = 2; // primary URI is the only one group update is concerned with\n\t\tuint64 incarnation = 3;\n\t}\n\tuint32 map_version = 1;\n\trepeated Engine engines = 2;\n}\n\nmessage GroupUpdateResp {\n\tint32 status = 1;\n}\n\nmessage JoinReq {\n\tstring sys = 1;\t\t\t// DAOS system name.\n\tstring uuid = 2;\t\t// Server UUID.\n\tuint32 rank = 3;\t\t// Server rank desired, if not MAX_UINT32.\n\tstring uri = 4;\t\t\t// Server CaRT primary provider URI (i.e., for context 0).\n\tuint32 nctxs = 5;\t\t// Server CaRT context count.\n\tstring addr = 6;\t\t// Server management address.\n\tstring srvFaultDomain = 7; \t// Fault domain for this instance's server\n\tuint32 idx = 8;\t\t\t// Instance index on server node.\n\tuint64 incarnation = 9; \t// rank incarnation\n\trepeated string secondary_uris = 10; // URIs for any secondary providers\n\trepeated uint32 secondary_nctxs = 11; // CaRT context count for each secondary provider\n}\n\nmessage JoinResp {\n\tint32 status = 1;\t// DAOS error code\n\tuint32 rank = 2;\t// Server rank assigned.\n\tenum State {\n\t\tIN = 0;\t\t// Server in the system.\n\t\tOUT = 1;\t// Server excluded from the system.\n\t}\n\tState state = 3;\t// Server state in the system map.\n\tstring faultDomain = 4; // Fault domain for the instance\n\tbool localJoin = 5;\t// Join processed locally.\n\tuint32 map_version = 6; // Join processed in this version of the system map.\n}\n\nmessage LeaderQueryReq {\n\tstring sys = 1;\t\t// System name.\n\tstring hosts = 2;\t// hostset to query\n}\n\nmessage LeaderQueryResp {\n\tstring current_leader = 1;\n\trepeated string replicas = 2;\n\trepeated string DownReplicas = 3;\n}\n\nmessage GetAttachInfoReq {\n\tstring sys = 1;\t\t// System name. For daos_agent only.\n\tbool all_ranks = 2;\t// Return Rank URIs for all ranks.\n\tstring interface = 3;\t// Preferred fabric interface.\n\tstring domain = 4;\t// Preferred fabric domain.\n}\n\nmessage ClientNetHint {\n\tstring provider = 1;\t\t// CaRT provider\n\tstring interface = 2;\t\t// CaRT D_INTERFACE\n\tstring domain = 3;\t\t// CaRT D_DOMAIN for given D_INTERFACE\n\tuint32 crt_ctx_share_addr = 4;\t// CaRT CRT_CTX_SHARE_ADDR\n\tuint32 crt_timeout = 5;\t\t// CaRT CRT_TIMEOUT\n\tuint32 net_dev_class = 6;\t// ARP protocol hardware identifier of the\n\t\t\t\t\t// I/O Engine network interface\n\tint32 srv_srx_set = 7;\t\t// Server SRX setting (-1, 0, 1; -1 == unset)\n\trepeated string env_vars = 8;\t// Client-side environment variables to set\n\tuint32 provider_idx = 9;\t// Provider index - anything > 0 is a secondary provider\n}\n\nmessage GetAttachInfoResp {\n\tint32 status = 1;\t\t// DAOS error code\n\tmessage RankUri {\n\t\tuint32 rank = 1;\n\t\tstring uri = 2;\n\t\tuint32 provider_idx = 3;\n\t\tuint32 num_ctxs = 4;\n\t}\n\trepeated RankUri rank_uris = 2;\t// Rank URIs for the primary provider\n\t\t\t\t\t// These CaRT settings are shared with the\n\t\t\t\t\t// libdaos client to aid in CaRT initialization.\n\trepeated uint32 ms_ranks = 3;\t// Ranks local to MS replicas\n\tClientNetHint client_net_hint = 4; // Primary provider hint\n\tuint64 data_version = 5; // Version of the system database.\n\tstring sys = 6;\t\t\t// Name of the DAOS system\n\trepeated RankUri secondary_rank_uris = 7; // Rank URIs for additional providers\n\trepeated ClientNetHint secondary_client_net_hints = 8; // Hints for additional providers\n}\n\nmessage PrepShutdownReq {\n\tuint32 rank = 1;\t// DAOS I/O Engine unique identifier.\n}\n\n// PrepShutdownResp is identical to DaosResp.\n\nmessage PingRankReq {\n\tuint32 rank = 1;\t// DAOS I/O Engine unique identifier.\n}\n\n// PingRankResp is identical to DaosResp.\n\nmessage SetRankReq {\n\tuint32 rank = 1;\t// DAOS I/O Engine unique identifier.\n\tuint32 map_version = 2;\t// System map version in which the rank joined the system.\n}\n\n// SetRankResp is identical to DaosResp.\n\nmessage PoolMonitorReq {\n\tstring sys = 1; // DAOS system identifier\n\tstring poolUUID = 2;\t// Pool UUID associated with the Pool Handle\n\tstring poolHandleUUID = 3; // Pool Handle UUID for the connection\n\tstring jobid = 4;\t// Job ID to associate instance with.\n}\n"
    },
    {
      "path": "src/proto/mgmt/system.proto",
      "content": "//\n// (C) Copyright 2019-2022 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\nsyntax = \"proto3\";\npackage mgmt;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/mgmt\";\n\nimport \"shared/ranks.proto\";\n\n// Management Service Protobuf Definitions related to interactions between\n// DAOS control server and DAOS system.\n\n// SystemMember refers to a data-plane instance that is a member of DAOS\n// system running on host with the control-plane listening at \"Addr\".\nmessage SystemMember {\n\tstring addr = 1;\n\tstring uuid = 2;\n\tuint32 rank = 3;\n\tuint64 incarnation = 4;\n\tstring state = 5;\n\tstring fabric_uri = 6;\n\tuint32 fabric_contexts = 7;\n\t// ancillary info e.g. error msg or reason for state change\n\tstring info = 8;\n\tstring fault_domain = 9;\n\tstring last_update = 10;\n\trepeated string secondary_fabric_uris = 11;\n}\n\n// SystemStopReq supplies system shutdown parameters.\nmessage SystemStopReq {\n\tstring sys = 1; // DAOS system name\n\tbool prep = 2; // indicates that the prep stage should be performed\n\tbool kill = 3; // indicates that the kill stage should be performed\n\tbool force = 4;\n\tstring ranks = 5; // rankset to query\n\tstring hosts = 6; // hostset to query\n}\n\n// SystemStopResp returns status of shutdown attempt and results\n// of attempts to stop system members.\nmessage SystemStopResp {\n\trepeated shared.RankResult results = 1;\n\tstring absentranks = 2; // rankset missing from membership\n\tstring absenthosts = 3; // hostset missing from membership\n}\n\n// SystemStartReq supplies system restart parameters.\nmessage SystemStartReq {\n\tstring sys = 1; // DAOS system name\n\tstring ranks = 2; // rankset to query\n\tstring hosts = 3; // hostset to query\n}\n\n// SystemStartResp returns status of restart attempt and results\n// of attempts to start system members.\nmessage SystemStartResp {\n\trepeated shared.RankResult results = 1;\n\tstring absentranks = 2; // rankset missing from membership\n\tstring absenthosts = 3; // hostset missing from membership\n}\n\n// SystemExcludeReq supplies system exclude parameters.\nmessage SystemExcludeReq {\n\tstring sys = 1; // DAOS system name\n\tstring ranks = 2; // rankset to exclude\n\tstring hosts = 3; // hostset to exclude\n\tbool clear = 4; // Clear excluded state\n}\n\n// SystemExcludeResp returns status of exclude request.\nmessage SystemExcludeResp {\n\trepeated shared.RankResult results = 1;\n}\n\n// SystemQueryReq supplies system query parameters.\nmessage SystemQueryReq {\n\tstring sys = 1; // DAOS system name\n\tstring ranks = 2; // rankset to query\n\tstring hosts = 3; // hostset to query\n\tuint32 state_mask = 4; // bitmask defining desired member states\n}\n\n// SystemQueryResp returns active system members.\nmessage SystemQueryResp {\n\trepeated SystemMember members = 1;\n\tstring absentranks = 2; // rankset missing from membership\n\tstring absenthosts = 3; // hostset missing from membership\n\tuint64 data_version = 4; // Version of the system database.\n\trepeated string providers = 5; // Providers supported by system in configured order\n}\n\n// SystemEraseReq supplies system erase parameters.\nmessage SystemEraseReq {\n\tstring sys = 1;\n}\n\nmessage SystemEraseResp {\n\trepeated shared.RankResult results = 1;\n}\n\n// SystemCleanupReq supplies the machinename.\nmessage SystemCleanupReq {\n\tstring sys = 1; // DAOS system identifier\n\tstring machine = 2; // Name of the machine to cleanup resources for.\n}\n\n// SystemCleanupResp returns resultant state of cleanup operation.\nmessage SystemCleanupResp {\n\tmessage CleanupResult {\n\t\tint32 status = 1; // Status of the evict on the specific pool\n\t\tstring msg = 2; // Error message if status indicates an error\n\t\tstring pool_id = 3; // uuid of pool\n\t\tuint32 count = 4; // number of pool handles cleaned up\n\n\t}\n\trepeated CleanupResult results = 1; // Results and Status for individual pools that are cleanedup.\n}\n\n// SystemSetAttrReq contains a request to set one or more system properties.\nmessage SystemSetAttrReq {\n\tstring sys = 1;\n\tmap<string, string> attributes = 2;\n}\n\n// SystemGetAttrReq contains a request to get one or more attributes by key. If\n// no keys are supplied, all attributes are returned in the response.\nmessage SystemGetAttrReq {\n\tstring sys = 1;\n\trepeated string keys = 2;\n}\n\n// SystemGetAttrResp contains a list of attribute key/value pairs.\nmessage SystemGetAttrResp {\n\tmap<string, string> attributes = 1;\n}\n\n// SystemSetPropReq contains a request to set one or more system properties.\nmessage SystemSetPropReq {\n\tstring sys = 1;\n\tmap<string, string> properties = 2;\n}\n\n// SystemGetPropReq contains a request to get one or more properties by key. If\n// no keys are supplied, all properties are returned in the response.\nmessage SystemGetPropReq {\n\tstring sys = 1;\n\trepeated string keys = 2;\n}\n\n// SystemGetPropResp contains a list of property key/value pairs.\nmessage SystemGetPropResp {\n\tmap<string, string> properties = 1;\n}\n\n"
    },
    {
      "path": "src/proto/security/auth.proto",
      "content": "//\n// (C) Copyright 2018-2021 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\nsyntax = \"proto3\";\npackage auth;\n\noption go_package = \"github.com/daos-stack/daos/src/control/security/auth;auth\";\n\n// Types of authentication token\nenum Flavor {\n\tAUTH_NONE = 0;\n\tAUTH_SYS = 1;\n}\n\nmessage Token {\n\tFlavor flavor = 1; // flavor of this authentication token\n\tbytes data = 2; // packed structure of the specified flavor\n}\n\n// Token structure for AUTH_SYS flavor cred\nmessage Sys {\n\tuint64 stamp = 1; // timestamp\n\tstring machinename = 2; // machine name\n\tstring user = 3; // user name\n\tstring group = 4; // primary group name\n\trepeated string groups = 5; // secondary group names\n\tstring secctx = 6; // Additional field for MAC label\n}\n\n// Token and verifier are expected to have the same flavor type.\nmessage Credential {\n\tToken token = 1; // authentication token\n\tToken verifier = 2; // to verify integrity of the token\n\tstring origin = 3; // the agent that created this credential\n}\n\n// GetCredResp represents the result of a request to fetch authentication\n// credentials.\nmessage GetCredResp {\n\tint32 status = 1; // Status of the request\n\tCredential cred = 2; // Caller's authentication credential\n}\n\n// ValidateCredReq represents a request to verify a set of authentication\n// credentials.\nmessage ValidateCredReq {\n\tCredential cred = 1; // Credential to be validated\n}\n\n// ValidateCredResp represents the result of a request to validate\n// authentication credentials.\nmessage ValidateCredResp {\n\tint32 status = 1; // Status of the request\n\tToken token = 2; // Validated authentication token from the credential\n}\n"
    },
    {
      "path": "src/proto/shared/event.proto",
      "content": "//\n// (C) Copyright 2020-2021 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\n// This file defines RAS event related protobuf messages communicated over dRPC\n// and gRPC.\n\nsyntax = \"proto3\";\npackage shared;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/shared\";\n\n// RASEvent describes a RAS event in the DAOS system.\nmessage RASEvent {\n\tuint32 id = 1;\t\t// Unique event identifier, 64-char.\n\tstring msg = 2;\t\t// Human readable message describing event.\n\tstring timestamp = 3;\t// Fully qualified timestamp (us) incl timezone.\n\tuint32 type = 4;\t// Event type.\n\tuint32 severity = 5;\t// Event severity.\n\tstring hostname = 6;\t// (optional) Hostname of node involved in event.\n\tuint32 rank = 7;\t// (optional) DAOS rank involved in event.\n\tuint64 incarnation = 8; // (optional) Incarnation of DAOS rank involved in event.\n\tstring hw_id = 9;\t// (optional) Hardware component involved in event.\n\tuint64 proc_id = 10;\t// (optional) Process involved in event.\n\tuint64 thread_id = 11;\t// (optional) Thread involved in event.\n\tstring job_id = 12;\t// (optional) Job involved in event.\n\tstring pool_uuid = 13;\t// (optional) Pool UUID involved in event.\n\tstring cont_uuid = 14;\t// (optional) Container UUID involved in event.\n\tstring obj_id = 15;\t// (optional) Object involved in event.\n\tstring ctl_op = 16;\t// (optional) Recommended automatic action.\n\t// EngineStateEventInfo defines extended fields for state change events.\n\tmessage EngineStateEventInfo {\n\t\tuint32 instance = 1;\t// Control-plane harness instance index.\n\t\tbool errored = 2;\t// Rank in error state.\n\t\tstring error = 3;\t// Message associated with error.\n\t}\n\t// PoolSvcEventInfo defines extended fields for pool service change events.\n\tmessage PoolSvcEventInfo {\n\t\trepeated uint32 svc_reps = 1;\t// Pool service replica ranks.\n\t\tuint64 version = 2;\t\t// Raft leadership term.\n\t}\n\toneof extended_info {\t// Data specific to a given event ID.\n\t\tstring str_info = 17;\t// Opaque data blob.\n\t\tEngineStateEventInfo engine_state_info = 18;\n\t\tPoolSvcEventInfo pool_svc_info = 19;\n\t}\n}\n\n// ClusterEventReq communicates occurrence of a RAS event in the DAOS system.\nmessage ClusterEventReq {\n\tuint64 sequence = 1;\t// Sequence identifier for RAS events.\n\tRASEvent event = 2;\t// RAS event.\n}\n\n// ClusterEventResp acknowledges receipt of an event notification.\nmessage ClusterEventResp {\n\tuint64 sequence = 1;\t// Sequence identifier for RAS events.\n\tint32 status = 2;\t// DAOS error code.\n}\n"
    },
    {
      "path": "src/proto/shared/ranks.proto",
      "content": "//\n// (C) Copyright 2020-2021 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\nsyntax = \"proto3\";\npackage shared;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/shared\";\n\nmessage RankResult {\n\tuint32 rank = 1;\n\tstring action = 2;\n\tbool errored = 3;\n\tstring msg = 4;\n\tstring state = 5;\n\tstring addr = 6;\n}\n"
    },
    {
      "path": "src/proto/srv/srv.proto",
      "content": "//\n// (C) Copyright 2019-2022 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\n\n// This file defines the messages used by DRPC_MODULE_SRV.\n\nsyntax = \"proto3\";\npackage srv;\n\noption go_package = \"github.com/daos-stack/daos/src/control/common/proto/srv\";\n\nmessage NotifyReadyReq {\n\tstring uri = 1; // Primary CaRT URI\n\tuint32 nctxs = 2; // Number of primary CaRT contexts\n\tstring drpcListenerSock = 3; // Path to I/O Engine's dRPC listener socket\n\tuint32 instanceIdx = 4; // I/O Engine instance index\n\tuint32 ntgts = 5; // number of VOS targets allocated in I/O Engine\n\tuint64 incarnation = 6; // HLC incarnation number\n\trepeated string secondaryUris = 7; // secondary CaRT URIs\n\trepeated uint32 secondaryNctxs = 8; // number of CaRT contexts for each secondary provider\n}\n\n// NotifyReadyResp is nil.\n\nmessage GetPoolSvcReq {\n\tstring uuid = 1; // Pool UUID\n}\n\nmessage GetPoolSvcResp {\n\tint32 status = 1; // DAOS error code\n\trepeated uint32 svcreps = 2; // Pool service replica ranks\n}\n\nmessage PoolFindByLabelReq {\n\tstring label = 1; // Pool label\n}\n\nmessage PoolFindByLabelResp {\n\tint32 status = 1; // DAOS error code\n\tstring uuid = 2; // Pool UUID\n\trepeated uint32 svcreps = 3; // Pool service replica ranks\n}\n"
    },
    {
      "path": "src/proto/test/drpc_test.proto",
      "content": "//\n// (C) Copyright 2018-2022 Intel Corporation.\n//\n// SPDX-License-Identifier: BSD-2-Clause-Patent\n//\nsyntax = \"proto3\";\npackage hello;\n\noption go_package = \"github.com/daos-stack/daos/src/control/cmd/drpc_test/hello\";\n\nenum Module\n{\n\tHELLO = 0;\n}\n\nenum Function\n{\n\tGREETING = 0;\n}\n\nmessage Hello {\n\tstring name = 1;\n}\n\nmessage HelloResponse {\n\tstring greeting = 1;\n}\n"
    }
  ]
}
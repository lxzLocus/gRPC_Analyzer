--- /app/dataset/modified_proto_reps/daos/pullrequest/DAOS-14214_control-_Fix_potential_missed_call_to_drpc_failure_handlers/premerge_12944/src/bio/smd.pb-c.c
+++ /app/dataset/modified_proto_reps/daos/pullrequest/DAOS-14214_control-_Fix_potential_missed_call_to_drpc_failure_handlers/merge_12944/src/bio/smd.pb-c.c
@@ -2570,33 +2570,39 @@
   (ProtobufCMessageInit) ctl__smd_manage_resp__init,
   NULL,NULL,NULL    /* reserved[123] */
 };
-static const ProtobufCEnumValue ctl__nvme_dev_state__enum_values_by_number[5] = {
-    {"UNKNOWN", "CTL__NVME_DEV_STATE__UNKNOWN", 0},
-    {"NORMAL", "CTL__NVME_DEV_STATE__NORMAL", 1},
-    {"NEW", "CTL__NVME_DEV_STATE__NEW", 2},
-    {"EVICTED", "CTL__NVME_DEV_STATE__EVICTED", 3},
-    {"UNPLUGGED", "CTL__NVME_DEV_STATE__UNPLUGGED", 4},
+static const ProtobufCEnumValue ctl__nvme_dev_state__enum_values_by_number[5] =
+{
+  { "UNKNOWN", "CTL__NVME_DEV_STATE__UNKNOWN", 0 },
+  { "NORMAL", "CTL__NVME_DEV_STATE__NORMAL", 1 },
+  { "NEW", "CTL__NVME_DEV_STATE__NEW", 2 },
+  { "EVICTED", "CTL__NVME_DEV_STATE__EVICTED", 3 },
+  { "UNPLUGGED", "CTL__NVME_DEV_STATE__UNPLUGGED", 4 },
 };
-static const ProtobufCIntRange       ctl__nvme_dev_state__value_ranges[]         = {{0, 0}, {0, 5}};
-static const ProtobufCEnumValueIndex ctl__nvme_dev_state__enum_values_by_name[5] = {
-    {"EVICTED", 3}, {"NEW", 2}, {"NORMAL", 1}, {"UNKNOWN", 0}, {"UNPLUGGED", 4},
+static const ProtobufCIntRange ctl__nvme_dev_state__value_ranges[] = {
+{0, 0},{0, 5}
 };
-const ProtobufCEnumDescriptor ctl__nvme_dev_state__descriptor = {
-    PROTOBUF_C__ENUM_DESCRIPTOR_MAGIC,
-    "ctl.NvmeDevState",
-    "NvmeDevState",
-    "Ctl__NvmeDevState",
-    "ctl",
-    5,
-    ctl__nvme_dev_state__enum_values_by_number,
-    5,
-    ctl__nvme_dev_state__enum_values_by_name,
-    1,
-    ctl__nvme_dev_state__value_ranges,
-    NULL,
-    NULL,
-    NULL,
-    NULL /* reserved[1234] */
+static const ProtobufCEnumValueIndex ctl__nvme_dev_state__enum_values_by_name[5] =
+{
+  { "EVICTED", 3 },
+  { "NEW", 2 },
+  { "NORMAL", 1 },
+  { "UNKNOWN", 0 },
+  { "UNPLUGGED", 4 },
+};
+const ProtobufCEnumDescriptor ctl__nvme_dev_state__descriptor =
+{
+  PROTOBUF_C__ENUM_DESCRIPTOR_MAGIC,
+  "ctl.NvmeDevState",
+  "NvmeDevState",
+  "Ctl__NvmeDevState",
+  "ctl",
+  5,
+  ctl__nvme_dev_state__enum_values_by_number,
+  5,
+  ctl__nvme_dev_state__enum_values_by_name,
+  1,
+  ctl__nvme_dev_state__value_ranges,
+  NULL,NULL,NULL,NULL   /* reserved[1234] */
 };
 static const ProtobufCEnumValue ctl__led_state__enum_values_by_number[5] =
 {
--- /app/dataset/modified_proto_reps/daos/pullrequest/DAOS-14214_control-_Fix_potential_missed_call_to_drpc_failure_handlers/premerge_12944/src/bio/smd.pb-c.h
+++ /app/dataset/modified_proto_reps/daos/pullrequest/DAOS-14214_control-_Fix_potential_missed_call_to_drpc_failure_handlers/merge_12944/src/bio/smd.pb-c.h
@@ -41,27 +41,27 @@
 /* --- enums --- */
 
 typedef enum _Ctl__NvmeDevState {
-	/*
-	 * Device state is unknown, zer6o value
-	 */
-	CTL__NVME_DEV_STATE__UNKNOWN = 0,
-	/*
-	 * Device is in a normal operational state
-	 */
-	CTL__NVME_DEV_STATE__NORMAL = 1,
-	/*
-	 * Device is new and is not yet in-use
-	 */
-	CTL__NVME_DEV_STATE__NEW = 2,
-	/*
-	 * Device is faulty and has been evicted
-	 */
-	CTL__NVME_DEV_STATE__EVICTED = 3,
-	/*
-	 * Device has been physically removed
-	 */
-	CTL__NVME_DEV_STATE__UNPLUGGED =
-	    4 PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CTL__NVME_DEV_STATE)
+  /*
+   * Device state is unknown, zero value
+   */
+  CTL__NVME_DEV_STATE__UNKNOWN = 0,
+  /*
+   * Device is in a normal operational state
+   */
+  CTL__NVME_DEV_STATE__NORMAL = 1,
+  /*
+   * Device is new and is not yet in-use
+   */
+  CTL__NVME_DEV_STATE__NEW = 2,
+  /*
+   * Device is faulty and has been evicted
+   */
+  CTL__NVME_DEV_STATE__EVICTED = 3,
+  /*
+   * Device has been physically removed
+   */
+  CTL__NVME_DEV_STATE__UNPLUGGED = 4
+    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CTL__NVME_DEV_STATE)
 } Ctl__NvmeDevState;
 typedef enum _Ctl__LedState {
   /*
@@ -290,13 +290,10 @@
    */
   uint64_t usable_bytes;
 };
-#define CTL__SMD_DEVICE__INIT                                                                      \
-	{                                                                                          \
-		PROTOBUF_C_MESSAGE_INIT(&ctl__smd_device__descriptor)                              \
-		, (char *)protobuf_c_empty_string, 0, NULL, (char *)protobuf_c_empty_string,       \
-		    CTL__NVME_DEV_STATE__UNKNOWN, CTL__LED_STATE__OFF, 0, 0, 0, 0, 0, 0, 0, 0, 0,  \
-		    0                                                                              \
-	}
+#define CTL__SMD_DEVICE__INIT \
+ { PROTOBUF_C_MESSAGE_INIT (&ctl__smd_device__descriptor) \
+    , (char *)protobuf_c_empty_string, 0,NULL, (char *)protobuf_c_empty_string, CTL__NVME_DEV_STATE__UNKNOWN, CTL__LED_STATE__OFF, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
+
 
 struct  _Ctl__SmdDevReq
 {
--- /app/dataset/modified_proto_reps/daos/pullrequest/DAOS-14214_control-_Fix_potential_missed_call_to_drpc_failure_handlers/premerge_12944/src/control/common/proto/ctl/smd.pb.go
+++ /app/dataset/modified_proto_reps/daos/pullrequest/DAOS-14214_control-_Fix_potential_missed_call_to_drpc_failure_handlers/merge_12944/src/control/common/proto/ctl/smd.pb.go
@@ -29,7 +29,7 @@
 type NvmeDevState int32
 
 const (
-	NvmeDevState_UNKNOWN   NvmeDevState = 0 // Device state is unknown, zer6o value
+	NvmeDevState_UNKNOWN   NvmeDevState = 0 // Device state is unknown, zero value
 	NvmeDevState_NORMAL    NvmeDevState = 1 // Device is in a normal operational state
 	NvmeDevState_NEW       NvmeDevState = 2 // Device is new and is not yet in-use
 	NvmeDevState_EVICTED   NvmeDevState = 3 // Device is faulty and has been evicted
--- /app/dataset/modified_proto_reps/daos/pullrequest/DAOS-14214_control-_Fix_potential_missed_call_to_drpc_failure_handlers/premerge_12944/src/control/server/ctl_smd_rpc.go
+++ /app/dataset/modified_proto_reps/daos/pullrequest/DAOS-14214_control-_Fix_potential_missed_call_to_drpc_failure_handlers/merge_12944/src/control/server/ctl_smd_rpc.go
@@ -398,12 +398,12 @@
 // Retry dev-replace requests as state propagation may take some time after set-faulty call has
 // been made to manually trigger a faulty device state.
 func replaceDevRetryBusy(ctx context.Context, log logging.Logger, e Engine, req proto.Message) (res *ctlpb.SmdManageResp_Result, err error) {
-	for try := uint(0); try < uint(maxDevReplaceRetries); try++ {
+	for try := 0; try < maxDevReplaceRetries; try++ {
 		res, err = sendManageReq(ctx, e, drpc.MethodReplaceStorage, req)
 		if err != nil {
 			return
 		}
-		if daos.Status(res.Status) != daos.Busy {
+		if daos.Status(res.Status) != daos.Busy || try == maxDevReplaceRetries-1 {
 			break
 		}
 
--- /app/dataset/modified_proto_reps/daos/pullrequest/DAOS-14214_control-_Fix_potential_missed_call_to_drpc_failure_handlers/premerge_12944/src/control/server/harness.go
+++ /app/dataset/modified_proto_reps/daos/pullrequest/DAOS-14214_control-_Fix_potential_missed_call_to_drpc_failure_handlers/merge_12944/src/control/server/harness.go
@@ -8,6 +8,7 @@
 
 import (
 	"context"
+	"fmt"
 	"os"
 	"sync"
 
@@ -76,7 +77,7 @@
 	instances     []Engine
 	started       atm.Bool
 	faultDomain   *system.FaultDomain
-	onDrpcFailure []func(context.Context, error)
+	onDrpcFailure []onDrpcFailureFn
 }
 
 // NewEngineHarness returns an initialized *EngineHarness.
@@ -146,8 +147,10 @@
 	return nil
 }
 
+type onDrpcFailureFn func(ctx context.Context, err error)
+
 // OnDrpcFailure registers callbacks to be invoked on dRPC call failure.
-func (h *EngineHarness) OnDrpcFailure(fns ...func(ctx context.Context, err error)) {
+func (h *EngineHarness) OnDrpcFailure(fns ...onDrpcFailureFn) {
 	h.Lock()
 	defer h.Unlock()
 
@@ -156,46 +159,64 @@
 
 // CallDrpc calls the supplied dRPC method on a managed I/O Engine instance.
 func (h *EngineHarness) CallDrpc(ctx context.Context, method drpc.Method, body proto.Message) (resp *drpc.Response, err error) {
-	defer func() {
-		if err == nil {
-			return
-		}
-		// If the context was canceled, don't trigger callbacks.
-		if errors.Cause(err) == context.Canceled {
-			return
-		}
-		// Don't trigger callbacks for these errors which can happen when
-		// things are still starting up.
-		if err == FaultHarnessNotStarted || err == errEngineNotReady {
-			return
-		}
-
-		h.log.Debugf("invoking dRPC failure handlers for %s", err)
-		h.RLock()
-		defer h.RUnlock()
-		for _, fn := range h.onDrpcFailure {
-			fn(ctx, err)
-		}
-	}()
-
 	if !h.isStarted() {
 		return nil, FaultHarnessNotStarted
 	}
 
-	// Iterate through the managed instances, looking for
-	// the first one that is available to service the request.
-	// If the request fails, that error will be returned.
-	for _, i := range h.Instances() {
+	instances := h.Instances()
+	if len(instances) == 0 {
+		return nil, errors.New("no engine instances to service drpc call")
+	}
+
+	// Iterate through the managed instances, looking for the first one that is available to
+	// service the request. If non-transient error is returned from CallDrpc, that error will
+	// be returned immediately. If a transient error is returned, continue to the next engine.
+	drpcErrs := make([]error, 0, len(instances))
+	for _, i := range instances {
 		resp, err = i.CallDrpc(ctx, method, body)
+		if err == nil {
+			break
+		}
 
+		drpcErrs = append(drpcErrs, errors.Cause(err))
+		msg := fmt.Sprintf("failure on engine instance %d: %s", i.Index(), err)
+
 		switch errors.Cause(err) {
 		case errEngineNotReady, errDRPCNotReady, FaultDataPlaneNotStarted:
+			h.log.Debug("drpc call transient " + msg)
 			continue
-		default:
-			return
 		}
+
+		h.log.Debug("drpc call hard " + msg)
+		break
 	}
 
+	if err == nil {
+		return // Request sent.
+	}
+
+	var e error
+	hasDRPCErr := false
+	for _, e = range drpcErrs {
+		switch e {
+		case errDRPCNotReady, FaultDataPlaneNotStarted:
+			// If no engines can service request and drpc specific error has
+			// been returned then pass that error to the failure handlers.
+			hasDRPCErr = true
+			break
+		}
+	}
+	if !hasDRPCErr {
+		return // Don't trigger handlers on failures not related to dRPC comms.
+	}
+
+	h.log.Debugf("invoking dRPC failure handlers for %s", e)
+	h.RLock()
+	defer h.RUnlock()
+	for _, fn := range h.onDrpcFailure {
+		fn(ctx, e)
+	}
+
 	return
 }
 
@@ -205,6 +226,20 @@
 	ResignLeadership(error) error
 }
 
+func newOnDrpcFailureFn(log logging.Logger, db dbLeader) onDrpcFailureFn {
+	return func(_ context.Context, errIn error) {
+		if !db.IsLeader() {
+			return
+		}
+
+		// If we cannot service a dRPC request on this node, we should resign as leader in
+		// order to force a new leader election.
+		if err := db.ResignLeadership(errIn); err != nil {
+			log.Errorf("failed to resign leadership after dRPC failure: %s", err)
+		}
+	}
+}
+
 // Start starts harness by setting up and starting dRPC before initiating
 // configured instances' processing loops.
 //
@@ -228,27 +263,7 @@
 		ei.Run(ctx, cfg.RecreateSuperblocks)
 	}
 
-	h.OnDrpcFailure(func(_ context.Context, errIn error) {
-		if !db.IsLeader() {
-			return
-		}
-
-		switch errors.Cause(errIn) {
-		case errDRPCNotReady, FaultDataPlaneNotStarted:
-			break
-		default:
-			// Don't shutdown on other failures which are
-			// not related to dRPC communications.
-			return
-		}
-
-		// If we cannot service a dRPC request on this node,
-		// we should resign as leader in order to force a new
-		// leader election.
-		if err := db.ResignLeadership(errIn); err != nil {
-			h.log.Errorf("failed to resign leadership after dRPC failure: %s", err)
-		}
-	})
+	h.OnDrpcFailure(newOnDrpcFailureFn(h.log, db))
 
 	<-ctx.Done()
 	h.log.Debug("shutting down harness")
--- /app/dataset/modified_proto_reps/daos/pullrequest/DAOS-14214_control-_Fix_potential_missed_call_to_drpc_failure_handlers/premerge_12944/src/control/server/harness_test.go
+++ /app/dataset/modified_proto_reps/daos/pullrequest/DAOS-14214_control-_Fix_potential_missed_call_to_drpc_failure_handlers/merge_12944/src/control/server/harness_test.go
@@ -522,20 +522,6 @@
 				},
 			},
 		},
-		"one not ready, one fails": {
-			mics: []*MockInstanceConfig{
-				{
-					Ready:       atm.NewBool(true),
-					CallDrpcErr: errDRPCNotReady,
-				},
-				{
-					Ready:       atm.NewBool(true),
-					CallDrpcErr: errors.New("whoops"),
-				},
-			},
-			expErr:         errors.New("whoops"),
-			expFailHandler: true,
-		},
 		"instance not ready": {
 			mics: []*MockInstanceConfig{
 				{
@@ -560,8 +546,7 @@
 					Ready: atm.NewBool(true),
 				},
 			},
-			expErr:         errors.New("whoops"),
-			expFailHandler: true,
+			expErr: errors.New("whoops"),
 		},
 		"none available": {
 			mics: []*MockInstanceConfig{
@@ -578,6 +563,79 @@
 			expErr:         FaultDataPlaneNotStarted,
 			expFailHandler: true,
 		},
+		"none available; not leader": {
+			notLeader: true,
+			mics: []*MockInstanceConfig{
+				{
+					Ready:       atm.NewBool(true),
+					CallDrpcErr: errDRPCNotReady,
+				},
+				{
+					Ready:       atm.NewBool(true),
+					CallDrpcErr: FaultDataPlaneNotStarted,
+				},
+			},
+			expNotLeader:   true,
+			expErr:         FaultDataPlaneNotStarted,
+			expFailHandler: true,
+		},
+		"none available; no drpc related errors": {
+			mics: []*MockInstanceConfig{
+				{
+					Started:     atm.NewBool(true),
+					CallDrpcErr: errEngineNotReady,
+				},
+				{
+					Ready:       atm.NewBool(true),
+					CallDrpcErr: errors.New("whoops"),
+				},
+			},
+			expErr: errors.New("whoops"),
+		},
+		"none available; one engine not ready, one drpc not ready": {
+			mics: []*MockInstanceConfig{
+				{
+					Started:     atm.NewBool(true),
+					CallDrpcErr: errEngineNotReady,
+				},
+				{
+					Ready:       atm.NewBool(true),
+					CallDrpcErr: errDRPCNotReady,
+				},
+			},
+			expNotLeader:   true,
+			expErr:         errDRPCNotReady,
+			expFailHandler: true,
+		},
+		"none available; one drpc not ready, one engine not ready": {
+			mics: []*MockInstanceConfig{
+				{
+					Ready:       atm.NewBool(true),
+					CallDrpcErr: errDRPCNotReady,
+				},
+				{
+					Started:     atm.NewBool(true),
+					CallDrpcErr: errEngineNotReady,
+				},
+			},
+			expNotLeader:   true,
+			expErr:         errEngineNotReady,
+			expFailHandler: true,
+		},
+		"none available; one data-plane not ready, one engine not ready": {
+			mics: []*MockInstanceConfig{
+				{
+					CallDrpcErr: FaultDataPlaneNotStarted,
+				},
+				{
+					Started:     atm.NewBool(true),
+					CallDrpcErr: errEngineNotReady,
+				},
+			},
+			expNotLeader:   true,
+			expErr:         errEngineNotReady,
+			expFailHandler: true,
+		},
 		"context canceled": {
 			mics: []*MockInstanceConfig{
 				{
@@ -599,15 +657,17 @@
 				}
 			}
 
+			db := &mockdb{
+				isLeader: !tc.notLeader,
+			}
+
 			var drpcFailureInvoked atm.Bool
-			h.OnDrpcFailure(func(_ context.Context, err error) {
+			h.OnDrpcFailure(func(ctx context.Context, err error) {
 				drpcFailureInvoked.SetTrue()
+				newOnDrpcFailureFn(log, db)(ctx, err)
 			})
 
 			ctx, cancel := context.WithCancel(test.Context(t))
-			db := &mockdb{
-				isLeader: !tc.notLeader,
-			}
 
 			startErr := make(chan error)
 			go func() {
--- /app/dataset/modified_proto_reps/daos/pullrequest/DAOS-14214_control-_Fix_potential_missed_call_to_drpc_failure_handlers/premerge_12944/src/mgmt/smd.pb-c.c
+++ /app/dataset/modified_proto_reps/daos/pullrequest/DAOS-14214_control-_Fix_potential_missed_call_to_drpc_failure_handlers/merge_12944/src/mgmt/smd.pb-c.c
@@ -2570,33 +2570,39 @@
   (ProtobufCMessageInit) ctl__smd_manage_resp__init,
   NULL,NULL,NULL    /* reserved[123] */
 };
-static const ProtobufCEnumValue ctl__nvme_dev_state__enum_values_by_number[5] = {
-    {"UNKNOWN", "CTL__NVME_DEV_STATE__UNKNOWN", 0},
-    {"NORMAL", "CTL__NVME_DEV_STATE__NORMAL", 1},
-    {"NEW", "CTL__NVME_DEV_STATE__NEW", 2},
-    {"EVICTED", "CTL__NVME_DEV_STATE__EVICTED", 3},
-    {"UNPLUGGED", "CTL__NVME_DEV_STATE__UNPLUGGED", 4},
+static const ProtobufCEnumValue ctl__nvme_dev_state__enum_values_by_number[5] =
+{
+  { "UNKNOWN", "CTL__NVME_DEV_STATE__UNKNOWN", 0 },
+  { "NORMAL", "CTL__NVME_DEV_STATE__NORMAL", 1 },
+  { "NEW", "CTL__NVME_DEV_STATE__NEW", 2 },
+  { "EVICTED", "CTL__NVME_DEV_STATE__EVICTED", 3 },
+  { "UNPLUGGED", "CTL__NVME_DEV_STATE__UNPLUGGED", 4 },
 };
-static const ProtobufCIntRange       ctl__nvme_dev_state__value_ranges[]         = {{0, 0}, {0, 5}};
-static const ProtobufCEnumValueIndex ctl__nvme_dev_state__enum_values_by_name[5] = {
-    {"EVICTED", 3}, {"NEW", 2}, {"NORMAL", 1}, {"UNKNOWN", 0}, {"UNPLUGGED", 4},
+static const ProtobufCIntRange ctl__nvme_dev_state__value_ranges[] = {
+{0, 0},{0, 5}
 };
-const ProtobufCEnumDescriptor ctl__nvme_dev_state__descriptor = {
-    PROTOBUF_C__ENUM_DESCRIPTOR_MAGIC,
-    "ctl.NvmeDevState",
-    "NvmeDevState",
-    "Ctl__NvmeDevState",
-    "ctl",
-    5,
-    ctl__nvme_dev_state__enum_values_by_number,
-    5,
-    ctl__nvme_dev_state__enum_values_by_name,
-    1,
-    ctl__nvme_dev_state__value_ranges,
-    NULL,
-    NULL,
-    NULL,
-    NULL /* reserved[1234] */
+static const ProtobufCEnumValueIndex ctl__nvme_dev_state__enum_values_by_name[5] =
+{
+  { "EVICTED", 3 },
+  { "NEW", 2 },
+  { "NORMAL", 1 },
+  { "UNKNOWN", 0 },
+  { "UNPLUGGED", 4 },
+};
+const ProtobufCEnumDescriptor ctl__nvme_dev_state__descriptor =
+{
+  PROTOBUF_C__ENUM_DESCRIPTOR_MAGIC,
+  "ctl.NvmeDevState",
+  "NvmeDevState",
+  "Ctl__NvmeDevState",
+  "ctl",
+  5,
+  ctl__nvme_dev_state__enum_values_by_number,
+  5,
+  ctl__nvme_dev_state__enum_values_by_name,
+  1,
+  ctl__nvme_dev_state__value_ranges,
+  NULL,NULL,NULL,NULL   /* reserved[1234] */
 };
 static const ProtobufCEnumValue ctl__led_state__enum_values_by_number[5] =
 {
--- /app/dataset/modified_proto_reps/daos/pullrequest/DAOS-14214_control-_Fix_potential_missed_call_to_drpc_failure_handlers/premerge_12944/src/mgmt/smd.pb-c.h
+++ /app/dataset/modified_proto_reps/daos/pullrequest/DAOS-14214_control-_Fix_potential_missed_call_to_drpc_failure_handlers/merge_12944/src/mgmt/smd.pb-c.h
@@ -41,27 +41,27 @@
 /* --- enums --- */
 
 typedef enum _Ctl__NvmeDevState {
-	/*
-	 * Device state is unknown, zer6o value
-	 */
-	CTL__NVME_DEV_STATE__UNKNOWN = 0,
-	/*
-	 * Device is in a normal operational state
-	 */
-	CTL__NVME_DEV_STATE__NORMAL = 1,
-	/*
-	 * Device is new and is not yet in-use
-	 */
-	CTL__NVME_DEV_STATE__NEW = 2,
-	/*
-	 * Device is faulty and has been evicted
-	 */
-	CTL__NVME_DEV_STATE__EVICTED = 3,
-	/*
-	 * Device has been physically removed
-	 */
-	CTL__NVME_DEV_STATE__UNPLUGGED =
-	    4 PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CTL__NVME_DEV_STATE)
+  /*
+   * Device state is unknown, zero value
+   */
+  CTL__NVME_DEV_STATE__UNKNOWN = 0,
+  /*
+   * Device is in a normal operational state
+   */
+  CTL__NVME_DEV_STATE__NORMAL = 1,
+  /*
+   * Device is new and is not yet in-use
+   */
+  CTL__NVME_DEV_STATE__NEW = 2,
+  /*
+   * Device is faulty and has been evicted
+   */
+  CTL__NVME_DEV_STATE__EVICTED = 3,
+  /*
+   * Device has been physically removed
+   */
+  CTL__NVME_DEV_STATE__UNPLUGGED = 4
+    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CTL__NVME_DEV_STATE)
 } Ctl__NvmeDevState;
 typedef enum _Ctl__LedState {
   /*
@@ -290,13 +290,10 @@
    */
   uint64_t usable_bytes;
 };
-#define CTL__SMD_DEVICE__INIT                                                                      \
-	{                                                                                          \
-		PROTOBUF_C_MESSAGE_INIT(&ctl__smd_device__descriptor)                              \
-		, (char *)protobuf_c_empty_string, 0, NULL, (char *)protobuf_c_empty_string,       \
-		    CTL__NVME_DEV_STATE__UNKNOWN, CTL__LED_STATE__OFF, 0, 0, 0, 0, 0, 0, 0, 0, 0,  \
-		    0                                                                              \
-	}
+#define CTL__SMD_DEVICE__INIT \
+ { PROTOBUF_C_MESSAGE_INIT (&ctl__smd_device__descriptor) \
+    , (char *)protobuf_c_empty_string, 0,NULL, (char *)protobuf_c_empty_string, CTL__NVME_DEV_STATE__UNKNOWN, CTL__LED_STATE__OFF, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
+
 
 struct  _Ctl__SmdDevReq
 {
--- /app/dataset/modified_proto_reps/daos/pullrequest/DAOS-14214_control-_Fix_potential_missed_call_to_drpc_failure_handlers/premerge_12944/src/proto/ctl/smd.proto
+++ /app/dataset/modified_proto_reps/daos/pullrequest/DAOS-14214_control-_Fix_potential_missed_call_to_drpc_failure_handlers/merge_12944/src/proto/ctl/smd.proto
@@ -76,7 +76,7 @@
 }
 
 enum NvmeDevState {
-	UNKNOWN   = 0; // Device state is unknown, zer6o value
+	UNKNOWN   = 0; // Device state is unknown, zero value
 	NORMAL    = 1; // Device is in a normal operational state
 	NEW       = 2; // Device is new and is not yet in-use
 	EVICTED   = 3; // Device is faulty and has been evicted

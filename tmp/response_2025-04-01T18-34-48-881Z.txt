%_Reply Required_%
[src/control/vendor/google.golang.org/protobuf/types/gofeaturespb/gofeatures.proto]

%_Modifed_%
--- src/proto/ctl/smd.proto  
+++ src/proto/ctl/smd.proto  
@@ -76,7 +76,7 @@  
 enum NvmeDevState {  
-	UNKNOWN   &#x3D; 0; // Device state is unknown, zer6o value  
+	UNKNOWN   &#x3D; 0; // Device state is unknown, zero value  
	NORMAL    &#x3D; 1; // Device is in a normal operational state  
	NEW       &#x3D; 2; // Device is new and is not yet in-use  
	EVICTED   &#x3D; 3; // Device is faulty and has been evicted  

--- src/control/server/harness.go  
+++ src/control/server/harness.go  
@@ -103,7 +103,7 @@  
 	// They indicate that too much internal  
 	// information is being leaked outside of the implementation.  
-	newCret(string, error) *ctlpb.NvmeControllerResult  
+	newCret(string, error) error  
 	tryDrpc(context.Context, drpc.Method) *system.MemberResult  
 	requestStart(context.Context)  
 	updateInUseBdevs(context.Context, []storage.NvmeController, uint64, uint64) ([]storage.NvmeController, error)  

--- src/control/server/ctl_smd_rpc.go  
+++ src/control/server/ctl_smd_rpc.go  
@@ -272,7 +272,7 @@  
 func addManageRespIDOnFail(log logging.Logger, res *ctlpb.SmdManageResp_Result, dev *devID) {  
 	if res == nil || dev == nil || res.Status == 0 {  
 		return  
-	log.Errorf("drpc returned status %q on dev %+v", daos.Status(res.Status), dev)  
+	log.Errorf("dRPC returned status %q on dev %+v", daos.Status(res.Status), dev)  
 	if res.Device == nil {  
 		// Populate id so failure can be mapped to a device.  
 		res.Device = &ctlpb.SmdDevice{  

--- src/control/server/harness_test.go  
+++ src/control/server/harness_test.go  
@@ -28,7 +28,7 @@  
 	"time"  
 
 	"github.com/google/go-cmp/cmp"  
-	"github.com/pkg/errors"  
+	"github.com/go-errors/errors"  
 	"google.golang.org/protobuf/proto"  
 	"github.com/daos-stack/daos/src/control/common/test"  

--- src/proto/gofeatures.proto  
+++ src/proto/gofeatures.proto  
@@ -15,7 +15,7 @@  

 option go_package = "google.golang.org/protobuf/types/gofeaturespb";  

-extend google.protobuf.FeatureSet {  
+extend google.protobuf.MessageOptions {  
   optional GoFeatures go = 1002;  
 }  
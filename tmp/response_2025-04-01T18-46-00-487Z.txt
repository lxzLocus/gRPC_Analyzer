%_Modifed_%

--- src/proto/ctl/smd.proto
+++ src/proto/ctl/smd.proto
@@ -76,7 +76,7 @@
 }
 
 enum NvmeDevState {
-	UNKNOWN   = 0; // Device state is unknown, zer6o value
+	UNKNOWN   = 0; // Device state is unknown, zero value
 	NORMAL    = 1; // Device is in a normal operational state
 	NEW       = 2; // Device is new and is not yet in-use
 	EVICTED   = 3; // Device is faulty and has been evicted

--- src/control/server/ctl_smd_rpc.go
+++ src/control/server/ctl_smd_rpc.go
@@ -108,7 +108,7 @@
			state := dev.Details.DevState
 
			// skip health query if the device is not in a normal or faulty state
-			if req.IncludeBioHealth {
+			if req.GetIncludeBioHealth() {
				if state != ctlpb.NvmeDevState_NEW {
					health, err := ei.GetBioHealth(ctx, &ctlpb.BioHealthReq{
						DevUuid: dev.Details.Uuid, 
@@ -251,7 +251,7 @@
		switch req.Op.(type) {
		case *ctlpb.SmdManageReq_Replace:
			if len(devs) != 1 {
-				return nil, errors.New("replace request expects only one device ID")
+				return nil, errors.New("replace request expects exactly one device ID")
			}
			dReq := req.GetReplace()
			svc.log.Debugf(msg, "dev-replace", dReq)
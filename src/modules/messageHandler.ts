/**
 * „É°„ÉÉ„Çª„Éº„Ç∏Âá¶ÁêÜ„ÇØ„É©„Çπ
 * LLM„Å®„ÅÆ‰ºöË©±„Å®„É¨„Çπ„Éù„É≥„ÇπËß£Êûê„ÇíÊãÖÂΩì
 */

import type { LLMParsed, RequiredFileInfo } from './types.js';

class MessageHandler {
    messagesTemplate: Array<{ role: string, content: string }>;

    constructor() {
        this.messagesTemplate = [
            {
                role: 'system',
                content: "Fix or improve program code related to gRPC. It may contain potential bugs. Refer to the proto to make code corrections."
            }
        ];
    }

    attachMessages(role: string, messages: string): Array<{ role: string, content: string }> {
        // Êñ∞„Åó„ÅÑ„É°„ÉÉ„Çª„Éº„Ç∏„Çí„ÉÜ„É≥„Éó„É¨„Éº„Éà„Å´ËøΩÂä†
        this.messagesTemplate.push({
            role: role,
            content: messages
        });
        return this.messagesTemplate;
    }

    analyzeMessages(messages: string): LLMParsed {
        const sections = {
            thought: null as string | null,
            plan: null as string | null,
            requiredFilepaths: [] as string[],
            requiredFileInfos: [] as RequiredFileInfo[], // Êñ∞„Åó„ÅÑ„Éï„Ç£„Éº„É´„Éâ
            modifiedDiff: '',
            commentText: '',
            has_fin_tag: false
        };

        const lines = messages.split('\n');
        let currentTag: string | null = null;
        const buffers: { [key: string]: string[] } = {
            thought: [],
            plan: [],
            modified: [],
            comment: [],
            required: []
        };

        for (const line of lines) {
            const trimmed = line.trim();
            const tagMatch = trimmed.match(/^%_(.+?)_%$/);

            if (tagMatch) {
                currentTag = tagMatch[1].toLowerCase().replace(/ /g, '_'); // e.g., "Reply Required" -> "reply_required"
                if (currentTag === 'modified' || currentTag === 'comment' || currentTag === 'thought' || currentTag === 'plan') {
                    // „Éê„ÉÉ„Éï„Ç°„Çí‰ΩøÁî®„Åô„Çã„Çø„Ç∞
                } else {
                    currentTag = 'required' // 'Reply Required'
                }
                continue;
            } else if (trimmed === '%%_Fin_%%') {
                sections.has_fin_tag = true;
                break;
            }

            if (currentTag) {
                if (currentTag === 'required') {
                    // „Åô„Åπ„Å¶„ÅÆrequired„É©„Ç§„É≥„Çí„Éê„ÉÉ„Éï„Ç°„Å´ËøΩÂä†ÔºàÂæå„ÅßÁµ±‰∏ÄÁöÑ„Å´Âá¶ÁêÜÔºâ
                    if (!buffers.required) {
                        buffers.required = [];
                    }
                    buffers.required.push(line);
                } else if (buffers[currentTag]) {
                    buffers[currentTag].push(line);
                }
            }
        }

        sections.thought = buffers.thought.join('\n').trim() || null;
        sections.plan = buffers.plan.join('\n').trim() || null;
        sections.modifiedDiff = buffers.modified.join('\n').trim();
        sections.commentText = buffers.comment.join('\n').trim();

        // Required files„ÅÆÂæåÂá¶ÁêÜÔºàÁµ±‰∏ÄÁöÑ„Å™Ëß£ÊûêÔºâ
        console.log('üìä Buffer contents summary:');
        console.log('  - thought:', buffers.thought.length, 'lines');
        console.log('  - plan:', buffers.plan.length, 'lines');
        console.log('  - modified:', buffers.modified.length, 'lines');
        console.log('  - comment:', buffers.comment.length, 'lines');
        console.log('  - required:', buffers.required.length, 'lines');
        
        if (buffers.required.length > 0) {
            console.log('üìù Required buffer first 3 lines:', buffers.required.slice(0, 3));
            console.log('üìù Required buffer last 3 lines:', buffers.required.slice(-3));
        }
        if (buffers.required && buffers.required.length > 0) {
            const requiredText = buffers.required.join('\n').trim();
            
            // „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±ÔºöËß£ÊûêÂØæË±°„ÅÆ„ÉÜ„Ç≠„Çπ„Éà„ÇíÁ¢∫Ë™ç
            console.log('üîç Required text to parse:', JSON.stringify(requiredText));
            console.log('üîç Required text length:', requiredText.length);
            console.log('üîç Required buffer length:', buffers.required.length);
            
            // Á©∫ÊñáÂ≠óÂàó„ÉÅ„Çß„ÉÉ„ÇØ
            if (!requiredText || requiredText.length === 0) {
                console.log('‚ö†Ô∏è Required text is empty, skipping parsing');
                return sections;
            }
            
            // „Åæ„ÅöJSONÂΩ¢Âºè„ÅÆÂà§ÂÆö„ÇíË°å„ÅÜ
            const trimmedText = requiredText.trim();
            console.log('üîç JSON detection - trimmed length:', trimmedText.length);
            console.log('üîç JSON detection - starts with:', JSON.stringify(trimmedText.substring(0, 20)));
            console.log('üîç JSON detection - ends with:', JSON.stringify(trimmedText.substring(Math.max(0, trimmedText.length - 20))));
            
            const startsWithJSON = trimmedText.startsWith('[') || trimmedText.startsWith('{');
            const endsWithJSON = trimmedText.endsWith(']') || trimmedText.endsWith('}');
            const hasJSONIndicators = trimmedText.includes('"path"') || trimmedText.includes('"type"');
            
            console.log('üîç JSON detection - startsWithJSON:', startsWithJSON, 'endsWithJSON:', endsWithJSON, 'hasJSONIndicators:', hasJSONIndicators);
            
            const looksLikeJSON = (startsWithJSON && endsWithJSON) || hasJSONIndicators;
            
            if (looksLikeJSON) {
                console.log('üîÑ Text appears to be JSON format, attempting JSON.parse...');
                console.log('üìù Text to parse (length:', requiredText.length, '):', 
                    requiredText.length > 200 ? requiredText.substring(0, 200) + '...' : requiredText);
                console.log('üìù Text starts with:', JSON.stringify(requiredText.substring(0, 50)));
                console.log('üìù Text ends with:', JSON.stringify(requiredText.substring(Math.max(0, requiredText.length - 50))));
                
                if (requiredText.length === 0) {
                    console.log('‚ö†Ô∏è Cannot parse empty text as JSON');
                    return sections;
                }
                
                try {
                    const parsedRequired = JSON.parse(requiredText);
                    console.log('‚úÖ JSON.parse successful, result:', parsedRequired);
                    
                    if (Array.isArray(parsedRequired)) {
                        for (const item of parsedRequired) {
                            if (typeof item === 'object' && item.path) {
                                const fileInfo: RequiredFileInfo = {
                                    type: item.type === 'DIRECTORY_LISTING' ? 'DIRECTORY_LISTING' : 'FILE_CONTENT',
                                    path: item.path
                                };
                                sections.requiredFileInfos.push(fileInfo);
                                sections.requiredFilepaths.push(item.path);
                            } else if (typeof item === 'string') {
                                const fileInfo: RequiredFileInfo = {
                                    type: 'FILE_CONTENT',
                                    path: item
                                };
                                sections.requiredFileInfos.push(fileInfo);
                                sections.requiredFilepaths.push(item);
                            }
                        }
                    }
                    return sections; // JSONËß£ÊûêÊàêÂäüÊôÇ„ÅØÊó©Êúü„É™„Çø„Éº„É≥
                } catch (e) {
                    console.log('‚ùå JSON parsing failed:', (e as Error).message);
                    console.log('ÔøΩ Failed text (first 500 chars):', requiredText.substring(0, 500));
                    console.log('üìù Failed text (last 500 chars):', requiredText.substring(Math.max(0, requiredText.length - 500)));
                    
                    // ‰∏çÂÆåÂÖ®„Å™JSON„Çí‰øÆÊ≠£„Åó„Å¶„Åø„Çã
                    let fixedText = requiredText.trim();
                    
                    // ÂÖàÈ†≠„ÅÆ‰∏çÊ≠£„Å™ÊñáÂ≠ó„ÇíÈô§Âéª
                    if (!fixedText.startsWith('[') && !fixedText.startsWith('{')) {
                        const jsonStart = Math.max(fixedText.indexOf('['), fixedText.indexOf('{'));
                        if (jsonStart > 0) {
                            console.log('üîß Removing prefix before JSON start at position:', jsonStart);
                            fixedText = fixedText.substring(jsonStart);
                        }
                    }
                    
                    // Êú´Â∞æ„ÅÆ‰∏çÊ≠£„Å™ÊñáÂ≠ó„ÇíÈô§Âéª
                    if (!fixedText.endsWith(']') && !fixedText.endsWith('}')) {
                        const lastBrace = Math.max(fixedText.lastIndexOf(']'), fixedText.lastIndexOf('}'));
                        if (lastBrace > 0) {
                            console.log('üîß Removing suffix after JSON end at position:', lastBrace);
                            fixedText = fixedText.substring(0, lastBrace + 1);
                        }
                    }
                    
                    if (fixedText !== requiredText.trim()) {
                        console.log('üîß Attempting to parse fixed JSON...');
                        try {
                            const parsedRequired = JSON.parse(fixedText);
                            console.log('‚úÖ Fixed JSON.parse successful!');
                            
                            if (Array.isArray(parsedRequired)) {
                                for (const item of parsedRequired) {
                                    if (typeof item === 'object' && item.path) {
                                        const fileInfo: RequiredFileInfo = {
                                            type: item.type === 'DIRECTORY_LISTING' ? 'DIRECTORY_LISTING' : 'FILE_CONTENT',
                                            path: item.path
                                        };
                                        sections.requiredFileInfos.push(fileInfo);
                                        sections.requiredFilepaths.push(item.path);
                                    } else if (typeof item === 'string') {
                                        const fileInfo: RequiredFileInfo = {
                                            type: 'FILE_CONTENT',
                                            path: item
                                        };
                                        sections.requiredFileInfos.push(fileInfo);
                                        sections.requiredFilepaths.push(item);
                                    }
                                }
                            } else if (typeof parsedRequired === 'object' && parsedRequired.path) {
                                const fileInfo: RequiredFileInfo = {
                                    type: parsedRequired.type === 'DIRECTORY_LISTING' ? 'DIRECTORY_LISTING' : 'FILE_CONTENT',
                                    path: parsedRequired.path
                                };
                                sections.requiredFileInfos.push(fileInfo);
                                sections.requiredFilepaths.push(parsedRequired.path);
                            }
                            return sections;
                        } catch (fixedParseError) {
                            console.log('‚ùå Fixed JSON.parse also failed:', (fixedParseError as Error).message);
                        }
                    }
                    
                    console.log('ÔøΩüîÑ Falling back to manual parsing...');
                }
            } else {
                console.log('‚ö†Ô∏è Text does not appear to be JSON format, using manual parsing');
            }
            
            // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºöÊâãÂãï„Éë„Éº„Çπ
            console.log('üîÑ Manual parsing of required text...');
            
            // „Åæ„ÅöJSON„Éë„Çø„Éº„É≥„ÇíË©¶„Åô
            const pathMatches = requiredText.match(/"path":\s*"([^"]+)"/g);
            const typeMatches = requiredText.match(/"type":\s*"([^"]+)"/g);
            
            console.log('üîç pathMatches found:', pathMatches);
            console.log('üîç typeMatches found:', typeMatches);
            
            if (pathMatches && pathMatches.length > 0) {
                console.log('‚úÖ Using regex path extraction');
                for (let i = 0; i < pathMatches.length; i++) {
                    const pathMatch = pathMatches[i].match(/"path":\s*"([^"]+)"/);
                    const typeMatch = typeMatches && typeMatches[i] ? typeMatches[i].match(/"type":\s*"([^"]+)"/) : null;
                    
                    if (pathMatch) {
                        const path = pathMatch[1];
                        const type = (typeMatch && typeMatch[1] === 'DIRECTORY_LISTING') ? 'DIRECTORY_LISTING' : 'FILE_CONTENT';
                        
                        console.log(`üìÅ Extracted: ${type} - ${path}`);
                        const fileInfo: RequiredFileInfo = { type, path };
                        sections.requiredFileInfos.push(fileInfo);
                        sections.requiredFilepaths.push(path);
                    }
                }
            } else {
                console.log('üîÑ Using fallback string extraction');
                // ÊúÄÂæå„ÅÆÊâãÊÆµÔºöÂçòÁ¥î„Å™ÊñáÂ≠óÂàóÊäΩÂá∫
                const lines = requiredText.split('\n');
                for (const line of lines) {
                    const trimmed = line.trim();
                    if (trimmed && !trimmed.startsWith('[') && !trimmed.startsWith(']') && 
                        !trimmed.startsWith('{') && !trimmed.startsWith('}') && 
                        !trimmed.includes('"type"') && !trimmed.includes('"path"') && 
                        !trimmed.includes('FILE_CONTENT') && !trimmed.includes('DIRECTORY_LISTING') && 
                        trimmed !== ',' && trimmed !== '') {
                        
                        // ÂºïÁî®Á¨¶„ÅßÂõ≤„Åæ„Çå„ÅüÊñáÂ≠óÂàó„ÇíÊäΩÂá∫
                        const quotedMatch = trimmed.match(/"([^"]+)"/);
                        if (quotedMatch) {
                            const path = quotedMatch[1];
                            console.log(`üìÑ Fallback extracted: ${path}`);
                            const fileInfo: RequiredFileInfo = { type: 'FILE_CONTENT', path };
                            sections.requiredFileInfos.push(fileInfo);
                            sections.requiredFilepaths.push(path);
                        } else if (trimmed.match(/^[a-zA-Z0-9_\-\/\.]+$/)) {
                            // ÂºïÁî®Á¨¶„Å™„Åó„ÅÆ„Éï„Ç°„Ç§„É´„Éë„ÇπÂΩ¢Âºè
                            console.log(`üìÑ Fallback extracted (unquoted): ${trimmed}`);
                            const fileInfo: RequiredFileInfo = { type: 'FILE_CONTENT', path: trimmed };
                            sections.requiredFileInfos.push(fileInfo);
                            sections.requiredFilepaths.push(trimmed);
                        }
                    }
                }
            }
        }

        console.log('‚úÖ analyzeMessages completed');
        console.log('üìã Final requiredFileInfos:', sections.requiredFileInfos);
        console.log('üìã Final requiredFilepaths:', sections.requiredFilepaths);
        
        return sections;
    }
}

export default MessageHandler;




// „Åì„ÅÆ„Éï„Ç°„Ç§„É´„ÅåÁõ¥Êé•ÂÆüË°å„Åï„Çå„ÅüÂ†¥Âêà„ÅÆ„Åø„ÄÅ‰ª•‰∏ã„ÅÆ„ÉÜ„Çπ„Éà„Ç≥„Éº„Éâ„ÇíÂÆüË°å
if (import.meta.url === `file://${process.argv[1]}`) {
    console.log("Running MessageHandler in debug mode...");

    const testMessageHandler = () => {
        const handler = new MessageHandler();

        // --- Test case 1: analyzeMessages with various tags ---
        console.log("\n--- Testing analyzeMessages ---");
        const testMessage = `
%_Thought_%
The provided context indicates a significant change in ra.proto from proto2 to proto3. The most critical change is the removal of the optional keyword from fields in messages like NewAuthorizationRequest. In proto3, scalar fields are no longer pointers and cannot be nil. This means that code in ra / ra.go that likely checks for nil on these fields (e.g., if req.Authz != nil) will now cause a compile error or be logically incorrect.
My primary task is to identify and correct these nil checks. The provided content of ra / ra.go is the first place to look.
Additionally, the fileChanges list shows that wfe / wfe.go was also modified in the original commit. This strongly suggests that wfe / wfe.go also uses the changed proto messages and will require similar corrections. I do not have the content for this file, so I will need to request it.
My plan is to first review ra / ra.go and formulate the exact modifications. Then, I will request the content of wfe / wfe.go to analyze its impact. Modifying ra / ra.go can wait until I have a complete picture, but for now, I will create a plan that includes requesting the other necessary files.

%_Plan_%
[
  {
    "step": 1,
    "action": "REVIEW_FILE_CONTENT",
    "filePath": "ra/ra.go",
    "reason": "Analyze the provided content to confirm the impact of the optional field removal and identify specific lines to be modified."
  },
  {
    "step": 2,
    "action": "REQUEST_FILE_CONTENT",
    "filePath": "wfe/wfe.go",
    "reason": "This file was part of the original commit's changed file list, suggesting it is also affected by the proto changes. Its content is needed for a complete fix."
  },
  {
    "step": 3,
    "action": "MODIFY_FILE",
    "filePath": "ra/ra.go",
    "reason": "Apply corrections to ra / ra.go based on the analysis in step 1. This step will be executed after gathering all necessary information."
  },
  {
    "step": 4,
    "action": "MODIFY_FILE",
    "filePath": "wfe/wfe.go",
    "reason": "Apply corrections to wfe / wfe.go after analyzing its content from step 2."
  }
]

%_Reply Required_%
[
  {
    "type": "FILE_CONTENT",
    "path": "wfe/wfe.go"
  },
  {
    "type": "DIRECTORY_LISTING",
    "path": "src/controllers"
  }
]

%_Comment_%
I have analyzed the initial context and created a four-step plan. I am starting by requesting the content of wfe / wfe.go as it is essential for understanding the full scope of required changes. I will proceed with code modification once I have all necessary file contents.

%%_Fin_%%
`;

        const result = handler.analyzeMessages(testMessage);
        console.log("Analysis Result:");
        console.log(JSON.stringify(result, null, 2));

        // Required files „ÅÆË©≥Á¥∞Á¢∫Ë™ç
        console.log("\n--- Required Files Detail ---");
        console.log("requiredFilepaths (legacy):", result.requiredFilepaths);
        console.log("requiredFileInfos (new):", result.requiredFileInfos);
        
        // „Çø„Ç§„ÉóÂà•„ÅÆÂàÜÈ°û
        const fileContentRequests = result.requiredFileInfos.filter(info => info.type === 'FILE_CONTENT');
        const directoryListingRequests = result.requiredFileInfos.filter(info => info.type === 'DIRECTORY_LISTING');
        
        console.log("FILE_CONTENT requests:", fileContentRequests);
        console.log("DIRECTORY_LISTING requests:", directoryListingRequests);

        // --- Test case 2: attachMessages ---
        console.log("\n--- Testing attachMessages ---");
        const newMessages = handler.attachMessages("user", "Hello, this is a new message.");
        console.log("Updated Messages:");
        console.log(JSON.stringify(newMessages, null, 2));
    };

    testMessageHandler();
}
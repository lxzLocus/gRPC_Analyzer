import fs from 'fs';
import path from 'path';
import { config } from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

// ES moduleÁí∞Â¢É„Åß„ÅÆ __dirname „ÅÆÂèñÂæó
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Áí∞Â¢ÉÂ§âÊï∞„ÅÆË®≠ÂÆö - Ê≠£„Åó„ÅÑ„Éë„Çπ„Åß .env „Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„Åø
config({ path: path.join(__dirname, '..', '..', '.env') });

// Gemini API„ÇØ„É©„Ç§„Ç¢„É≥„Éà„ÇíÂãïÁöÑ„Ç§„É≥„Éù„Éº„Éà
async function createLLMController(premergeDir) {
    try {
        console.log(`üîß Creating LLM Controller for: ${premergeDir}`);
        console.log(`üîç LLM_PROVIDER: ${process.env.LLM_PROVIDER}`);
        
        // „Éó„É≠„Éê„Ç§„ÉÄ„Éº„Å´Âøú„Åò„Å¶ÈÅ©Âàá„Å™„ÇØ„É©„Ç§„Ç¢„É≥„Éà„Çí‰ΩúÊàê
        if (process.env.LLM_PROVIDER === 'gemini') {
            // GeminiÁî®„ÅÆÁ∞°Êòì„Ç≥„É≥„Éà„É≠„Éº„É©„Éº
            return {
                run: async () => {
                    console.log(`ü§ñ Running Gemini processing for ${premergeDir}`);
                    console.log(`üìù Simulating LLM processing...`);
                    
                    // „Ç∑„Éü„É•„É¨„Éº„Éà„Åï„Çå„ÅüÂá¶ÁêÜÊôÇÈñì
                    await new Promise(resolve => setTimeout(resolve, 2000));
                    
                    console.log(`‚úÖ Gemini processing completed for ${premergeDir}`);
                    return { success: true, provider: 'gemini' };
                },
                cleanup: async () => {
                    console.log(`üßπ Cleaning up Gemini controller for ${premergeDir}`);
                }
            };
        } else if (process.env.LLM_PROVIDER === 'openai') {
            // OpenAIÁî®„ÅÆÁ∞°Êòì„Ç≥„É≥„Éà„É≠„Éº„É©„Éº
            return {
                run: async () => {
                    console.log(`ü§ñ Running OpenAI processing for ${premergeDir}`);
                    console.log(`üìù Simulating LLM processing...`);
                    
                    // „Ç∑„Éü„É•„É¨„Éº„Éà„Åï„Çå„ÅüÂá¶ÁêÜÊôÇÈñì
                    await new Promise(resolve => setTimeout(resolve, 2000));
                    
                    console.log(`‚úÖ OpenAI processing completed for ${premergeDir}`);
                    return { success: true, provider: 'openai' };
                },
                cleanup: async () => {
                    console.log(`üßπ Cleaning up OpenAI controller for ${premergeDir}`);
                }
            };
        } else {
            throw new Error(`Unsupported LLM provider: ${process.env.LLM_PROVIDER}`);
        }
    } catch (error) {
        console.error(`‚ùå Error creating LLM controller: ${error.message}`);
        throw error;
    }
}

export default createLLMController;
